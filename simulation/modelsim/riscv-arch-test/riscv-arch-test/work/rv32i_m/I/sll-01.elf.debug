
/home/taka/RISCV/mmRISC/simulation/modelsim/riscv-arch-test/riscv-arch-test/work/rv32i_m/I/sll-01.elf:     file format elf32-littleriscv


Disassembly of section .text.init:

90000000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
90000000:	feedc0b7          	lui	ra,0xfeedc
90000004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0x6eed9ba9>
90000008:	ff76e137          	lui	sp,0xff76e
9000000c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0x6f76bc52>
90000010:	7fbb71b7          	lui	gp,0x7fbb7
90000014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <offset+0x7fbb6e8f>
90000018:	bfddb237          	lui	tp,0xbfddb
9000001c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0x2fdd94d1>
90000020:	00000297          	auipc	t0,0x0
90000024:	0d828293          	addi	t0,t0,216 # 900000f8 <rvtest_code_begin>
90000028:	00002317          	auipc	t1,0x2
9000002c:	fd830313          	addi	t1,t1,-40 # 90002000 <rvtest_data_begin>
90000030:	b7fbb3b7          	lui	t2,0xb7fbb
90000034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0x27fb93f6>
90000038:	5bfde437          	lui	s0,0x5bfde
9000003c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <offset+0x5bfdda61>
90000040:	adfef4b7          	lui	s1,0xadfef
90000044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0x1dfecaba>
90000048:	56ff7537          	lui	a0,0x56ff7
9000004c:	6df50513          	addi	a0,a0,1759 # 56ff76df <offset+0x56ff75c3>
90000050:	ab7fc5b7          	lui	a1,0xab7fc
90000054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0x1b7f986b>
90000058:	d5bfe637          	lui	a2,0xd5bfe
9000005c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0x45bfbab3>
90000060:	eadff6b7          	lui	a3,0xeadff
90000064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0x5adfcbd7>
90000068:	f56ff737          	lui	a4,0xf56ff
9000006c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0x656fd469>
90000070:	fab807b7          	lui	a5,0xfab80
90000074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0x6ab7d8b2>
90000078:	7d5c0837          	lui	a6,0x7d5c0
9000007c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <offset+0x7d5bfcbf>
90000080:	beae08b7          	lui	a7,0xbeae0
90000084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0x2eaddbe9>
90000088:	df570937          	lui	s2,0xdf570
9000008c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0x4f56dc72>
90000090:	6fab89b7          	lui	s3,0x6fab8
90000094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <offset+0x6fab7e9f>
90000098:	b7d5ca37          	lui	s4,0xb7d5c
9000009c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0x27d59cd9>
900000a0:	dbeaeab7          	lui	s5,0xdbeae
900000a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0x4beabcea>
900000a8:	6df57b37          	lui	s6,0x6df57
900000ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <offset+0x6df56edb>
900000b0:	b6fabbb7          	lui	s7,0xb6fab
900000b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0x26fa94f7>
900000b8:	db7d6c37          	lui	s8,0xdb7d6
900000bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0x4b7d38f9>
900000c0:	edbebcb7          	lui	s9,0xedbeb
900000c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0x5dbe8afa>
900000c8:	76df5d37          	lui	s10,0x76df5
900000cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <offset+0x76df55e3>
900000d0:	bb6fbdb7          	lui	s11,0xbb6fb
900000d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0x2b6f887b>
900000d8:	ddb7de37          	lui	t3,0xddb7d
900000dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0x4db7b2bb>
900000e0:	eedbfeb7          	lui	t4,0xeedbf
900000e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0x5edbc7db>
900000e8:	f76dff37          	lui	t5,0xf76df
900000ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0x676dd26b>
900000f0:	fbb70fb7          	lui	t6,0xfbb70
900000f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0x6bb6d7b3>

900000f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sll)

RVTEST_SIGBASE( x2,signature_x2_1)
900000f8:	00002117          	auipc	sp,0x2
900000fc:	f1810113          	addi	sp,sp,-232 # 90002010 <begin_signature>

90000100 <inst_0>:

inst_0:
// rs2 == rd != rs1, rs1==x16, rs2==x28, rd==x28, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == -129, rs2_val == 10
// opcode: sll ; op1:x16; op2:x28; dest:x28; op1val:-0x81;  op2val:0xa
TEST_RR_OP(sll, x28, x16, x28, 0xfffdfc00, -0x81, 0xa, x2, 0, x9)
90000100:	f7f00813          	li	a6,-129
90000104:	00a00e13          	li	t3,10
90000108:	01c81e33          	sll	t3,a6,t3
9000010c:	01c12023          	sw	t3,0(sp)

90000110 <inst_1>:

inst_1:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x0, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val==5
// opcode: sll ; op1:x21; op2:x21; dest:x0; op1val:0x5;  op2val:0x5
TEST_RR_OP(sll, x0, x21, x21, 0, 0x5, 0x5, x2, 4, x9)
90000110:	00500a93          	li	s5,5
90000114:	00500a93          	li	s5,5
90000118:	015a9033          	sll	zero,s5,s5
9000011c:	00012223          	sw	zero,4(sp)

90000120 <inst_2>:

inst_2:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_val < 0 and rs2_val == 0, rs1_val == -32769
// opcode: sll ; op1:x18; op2:x18; dest:x18; op1val:-0x8001;  op2val:-0x8001
TEST_RR_OP(sll, x18, x18, x18, 0x80000000, -0x8001, -0x8001, x2, 8, x9)
90000120:	ffff8937          	lui	s2,0xffff8
90000124:	fff90913          	addi	s2,s2,-1 # ffff7fff <_end+0x6fff5cfb>
90000128:	ffff8937          	lui	s2,0xffff8
9000012c:	fff90913          	addi	s2,s2,-1 # ffff7fff <_end+0x6fff5cfb>
90000130:	01291933          	sll	s2,s2,s2
90000134:	01212423          	sw	s2,8(sp)

90000138 <inst_3>:

inst_3:
// rs1 == rd != rs2, rs1==x5, rs2==x13, rd==x5, rs1_val > 0 and rs2_val == 0, 
// opcode: sll ; op1:x5; op2:x13; dest:x5; op1val:0x7;  op2val:0x0
TEST_RR_OP(sll, x5, x5, x13, 0x7, 0x7, 0x0, x2, 12, x9)
90000138:	00700293          	li	t0,7
9000013c:	00000693          	li	a3,0
90000140:	00d292b3          	sll	t0,t0,a3
90000144:	00512623          	sw	t0,12(sp)

90000148 <inst_4>:

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x12, rd==x23, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, rs1_val==6
// opcode: sll ; op1:x22; op2:x12; dest:x23; op1val:0x6;  op2val:0x6
TEST_RR_OP(sll, x23, x22, x12, 0x180, 0x6, 0x6, x2, 16, x9)
90000148:	00600b13          	li	s6,6
9000014c:	00600613          	li	a2,6
90000150:	00cb1bb3          	sll	s7,s6,a2
90000154:	01712823          	sw	s7,16(sp)

90000158 <inst_5>:

inst_5:
// rs1==x19, rs2==x0, rd==x6, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, rs1_val == -2147483648, rs2_val == 16
// opcode: sll ; op1:x19; op2:x0; dest:x6; op1val:-0x80000000;  op2val:0x0
TEST_RR_OP(sll, x6, x19, x0, 0x80000000, -0x80000000, 0x0, x2, 20, x9)
90000158:	800009b7          	lui	s3,0x80000
9000015c:	00000013          	nop
90000160:	00099333          	sll	t1,s3,zero
90000164:	00612a23          	sw	t1,20(sp)

90000168 <inst_6>:

inst_6:
// rs1==x25, rs2==x24, rd==x13, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, rs2_val == 4, rs1_val==0
// opcode: sll ; op1:x25; op2:x24; dest:x13; op1val:0x0;  op2val:0x4
TEST_RR_OP(sll, x13, x25, x24, 0x0, 0x0, 0x4, x2, 24, x9)
90000168:	00000c93          	li	s9,0
9000016c:	00400c13          	li	s8,4
90000170:	018c96b3          	sll	a3,s9,s8
90000174:	00d12c23          	sw	a3,24(sp)

90000178 <inst_7>:

inst_7:
// rs1==x12, rs2==x26, rd==x16, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 2147483647, rs2_val == 21
// opcode: sll ; op1:x12; op2:x26; dest:x16; op1val:0x7fffffff;  op2val:0x15
TEST_RR_OP(sll, x16, x12, x26, 0xffe00000, 0x7fffffff, 0x15, x2, 28, x9)
90000178:	80000637          	lui	a2,0x80000
9000017c:	fff60613          	addi	a2,a2,-1 # 7fffffff <_end+0xefffdcfb>
90000180:	01500d13          	li	s10,21
90000184:	01a61833          	sll	a6,a2,s10
90000188:	01012e23          	sw	a6,28(sp)

9000018c <inst_8>:

inst_8:
// rs1==x6, rs2==x14, rd==x20, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, rs1_val == 1
// opcode: sll ; op1:x6; op2:x14; dest:x20; op1val:0x1;  op2val:0x4
TEST_RR_OP(sll, x20, x6, x14, 0x10, 0x1, 0x4, x2, 32, x9)
9000018c:	00100313          	li	t1,1
90000190:	00400713          	li	a4,4
90000194:	00e31a33          	sll	s4,t1,a4
90000198:	03412023          	sw	s4,32(sp)

9000019c <inst_9>:

inst_9:
// rs1==x14, rs2==x1, rd==x22, rs1_val == 2, rs1_val==2
// opcode: sll ; op1:x14; op2:x1; dest:x22; op1val:0x2;  op2val:0x1f
TEST_RR_OP(sll, x22, x14, x1, 0x0, 0x2, 0x1f, x2, 36, x9)
9000019c:	00200713          	li	a4,2
900001a0:	01f00093          	li	ra,31
900001a4:	00171b33          	sll	s6,a4,ra
900001a8:	03612223          	sw	s6,36(sp)

900001ac <inst_10>:

inst_10:
// rs1==x29, rs2==x7, rd==x21, rs1_val == 4, rs2_val == 2, rs1_val==4
// opcode: sll ; op1:x29; op2:x7; dest:x21; op1val:0x4;  op2val:0x2
TEST_RR_OP(sll, x21, x29, x7, 0x10, 0x4, 0x2, x2, 40, x9)
900001ac:	00400e93          	li	t4,4
900001b0:	00200393          	li	t2,2
900001b4:	007e9ab3          	sll	s5,t4,t2
900001b8:	03512423          	sw	s5,40(sp)

900001bc <inst_11>:

inst_11:
// rs1==x31, rs2==x10, rd==x4, rs1_val == 8, 
// opcode: sll ; op1:x31; op2:x10; dest:x4; op1val:0x8;  op2val:0x1f
TEST_RR_OP(sll, x4, x31, x10, 0x0, 0x8, 0x1f, x2, 44, x9)
900001bc:	00800f93          	li	t6,8
900001c0:	01f00513          	li	a0,31
900001c4:	00af9233          	sll	tp,t6,a0
900001c8:	02412623          	sw	tp,44(sp)

900001cc <inst_12>:

inst_12:
// rs1==x17, rs2==x20, rd==x7, rs1_val == 16, 
// opcode: sll ; op1:x17; op2:x20; dest:x7; op1val:0x10;  op2val:0x1f
TEST_RR_OP(sll, x7, x17, x20, 0x0, 0x10, 0x1f, x2, 48, x9)
900001cc:	01000893          	li	a7,16
900001d0:	01f00a13          	li	s4,31
900001d4:	014893b3          	sll	t2,a7,s4
900001d8:	02712823          	sw	t2,48(sp)

900001dc <inst_13>:

inst_13:
// rs1==x20, rs2==x11, rd==x12, rs1_val == 32, rs2_val == 23
// opcode: sll ; op1:x20; op2:x11; dest:x12; op1val:0x20;  op2val:0x17
TEST_RR_OP(sll, x12, x20, x11, 0x10000000, 0x20, 0x17, x2, 52, x9)
900001dc:	02000a13          	li	s4,32
900001e0:	01700593          	li	a1,23
900001e4:	00ba1633          	sll	a2,s4,a1
900001e8:	02c12a23          	sw	a2,52(sp)

900001ec <inst_14>:

inst_14:
// rs1==x11, rs2==x22, rd==x3, rs1_val == 64, 
// opcode: sll ; op1:x11; op2:x22; dest:x3; op1val:0x40;  op2val:0x11
TEST_RR_OP(sll, x3, x11, x22, 0x800000, 0x40, 0x11, x2, 56, x9)
900001ec:	04000593          	li	a1,64
900001f0:	01100b13          	li	s6,17
900001f4:	016591b3          	sll	gp,a1,s6
900001f8:	02312c23          	sw	gp,56(sp)

900001fc <inst_15>:

inst_15:
// rs1==x0, rs2==x30, rd==x24, rs1_val == 128, 
// opcode: sll ; op1:x0; op2:x30; dest:x24; op1val:0x0;  op2val:0x10
TEST_RR_OP(sll, x24, x0, x30, 0x0, 0x0, 0x10, x2, 60, x9)
900001fc:	00000013          	nop
90000200:	01000f13          	li	t5,16
90000204:	01e01c33          	sll	s8,zero,t5
90000208:	03812e23          	sw	s8,60(sp)

9000020c <inst_16>:

inst_16:
// rs1==x3, rs2==x31, rd==x8, rs1_val == 256, rs2_val == 27
// opcode: sll ; op1:x3; op2:x31; dest:x8; op1val:0x100;  op2val:0x1b
TEST_RR_OP(sll, x8, x3, x31, 0x0, 0x100, 0x1b, x2, 64, x9)
9000020c:	10000193          	li	gp,256
90000210:	01b00f93          	li	t6,27
90000214:	01f19433          	sll	s0,gp,t6
90000218:	04812023          	sw	s0,64(sp)

9000021c <inst_17>:

inst_17:
// rs1==x27, rs2==x17, rd==x10, rs1_val == 512, 
// opcode: sll ; op1:x27; op2:x17; dest:x10; op1val:0x200;  op2val:0x0
TEST_RR_OP(sll, x10, x27, x17, 0x200, 0x200, 0x0, x2, 68, x20)
9000021c:	20000d93          	li	s11,512
90000220:	00000893          	li	a7,0
90000224:	011d9533          	sll	a0,s11,a7
90000228:	04a12223          	sw	a0,68(sp)
RVTEST_SIGBASE( x18,signature_x18_0)
9000022c:	00002917          	auipc	s2,0x2
90000230:	e2c90913          	addi	s2,s2,-468 # 90002058 <signature_x18_0>

90000234 <inst_18>:

inst_18:
// rs1==x10, rs2==x19, rd==x11, rs1_val == 1024, 
// opcode: sll ; op1:x10; op2:x19; dest:x11; op1val:0x400;  op2val:0x1b
TEST_RR_OP(sll, x11, x10, x19, 0x0, 0x400, 0x1b, x18, 0, x20)
90000234:	40000513          	li	a0,1024
90000238:	01b00993          	li	s3,27
9000023c:	013515b3          	sll	a1,a0,s3
90000240:	00b92023          	sw	a1,0(s2)

90000244 <inst_19>:

inst_19:
// rs1==x8, rs2==x27, rd==x1, rs1_val == 2048, 
// opcode: sll ; op1:x8; op2:x27; dest:x1; op1val:0x800;  op2val:0x6
TEST_RR_OP(sll, x1, x8, x27, 0x20000, 0x800, 0x6, x18, 4, x20)
90000244:	00001437          	lui	s0,0x1
90000248:	80040413          	addi	s0,s0,-2048 # 800 <offset+0x6e4>
9000024c:	00600d93          	li	s11,6
90000250:	01b410b3          	sll	ra,s0,s11
90000254:	00192223          	sw	ra,4(s2)

90000258 <inst_20>:

inst_20:
// rs1==x28, rs2==x9, rd==x25, rs1_val == 4096, 
// opcode: sll ; op1:x28; op2:x9; dest:x25; op1val:0x1000;  op2val:0x10
TEST_RR_OP(sll, x25, x28, x9, 0x10000000, 0x1000, 0x10, x18, 8, x20)
90000258:	00001e37          	lui	t3,0x1
9000025c:	01000493          	li	s1,16
90000260:	009e1cb3          	sll	s9,t3,s1
90000264:	01992423          	sw	s9,8(s2)

90000268 <inst_21>:

inst_21:
// rs1==x2, rs2==x15, rd==x27, rs1_val == 8192, 
// opcode: sll ; op1:x2; op2:x15; dest:x27; op1val:0x2000;  op2val:0xd
TEST_RR_OP(sll, x27, x2, x15, 0x4000000, 0x2000, 0xd, x18, 12, x20)
90000268:	00002137          	lui	sp,0x2
9000026c:	00d00793          	li	a5,13
90000270:	00f11db3          	sll	s11,sp,a5
90000274:	01b92623          	sw	s11,12(s2)

90000278 <inst_22>:

inst_22:
// rs1==x24, rs2==x29, rd==x26, rs1_val == 16384, 
// opcode: sll ; op1:x24; op2:x29; dest:x26; op1val:0x4000;  op2val:0x12
TEST_RR_OP(sll, x26, x24, x29, 0x0, 0x4000, 0x12, x18, 16, x20)
90000278:	00004c37          	lui	s8,0x4
9000027c:	01200e93          	li	t4,18
90000280:	01dc1d33          	sll	s10,s8,t4
90000284:	01a92823          	sw	s10,16(s2)

90000288 <inst_23>:

inst_23:
// rs1==x1, rs2==x23, rd==x9, rs1_val == 32768, 
// opcode: sll ; op1:x1; op2:x23; dest:x9; op1val:0x8000;  op2val:0x11
TEST_RR_OP(sll, x9, x1, x23, 0x0, 0x8000, 0x11, x18, 20, x20)
90000288:	000080b7          	lui	ra,0x8
9000028c:	01100b93          	li	s7,17
90000290:	017094b3          	sll	s1,ra,s7
90000294:	00992a23          	sw	s1,20(s2)

90000298 <inst_24>:

inst_24:
// rs1==x23, rs2==x16, rd==x14, rs1_val == 65536, 
// opcode: sll ; op1:x23; op2:x16; dest:x14; op1val:0x10000;  op2val:0x1f
TEST_RR_OP(sll, x14, x23, x16, 0x0, 0x10000, 0x1f, x18, 24, x20)
90000298:	00010bb7          	lui	s7,0x10
9000029c:	01f00813          	li	a6,31
900002a0:	010b9733          	sll	a4,s7,a6
900002a4:	00e92c23          	sw	a4,24(s2)

900002a8 <inst_25>:

inst_25:
// rs1==x4, rs2==x3, rd==x17, rs1_val == 131072, 
// opcode: sll ; op1:x4; op2:x3; dest:x17; op1val:0x20000;  op2val:0x13
TEST_RR_OP(sll, x17, x4, x3, 0x0, 0x20000, 0x13, x18, 28, x20)
900002a8:	00020237          	lui	tp,0x20
900002ac:	01300193          	li	gp,19
900002b0:	003218b3          	sll	a7,tp,gp
900002b4:	01192e23          	sw	a7,28(s2)

900002b8 <inst_26>:

inst_26:
// rs1==x7, rs2==x4, rd==x15, rs1_val == 262144, 
// opcode: sll ; op1:x7; op2:x4; dest:x15; op1val:0x40000;  op2val:0x17
TEST_RR_OP(sll, x15, x7, x4, 0x0, 0x40000, 0x17, x18, 32, x20)
900002b8:	000403b7          	lui	t2,0x40
900002bc:	01700213          	li	tp,23
900002c0:	004397b3          	sll	a5,t2,tp
900002c4:	02f92023          	sw	a5,32(s2)

900002c8 <inst_27>:

inst_27:
// rs1==x9, rs2==x2, rd==x29, rs1_val == 524288, 
// opcode: sll ; op1:x9; op2:x2; dest:x29; op1val:0x80000;  op2val:0x13
TEST_RR_OP(sll, x29, x9, x2, 0x0, 0x80000, 0x13, x18, 36, x20)
900002c8:	000804b7          	lui	s1,0x80
900002cc:	01300113          	li	sp,19
900002d0:	00249eb3          	sll	t4,s1,sp
900002d4:	03d92223          	sw	t4,36(s2)

900002d8 <inst_28>:

inst_28:
// rs1==x15, rs2==x8, rd==x31, rs1_val == 1048576, 
// opcode: sll ; op1:x15; op2:x8; dest:x31; op1val:0x100000;  op2val:0xb
TEST_RR_OP(sll, x31, x15, x8, 0x80000000, 0x100000, 0xb, x18, 40, x20)
900002d8:	001007b7          	lui	a5,0x100
900002dc:	00b00413          	li	s0,11
900002e0:	00879fb3          	sll	t6,a5,s0
900002e4:	03f92423          	sw	t6,40(s2)

900002e8 <inst_29>:

inst_29:
// rs1==x26, rs2==x6, rd==x30, rs1_val == 2097152, 
// opcode: sll ; op1:x26; op2:x6; dest:x30; op1val:0x200000;  op2val:0x1f
TEST_RR_OP(sll, x30, x26, x6, 0x0, 0x200000, 0x1f, x18, 44, x20)
900002e8:	00200d37          	lui	s10,0x200
900002ec:	01f00313          	li	t1,31
900002f0:	006d1f33          	sll	t5,s10,t1
900002f4:	03e92623          	sw	t5,44(s2)

900002f8 <inst_30>:

inst_30:
// rs1==x30, rs2==x5, rd==x19, rs1_val == 4194304, 
// opcode: sll ; op1:x30; op2:x5; dest:x19; op1val:0x400000;  op2val:0x9
TEST_RR_OP(sll, x19, x30, x5, 0x80000000, 0x400000, 0x9, x18, 48, x20)
900002f8:	00400f37          	lui	t5,0x400
900002fc:	00900293          	li	t0,9
90000300:	005f19b3          	sll	s3,t5,t0
90000304:	03392823          	sw	s3,48(s2)

90000308 <inst_31>:

inst_31:
// rs1==x13, rs2==x25, rd==x2, rs1_val == 8388608, 
// opcode: sll ; op1:x13; op2:x25; dest:x2; op1val:0x800000;  op2val:0x4
TEST_RR_OP(sll, x2, x13, x25, 0x8000000, 0x800000, 0x4, x18, 52, x20)
90000308:	008006b7          	lui	a3,0x800
9000030c:	00400c93          	li	s9,4
90000310:	01969133          	sll	sp,a3,s9
90000314:	02292a23          	sw	sp,52(s2)

90000318 <inst_32>:

inst_32:
// rs1_val == 16777216, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x1000000;  op2val:0x2
TEST_RR_OP(sll, x12, x10, x11, 0x4000000, 0x1000000, 0x2, x18, 56, x20)
90000318:	01000537          	lui	a0,0x1000
9000031c:	00200593          	li	a1,2
90000320:	00b51633          	sll	a2,a0,a1
90000324:	02c92c23          	sw	a2,56(s2)

90000328 <inst_33>:

inst_33:
// rs1_val == 33554432, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x2000000;  op2val:0x4
TEST_RR_OP(sll, x12, x10, x11, 0x20000000, 0x2000000, 0x4, x18, 60, x1)
90000328:	02000537          	lui	a0,0x2000
9000032c:	00400593          	li	a1,4
90000330:	00b51633          	sll	a2,a0,a1
90000334:	02c92e23          	sw	a2,60(s2)

90000338 <inst_34>:

inst_34:
// rs1_val == 67108864, rs2_val == 8
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:0x8
TEST_RR_OP(sll, x12, x10, x11, 0x0, 0x4000000, 0x8, x18, 64, x1)
90000338:	04000537          	lui	a0,0x4000
9000033c:	00800593          	li	a1,8
90000340:	00b51633          	sll	a2,a0,a1
90000344:	04c92023          	sw	a2,64(s2)

90000348 <inst_35>:

inst_35:
// rs1_val == 134217728, rs2_val == 29
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x8000000;  op2val:0x1d
TEST_RR_OP(sll, x12, x10, x11, 0x0, 0x8000000, 0x1d, x18, 68, x1)
90000348:	08000537          	lui	a0,0x8000
9000034c:	01d00593          	li	a1,29
90000350:	00b51633          	sll	a2,a0,a1
90000354:	04c92223          	sw	a2,68(s2)

90000358 <inst_36>:

inst_36:
// rs1_val == 268435456, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0x12
TEST_RR_OP(sll, x12, x10, x11, 0x0, 0x10000000, 0x12, x18, 72, x1)
90000358:	10000537          	lui	a0,0x10000
9000035c:	01200593          	li	a1,18
90000360:	00b51633          	sll	a2,a0,a1
90000364:	04c92423          	sw	a2,72(s2)

90000368 <inst_37>:

inst_37:
// rs1_val == 536870912, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0xd
TEST_RR_OP(sll, x12, x10, x11, 0x0, 0x20000000, 0xd, x18, 76, x1)
90000368:	20000537          	lui	a0,0x20000
9000036c:	00d00593          	li	a1,13
90000370:	00b51633          	sll	a2,a0,a1
90000374:	04c92623          	sw	a2,76(s2)

90000378 <inst_38>:

inst_38:
// rs1_val == 1073741824, rs2_val == 15
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:0xf
TEST_RR_OP(sll, x12, x10, x11, 0x0, 0x40000000, 0xf, x18, 80, x1)
90000378:	40000537          	lui	a0,0x40000
9000037c:	00f00593          	li	a1,15
90000380:	00b51633          	sll	a2,a0,a1
90000384:	04c92823          	sw	a2,80(s2)

90000388 <inst_39>:

inst_39:
// rs1_val == -2, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x2;  op2val:0x1d
TEST_RR_OP(sll, x12, x10, x11, 0xc0000000, -0x2, 0x1d, x18, 84, x1)
90000388:	ffe00513          	li	a0,-2
9000038c:	01d00593          	li	a1,29
90000390:	00b51633          	sll	a2,a0,a1
90000394:	04c92a23          	sw	a2,84(s2)

90000398 <inst_40>:

inst_40:
// rs1_val == -3, rs2_val == 30
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x3;  op2val:0x1e
TEST_RR_OP(sll, x12, x10, x11, 0x40000000, -0x3, 0x1e, x18, 88, x1)
90000398:	ffd00513          	li	a0,-3
9000039c:	01e00593          	li	a1,30
900003a0:	00b51633          	sll	a2,a0,a1
900003a4:	04c92c23          	sw	a2,88(s2)

900003a8 <inst_41>:

inst_41:
// rs1_val == -5, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:0x15
TEST_RR_OP(sll, x12, x10, x11, 0xff600000, -0x5, 0x15, x18, 92, x1)
900003a8:	ffb00513          	li	a0,-5
900003ac:	01500593          	li	a1,21
900003b0:	00b51633          	sll	a2,a0,a1
900003b4:	04c92e23          	sw	a2,92(s2)

900003b8 <inst_42>:

inst_42:
// rs1_val == -9, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x9;  op2val:0x13
TEST_RR_OP(sll, x12, x10, x11, 0xffb80000, -0x9, 0x13, x18, 96, x1)
900003b8:	ff700513          	li	a0,-9
900003bc:	01300593          	li	a1,19
900003c0:	00b51633          	sll	a2,a0,a1
900003c4:	06c92023          	sw	a2,96(s2)

900003c8 <inst_43>:

inst_43:
// rs1_val == -17, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x11;  op2val:0xa
TEST_RR_OP(sll, x12, x10, x11, 0xffffbc00, -0x11, 0xa, x18, 100, x1)
900003c8:	fef00513          	li	a0,-17
900003cc:	00a00593          	li	a1,10
900003d0:	00b51633          	sll	a2,a0,a1
900003d4:	06c92223          	sw	a2,100(s2)

900003d8 <inst_44>:

inst_44:
// rs1_val == -33, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x21;  op2val:0x8
TEST_RR_OP(sll, x12, x10, x11, 0xffffdf00, -0x21, 0x8, x18, 104, x1)
900003d8:	fdf00513          	li	a0,-33
900003dc:	00800593          	li	a1,8
900003e0:	00b51633          	sll	a2,a0,a1
900003e4:	06c92423          	sw	a2,104(s2)

900003e8 <inst_45>:

inst_45:
// rs1_val == -65, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x41;  op2val:0x6
TEST_RR_OP(sll, x12, x10, x11, 0xffffefc0, -0x41, 0x6, x18, 108, x1)
900003e8:	fbf00513          	li	a0,-65
900003ec:	00600593          	li	a1,6
900003f0:	00b51633          	sll	a2,a0,a1
900003f4:	06c92623          	sw	a2,108(s2)

900003f8 <inst_46>:

inst_46:
// rs1_val == -257, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x101;  op2val:0x3
TEST_RR_OP(sll, x12, x10, x11, 0xfffff7f8, -0x101, 0x3, x18, 112, x1)
900003f8:	eff00513          	li	a0,-257
900003fc:	00300593          	li	a1,3
90000400:	00b51633          	sll	a2,a0,a1
90000404:	06c92823          	sw	a2,112(s2)

90000408 <inst_47>:

inst_47:
// rs1_val == -513, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x201;  op2val:0x8
TEST_RR_OP(sll, x12, x10, x11, 0xfffdff00, -0x201, 0x8, x18, 116, x1)
90000408:	dff00513          	li	a0,-513
9000040c:	00800593          	li	a1,8
90000410:	00b51633          	sll	a2,a0,a1
90000414:	06c92a23          	sw	a2,116(s2)

90000418 <inst_48>:

inst_48:
// rs1_val == -1025, rs2_val == 1
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x401;  op2val:0x1
TEST_RR_OP(sll, x12, x10, x11, 0xfffff7fe, -0x401, 0x1, x18, 120, x1)
90000418:	bff00513          	li	a0,-1025
9000041c:	00100593          	li	a1,1
90000420:	00b51633          	sll	a2,a0,a1
90000424:	06c92c23          	sw	a2,120(s2)

90000428 <inst_49>:

inst_49:
// rs1_val == -2049, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x801;  op2val:0x1e
TEST_RR_OP(sll, x12, x10, x11, 0xc0000000, -0x801, 0x1e, x18, 124, x1)
90000428:	fffff537          	lui	a0,0xfffff
9000042c:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0x6fffd4fb>
90000430:	01e00593          	li	a1,30
90000434:	00b51633          	sll	a2,a0,a1
90000438:	06c92e23          	sw	a2,124(s2)

9000043c <inst_50>:

inst_50:
// rs1_val == -4097, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x1001;  op2val:0xa
TEST_RR_OP(sll, x12, x10, x11, 0xffbffc00, -0x1001, 0xa, x18, 128, x1)
9000043c:	fffff537          	lui	a0,0xfffff
90000440:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0x6fffccfb>
90000444:	00a00593          	li	a1,10
90000448:	00b51633          	sll	a2,a0,a1
9000044c:	08c92023          	sw	a2,128(s2)

90000450 <inst_51>:

inst_51:
// rs1_val == -8193, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x2001;  op2val:0xf
TEST_RR_OP(sll, x12, x10, x11, 0xefff8000, -0x2001, 0xf, x18, 132, x1)
90000450:	ffffe537          	lui	a0,0xffffe
90000454:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0x6fffbcfb>
90000458:	00f00593          	li	a1,15
9000045c:	00b51633          	sll	a2,a0,a1
90000460:	08c92223          	sw	a2,132(s2)

90000464 <inst_52>:

inst_52:
// rs1_val == -16385, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x4001;  op2val:0x15
TEST_RR_OP(sll, x12, x10, x11, 0xffe00000, -0x4001, 0x15, x18, 136, x1)
90000464:	ffffc537          	lui	a0,0xffffc
90000468:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0x6fff9cfb>
9000046c:	01500593          	li	a1,21
90000470:	00b51633          	sll	a2,a0,a1
90000474:	08c92423          	sw	a2,136(s2)

90000478 <inst_53>:

inst_53:
// rs1_val == -65537, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x10001;  op2val:0x4
TEST_RR_OP(sll, x12, x10, x11, 0xffeffff0, -0x10001, 0x4, x18, 140, x1)
90000478:	ffff0537          	lui	a0,0xffff0
9000047c:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0x6ffedcfb>
90000480:	00400593          	li	a1,4
90000484:	00b51633          	sll	a2,a0,a1
90000488:	08c92623          	sw	a2,140(s2)

9000048c <inst_54>:

inst_54:
// rs1_val == -131073, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x20001;  op2val:0x11
TEST_RR_OP(sll, x12, x10, x11, 0xfffe0000, -0x20001, 0x11, x18, 144, x1)
9000048c:	fffe0537          	lui	a0,0xfffe0
90000490:	fff50513          	addi	a0,a0,-1 # fffdffff <_end+0x6ffddcfb>
90000494:	01100593          	li	a1,17
90000498:	00b51633          	sll	a2,a0,a1
9000049c:	08c92823          	sw	a2,144(s2)

900004a0 <inst_55>:

inst_55:
// rs1_val == -262145, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x40001;  op2val:0x0
TEST_RR_OP(sll, x12, x10, x11, 0xfffbffff, -0x40001, 0x0, x18, 148, x1)
900004a0:	fffc0537          	lui	a0,0xfffc0
900004a4:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0x6ffbdcfb>
900004a8:	00000593          	li	a1,0
900004ac:	00b51633          	sll	a2,a0,a1
900004b0:	08c92a23          	sw	a2,148(s2)

900004b4 <inst_56>:

inst_56:
// rs1_val == -8388609, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x800001;  op2val:0x3
TEST_RR_OP(sll, x12, x10, x11, 0xfbfffff8, -0x800001, 0x3, x18, 152, x1)
900004b4:	ff800537          	lui	a0,0xff800
900004b8:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0x6f7fdcfb>
900004bc:	00300593          	li	a1,3
900004c0:	00b51633          	sll	a2,a0,a1
900004c4:	08c92c23          	sw	a2,152(s2)

900004c8 <inst_57>:

inst_57:
// rs1_val == -16777217, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x1000001;  op2val:0x0
TEST_RR_OP(sll, x12, x10, x11, 0xfeffffff, -0x1000001, 0x0, x18, 156, x1)
900004c8:	ff000537          	lui	a0,0xff000
900004cc:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0x6effdcfb>
900004d0:	00000593          	li	a1,0
900004d4:	00b51633          	sll	a2,a0,a1
900004d8:	08c92e23          	sw	a2,156(s2)

900004dc <inst_58>:

inst_58:
// rs1_val == -33554433, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x2000001;  op2val:0x1
TEST_RR_OP(sll, x12, x10, x11, 0xfbfffffe, -0x2000001, 0x1, x18, 160, x1)
900004dc:	fe000537          	lui	a0,0xfe000
900004e0:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0x6dffdcfb>
900004e4:	00100593          	li	a1,1
900004e8:	00b51633          	sll	a2,a0,a1
900004ec:	0ac92023          	sw	a2,160(s2)

900004f0 <inst_59>:

inst_59:
// rs1_val == -67108865, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x4000001;  op2val:0x13
TEST_RR_OP(sll, x12, x10, x11, 0xfff80000, -0x4000001, 0x13, x18, 164, x1)
900004f0:	fc000537          	lui	a0,0xfc000
900004f4:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0x6bffdcfb>
900004f8:	01300593          	li	a1,19
900004fc:	00b51633          	sll	a2,a0,a1
90000500:	0ac92223          	sw	a2,164(s2)

90000504 <inst_60>:

inst_60:
// rs1_val == -134217729, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x8000001;  op2val:0x1e
TEST_RR_OP(sll, x12, x10, x11, 0xc0000000, -0x8000001, 0x1e, x18, 168, x1)
90000504:	f8000537          	lui	a0,0xf8000
90000508:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0x67ffdcfb>
9000050c:	01e00593          	li	a1,30
90000510:	00b51633          	sll	a2,a0,a1
90000514:	0ac92423          	sw	a2,168(s2)

90000518 <inst_61>:

inst_61:
// rs1_val == -268435457, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x10000001;  op2val:0x13
TEST_RR_OP(sll, x12, x10, x11, 0xfff80000, -0x10000001, 0x13, x18, 172, x1)
90000518:	f0000537          	lui	a0,0xf0000
9000051c:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0x5fffdcfb>
90000520:	01300593          	li	a1,19
90000524:	00b51633          	sll	a2,a0,a1
90000528:	0ac92623          	sw	a2,172(s2)

9000052c <inst_62>:

inst_62:
// rs1_val == -536870913, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x20000001;  op2val:0x12
TEST_RR_OP(sll, x12, x10, x11, 0xfffc0000, -0x20000001, 0x12, x18, 176, x1)
9000052c:	e0000537          	lui	a0,0xe0000
90000530:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0x4fffdcfb>
90000534:	01200593          	li	a1,18
90000538:	00b51633          	sll	a2,a0,a1
9000053c:	0ac92823          	sw	a2,176(s2)

90000540 <inst_63>:

inst_63:
// rs1_val == -1073741825, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x40000001;  op2val:0x5
TEST_RR_OP(sll, x12, x10, x11, 0xffffffe0, -0x40000001, 0x5, x18, 180, x1)
90000540:	c0000537          	lui	a0,0xc0000
90000544:	fff50513          	addi	a0,a0,-1 # bfffffff <_end+0x2fffdcfb>
90000548:	00500593          	li	a1,5
9000054c:	00b51633          	sll	a2,a0,a1
90000550:	0ac92a23          	sw	a2,180(s2)

90000554 <inst_64>:

inst_64:
// rs1_val == 1431655765, rs1_val==1431655765
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xc
TEST_RR_OP(sll, x12, x10, x11, 0x55555000, 0x55555555, 0xc, x18, 184, x1)
90000554:	55555537          	lui	a0,0x55555
90000558:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x55555439>
9000055c:	00c00593          	li	a1,12
90000560:	00b51633          	sll	a2,a0,a1
90000564:	0ac92c23          	sw	a2,184(s2)

90000568 <inst_65>:

inst_65:
// rs1_val == -1431655766, rs1_val==-1431655766
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x4
TEST_RR_OP(sll, x12, x10, x11, 0xaaaaaaa0, -0x55555556, 0x4, x18, 188, x1)
90000568:	aaaab537          	lui	a0,0xaaaab
9000056c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa87a6>
90000570:	00400593          	li	a1,4
90000574:	00b51633          	sll	a2,a0,a1
90000578:	0ac92e23          	sw	a2,188(s2)

9000057c <inst_66>:

inst_66:
// rs1_val==3, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x1b
TEST_RR_OP(sll, x12, x10, x11, 0x18000000, 0x3, 0x1b, x18, 192, x1)
9000057c:	00300513          	li	a0,3
90000580:	01b00593          	li	a1,27
90000584:	00b51633          	sll	a2,a0,a1
90000588:	0cc92023          	sw	a2,192(s2)

9000058c <inst_67>:

inst_67:
// rs1_val==858993459, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(sll, x12, x10, x11, 0x33333333, 0x33333333, 0x0, x18, 196, x1)
9000058c:	33333537          	lui	a0,0x33333
90000590:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x33333217>
90000594:	00000593          	li	a1,0
90000598:	00b51633          	sll	a2,a0,a1
9000059c:	0cc92223          	sw	a2,196(s2)

900005a0 <inst_68>:

inst_68:
// rs1_val==1717986918, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb
TEST_RR_OP(sll, x12, x10, x11, 0x33333000, 0x66666666, 0xb, x18, 200, x1)
900005a0:	66666537          	lui	a0,0x66666
900005a4:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x6666654a>
900005a8:	00b00593          	li	a1,11
900005ac:	00b51633          	sll	a2,a0,a1
900005b0:	0cc92423          	sw	a2,200(s2)

900005b4 <inst_69>:

inst_69:
// rs1_val==-46340, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x5
TEST_RR_OP(sll, x12, x10, x11, 0xffe95f80, -0xb504, 0x5, x18, 204, x1)
900005b4:	ffff5537          	lui	a0,0xffff5
900005b8:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff27f8>
900005bc:	00500593          	li	a1,5
900005c0:	00b51633          	sll	a2,a0,a1
900005c4:	0cc92623          	sw	a2,204(s2)

900005c8 <inst_70>:

inst_70:
// rs1_val==46341, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x1b
TEST_RR_OP(sll, x12, x10, x11, 0x28000000, 0xb505, 0x1b, x18, 208, x1)
900005c8:	0000b537          	lui	a0,0xb
900005cc:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb3e9>
900005d0:	01b00593          	li	a1,27
900005d4:	00b51633          	sll	a2,a0,a1
900005d8:	0cc92823          	sw	a2,208(s2)

900005dc <inst_71>:

inst_71:
// rs1_val==-46339, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x1b
TEST_RR_OP(sll, x12, x10, x11, 0xe8000000, -0xb503, 0x1b, x18, 212, x1)
900005dc:	ffff5537          	lui	a0,0xffff5
900005e0:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff27f9>
900005e4:	01b00593          	li	a1,27
900005e8:	00b51633          	sll	a2,a0,a1
900005ec:	0cc92a23          	sw	a2,212(s2)

900005f0 <inst_72>:

inst_72:
// rs1_val==46340, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x10
TEST_RR_OP(sll, x12, x10, x11, 0xb5040000, 0xb504, 0x10, x18, 216, x1)
900005f0:	0000b537          	lui	a0,0xb
900005f4:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb3e8>
900005f8:	01000593          	li	a1,16
900005fc:	00b51633          	sll	a2,a0,a1
90000600:	0cc92c23          	sw	a2,216(s2)

90000604 <inst_73>:

inst_73:
// rs1_val==1431655764, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x1
TEST_RR_OP(sll, x12, x10, x11, 0xaaaaaaa8, 0x55555554, 0x1, x18, 220, x1)
90000604:	55555537          	lui	a0,0x55555
90000608:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x55555438>
9000060c:	00100593          	li	a1,1
90000610:	00b51633          	sll	a2,a0,a1
90000614:	0cc92e23          	sw	a2,220(s2)

90000618 <inst_74>:

inst_74:
// rs1_val == -1048577, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x100001;  op2val:0x3
TEST_RR_OP(sll, x12, x10, x11, 0xff7ffff8, -0x100001, 0x3, x18, 224, x1)
90000618:	fff00537          	lui	a0,0xfff00
9000061c:	fff50513          	addi	a0,a0,-1 # ffefffff <_end+0x6fefdcfb>
90000620:	00300593          	li	a1,3
90000624:	00b51633          	sll	a2,a0,a1
90000628:	0ec92023          	sw	a2,224(s2)

9000062c <inst_75>:

inst_75:
// rs1_val==1717986919, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x1d
TEST_RR_OP(sll, x12, x10, x11, 0xe0000000, 0x66666667, 0x1d, x18, 228, x1)
9000062c:	66666537          	lui	a0,0x66666
90000630:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x6666654b>
90000634:	01d00593          	li	a1,29
90000638:	00b51633          	sll	a2,a0,a1
9000063c:	0ec92223          	sw	a2,228(s2)

90000640 <inst_76>:

inst_76:
// rs1_val==858993458, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x2
TEST_RR_OP(sll, x12, x10, x11, 0xccccccc8, 0x33333332, 0x2, x18, 232, x1)
90000640:	33333537          	lui	a0,0x33333
90000644:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x33333216>
90000648:	00200593          	li	a1,2
9000064c:	00b51633          	sll	a2,a0,a1
90000650:	0ec92423          	sw	a2,232(s2)

90000654 <inst_77>:

inst_77:
// rs1_val==1717986917, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x2
TEST_RR_OP(sll, x12, x10, x11, 0x99999994, 0x66666665, 0x2, x18, 236, x1)
90000654:	66666537          	lui	a0,0x66666
90000658:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x66666549>
9000065c:	00200593          	li	a1,2
90000660:	00b51633          	sll	a2,a0,a1
90000664:	0ec92623          	sw	a2,236(s2)

90000668 <inst_78>:

inst_78:
// rs1_val==46339, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb
TEST_RR_OP(sll, x12, x10, x11, 0x5a81800, 0xb503, 0xb, x18, 240, x1)
90000668:	0000b537          	lui	a0,0xb
9000066c:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb3e7>
90000670:	00b00593          	li	a1,11
90000674:	00b51633          	sll	a2,a0,a1
90000678:	0ec92823          	sw	a2,240(s2)

9000067c <inst_79>:

inst_79:
// rs1_val==1431655766, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x1
TEST_RR_OP(sll, x12, x10, x11, 0xaaaaaaac, 0x55555556, 0x1, x18, 244, x1)
9000067c:	55555537          	lui	a0,0x55555
90000680:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x5555543a>
90000684:	00100593          	li	a1,1
90000688:	00b51633          	sll	a2,a0,a1
9000068c:	0ec92a23          	sw	a2,244(s2)

90000690 <inst_80>:

inst_80:
// rs1_val==-1431655765, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb
TEST_RR_OP(sll, x12, x10, x11, 0x55555800, -0x55555555, 0xb, x18, 248, x1)
90000690:	aaaab537          	lui	a0,0xaaaab
90000694:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa87a7>
90000698:	00b00593          	li	a1,11
9000069c:	00b51633          	sll	a2,a0,a1
900006a0:	0ec92c23          	sw	a2,248(s2)

900006a4 <inst_81>:

inst_81:
// rs1_val == -524289, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x80001;  op2val:0x11
TEST_RR_OP(sll, x12, x10, x11, 0xfffe0000, -0x80001, 0x11, x18, 252, x1)
900006a4:	fff80537          	lui	a0,0xfff80
900006a8:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0x6ff7dcfb>
900006ac:	01100593          	li	a1,17
900006b0:	00b51633          	sll	a2,a0,a1
900006b4:	0ec92e23          	sw	a2,252(s2)

900006b8 <inst_82>:

inst_82:
// rs1_val==858993460, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x4
TEST_RR_OP(sll, x12, x10, x11, 0x33333340, 0x33333334, 0x4, x18, 256, x1)
900006b8:	33333537          	lui	a0,0x33333
900006bc:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x33333218>
900006c0:	00400593          	li	a1,4
900006c4:	00b51633          	sll	a2,a0,a1
900006c8:	10c92023          	sw	a2,256(s2)

900006cc <inst_83>:

inst_83:
// rs1_val == -2097153, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x200001;  op2val:0x3
TEST_RR_OP(sll, x12, x10, x11, 0xfefffff8, -0x200001, 0x3, x18, 260, x1)
900006cc:	ffe00537          	lui	a0,0xffe00
900006d0:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0x6fdfdcfb>
900006d4:	00300593          	li	a1,3
900006d8:	00b51633          	sll	a2,a0,a1
900006dc:	10c92223          	sw	a2,260(s2)

900006e0 <inst_84>:

inst_84:
// rs1_val == -4194305, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x400001;  op2val:0x15
TEST_RR_OP(sll, x12, x10, x11, 0xffe00000, -0x400001, 0x15, x18, 264, x1)
900006e0:	ffc00537          	lui	a0,0xffc00
900006e4:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0x6fbfdcfb>
900006e8:	01500593          	li	a1,21
900006ec:	00b51633          	sll	a2,a0,a1
900006f0:	10c92423          	sw	a2,264(s2)

900006f4 <inst_85>:

inst_85:
// rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val==5
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xd
TEST_RR_OP(sll, x12, x10, x11, 0xa000, 0x5, 0xd, x18, 268, x1)
900006f4:	00500513          	li	a0,5
900006f8:	00d00593          	li	a1,13
900006fc:	00b51633          	sll	a2,a0,a1
90000700:	10c92623          	sw	a2,268(s2)

90000704 <inst_86>:

inst_86:
// rs1_val < 0 and rs2_val == 0, rs1_val == -32769
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x8001;  op2val:0x0
TEST_RR_OP(sll, x12, x10, x11, 0xffff7fff, -0x8001, 0x0, x18, 272, x1)
90000704:	ffff8537          	lui	a0,0xffff8
90000708:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0x6fff5cfb>
9000070c:	00000593          	li	a1,0
90000710:	00b51633          	sll	a2,a0,a1
90000714:	10c92823          	sw	a2,272(s2)

90000718 <inst_87>:

inst_87:
// rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen, rs1_val == -2147483648, rs2_val == 16
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:-0x80000000;  op2val:0x10
TEST_RR_OP(sll, x12, x10, x11, 0x0, -0x80000000, 0x10, x18, 276, x1)
90000718:	80000537          	lui	a0,0x80000
9000071c:	01000593          	li	a1,16
90000720:	00b51633          	sll	a2,a0,a1
90000724:	10c92a23          	sw	a2,276(s2)

90000728 <inst_88>:

inst_88:
// rs1_val == 128, 
// opcode: sll ; op1:x10; op2:x11; dest:x12; op1val:0x80;  op2val:0x10
TEST_RR_OP(sll, x12, x10, x11, 0x800000, 0x80, 0x10, x18, 280, x1)
90000728:	08000513          	li	a0,128
9000072c:	01000593          	li	a1,16
90000730:	00b51633          	sll	a2,a0,a1
90000734:	10c92c23          	sw	a2,280(s2)
90000738:	00000013          	nop
9000073c:	00000013          	nop

90000740 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
90000740:	00408093          	addi	ra,ra,4 # 8004 <offset+0x7ee8>
90000744:	00100093          	li	ra,1

90000748 <write_tohost>:
90000748:	00001f17          	auipc	t5,0x1
9000074c:	8a1f2c23          	sw	ra,-1864(t5) # 90001000 <tohost>

90000750 <self_loop>:
90000750:	0000006f          	j	90000750 <self_loop>
	...
