
/home/taka/RISCV/mmRISC/simulation/modelsim/riscv-arch-test/riscv-arch-test/work/rv32i_m/I/xori-01.elf:     file format elf32-littleriscv


Disassembly of section .text.init:

90000000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
90000000:	feedc0b7          	lui	ra,0xfeedc
90000004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0x6eed74a9>
90000008:	ff76e137          	lui	sp,0xff76e
9000000c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0x6f769552>
90000010:	7fbb71b7          	lui	gp,0x7fbb7
90000014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <offset+0x7fbb6f2b>
90000018:	bfddb237          	lui	tp,0xbfddb
9000001c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0x2fdd6dd1>
90000020:	00000297          	auipc	t0,0x0
90000024:	0d828293          	addi	t0,t0,216 # 900000f8 <rvtest_code_begin>
90000028:	00004317          	auipc	t1,0x4
9000002c:	fd830313          	addi	t1,t1,-40 # 90004000 <rvtest_data_begin>
90000030:	b7fbb3b7          	lui	t2,0xb7fbb
90000034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0x27fb6cf6>
90000038:	5bfde437          	lui	s0,0x5bfde
9000003c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <offset+0x5bfddafd>
90000040:	adfef4b7          	lui	s1,0xadfef
90000044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0x1dfea3ba>
90000048:	56ff7537          	lui	a0,0x56ff7
9000004c:	6df50513          	addi	a0,a0,1759 # 56ff76df <offset+0x56ff765f>
90000050:	ab7fc5b7          	lui	a1,0xab7fc
90000054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0x1b7f716b>
90000058:	d5bfe637          	lui	a2,0xd5bfe
9000005c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0x45bf93b3>
90000060:	eadff6b7          	lui	a3,0xeadff
90000064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0x5adfa4d7>
90000068:	f56ff737          	lui	a4,0xf56ff
9000006c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0x656fad69>
90000070:	fab807b7          	lui	a5,0xfab80
90000074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0x6ab7b1b2>
90000078:	7d5c0837          	lui	a6,0x7d5c0
9000007c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <offset+0x7d5bfd5b>
90000080:	beae08b7          	lui	a7,0xbeae0
90000084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0x2eadb4e9>
90000088:	df570937          	lui	s2,0xdf570
9000008c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0x4f56b572>
90000090:	6fab89b7          	lui	s3,0x6fab8
90000094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <offset+0x6fab7f3b>
90000098:	b7d5ca37          	lui	s4,0xb7d5c
9000009c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0x27d575d9>
900000a0:	dbeaeab7          	lui	s5,0xdbeae
900000a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0x4bea95ea>
900000a8:	6df57b37          	lui	s6,0x6df57
900000ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <offset+0x6df56f77>
900000b0:	b6fabbb7          	lui	s7,0xb6fab
900000b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0x26fa6df7>
900000b8:	db7d6c37          	lui	s8,0xdb7d6
900000bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0x4b7d11f9>
900000c0:	edbebcb7          	lui	s9,0xedbeb
900000c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0x5dbe63fa>
900000c8:	76df5d37          	lui	s10,0x76df5
900000cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <offset+0x76df567f>
900000d0:	bb6fbdb7          	lui	s11,0xbb6fb
900000d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0x2b6f617b>
900000d8:	ddb7de37          	lui	t3,0xddb7d
900000dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0x4db78bbb>
900000e0:	eedbfeb7          	lui	t4,0xeedbf
900000e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0x5edba0db>
900000e8:	f76dff37          	lui	t5,0xf76df
900000ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0x676dab6b>
900000f0:	fbb70fb7          	lui	t6,0xfbb70
900000f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0x6bb6b0b3>

900000f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xori)

RVTEST_SIGBASE( x2,signature_x2_1)
900000f8:	00004117          	auipc	sp,0x4
900000fc:	f1810113          	addi	sp,sp,-232 # 90004010 <begin_signature>

90000100 <inst_0>:

inst_0:
// rs1 != rd, rs1==x24, rd==x10, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val != imm_val, rs1_val > 0 and imm_val < 0
// opcode: xori ; op1:x24; dest:x10; op1val:0x33333334;  immval:-0x800
TEST_IMM_OP( xori, x10, x24, 0xcccccb34, 0x33333334, -0x800, x2, 0, x13)
90000100:	33333c37          	lui	s8,0x33333
90000104:	334c0c13          	addi	s8,s8,820 # 33333334 <offset+0x333332b4>
90000108:	800c4513          	xori	a0,s8,-2048
9000010c:	00a12023          	sw	a0,0(sp)

90000110 <inst_1>:

inst_1:
// rs1 == rd, rs1==x18, rd==x18, imm_val == 0, rs1_val == 4, rs1_val==4 and imm_val==0
// opcode: xori ; op1:x18; dest:x18; op1val:0x4;  immval:0x0
TEST_IMM_OP( xori, x18, x18, 0x4, 0x4, 0x0, x2, 4, x13)
90000110:	00400913          	li	s2,4
90000114:	00094913          	xori	s2,s2,0
90000118:	01212223          	sw	s2,4(sp)

9000011c <inst_2>:

inst_2:
// rs1==x15, rd==x24, imm_val == (2**(12-1)-1), rs1_val < 0 and imm_val > 0, imm_val == 2047
// opcode: xori ; op1:x15; dest:x24; op1val:-0x4;  immval:0x7ff
TEST_IMM_OP( xori, x24, x15, 0xfffff803, -0x4, 0x7ff, x2, 8, x13)
9000011c:	ffc00793          	li	a5,-4
90000120:	7ff7cc13          	xori	s8,a5,2047
90000124:	01812423          	sw	s8,8(sp)

90000128 <inst_3>:

inst_3:
// rs1==x11, rd==x20, imm_val == 1, rs1_val > 0 and imm_val > 0, rs1_val == 2
// opcode: xori ; op1:x11; dest:x20; op1val:0x2;  immval:0x1
TEST_IMM_OP( xori, x20, x11, 0x3, 0x2, 0x1, x2, 12, x13)
90000128:	00200593          	li	a1,2
9000012c:	0015ca13          	xori	s4,a1,1
90000130:	01412623          	sw	s4,12(sp)

90000134 <inst_4>:

inst_4:
// rs1==x7, rd==x21, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: xori ; op1:x7; dest:x21; op1val:-0x80000000;  immval:0x554
TEST_IMM_OP( xori, x21, x7, 0x80000554, -0x80000000, 0x554, x2, 16, x13)
90000134:	800003b7          	lui	t2,0x80000
90000138:	5543ca93          	xori	s5,t2,1364
9000013c:	01512823          	sw	s5,16(sp)

90000140 <inst_5>:

inst_5:
// rs1==x17, rd==x27, rs1_val == 0, imm_val == -1025
// opcode: xori ; op1:x17; dest:x27; op1val:0x0;  immval:-0x401
TEST_IMM_OP( xori, x27, x17, 0xfffffbff, 0x0, -0x401, x2, 20, x13)
90000140:	00000893          	li	a7,0
90000144:	bff8cd93          	xori	s11,a7,-1025
90000148:	01b12a23          	sw	s11,20(sp)

9000014c <inst_6>:

inst_6:
// rs1==x22, rd==x1, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: xori ; op1:x22; dest:x1; op1val:0x7fffffff;  immval:-0xa
TEST_IMM_OP( xori, x1, x22, 0x80000009, 0x7fffffff, -0xa, x2, 24, x13)
9000014c:	80000b37          	lui	s6,0x80000
90000150:	fffb0b13          	addi	s6,s6,-1 # 7fffffff <_end+0xefffb5fb>
90000154:	ff6b4093          	xori	ra,s6,-10
90000158:	00112c23          	sw	ra,24(sp)

9000015c <inst_7>:

inst_7:
// rs1==x20, rd==x22, rs1_val == 1, imm_val == 4
// opcode: xori ; op1:x20; dest:x22; op1val:0x1;  immval:0x4
TEST_IMM_OP( xori, x22, x20, 0x5, 0x1, 0x4, x2, 28, x13)
9000015c:	00100a13          	li	s4,1
90000160:	004a4b13          	xori	s6,s4,4
90000164:	01612e23          	sw	s6,28(sp)

90000168 <inst_8>:

inst_8:
// rs1==x19, rd==x31, rs1_val == imm_val, imm_val == -513, rs1_val < 0 and imm_val < 0, rs1_val == -513
// opcode: xori ; op1:x19; dest:x31; op1val:-0x201;  immval:-0x201
TEST_IMM_OP( xori, x31, x19, 0x0, -0x201, -0x201, x2, 32, x13)
90000168:	dff00993          	li	s3,-513
9000016c:	dff9cf93          	xori	t6,s3,-513
90000170:	03f12023          	sw	t6,32(sp)

90000174 <inst_9>:

inst_9:
// rs1==x9, rd==x5, imm_val == 2, rs1_val == -33
// opcode: xori ; op1:x9; dest:x5; op1val:-0x21;  immval:0x2
TEST_IMM_OP( xori, x5, x9, 0xffffffdd, -0x21, 0x2, x2, 36, x13)
90000174:	fdf00493          	li	s1,-33
90000178:	0024c293          	xori	t0,s1,2
9000017c:	02512223          	sw	t0,36(sp)

90000180 <inst_10>:

inst_10:
// rs1==x28, rd==x29, imm_val == 8, 
// opcode: xori ; op1:x28; dest:x29; op1val:-0x80000000;  immval:0x8
TEST_IMM_OP( xori, x29, x28, 0x80000008, -0x80000000, 0x8, x2, 40, x13)
90000180:	80000e37          	lui	t3,0x80000
90000184:	008e4e93          	xori	t4,t3,8
90000188:	03d12423          	sw	t4,40(sp)

9000018c <inst_11>:

inst_11:
// rs1==x30, rd==x4, imm_val == 16, rs1_val == -1073741825
// opcode: xori ; op1:x30; dest:x4; op1val:-0x40000001;  immval:0x10
TEST_IMM_OP( xori, x4, x30, 0xbfffffef, -0x40000001, 0x10, x2, 44, x13)
9000018c:	c0000f37          	lui	t5,0xc0000
90000190:	ffff0f13          	addi	t5,t5,-1 # bfffffff <_end+0x2fffb5fb>
90000194:	010f4213          	xori	tp,t5,16
90000198:	02412623          	sw	tp,44(sp)

9000019c <inst_12>:

inst_12:
// rs1==x27, rd==x8, imm_val == 32, 
// opcode: xori ; op1:x27; dest:x8; op1val:0x7fffffff;  immval:0x20
TEST_IMM_OP( xori, x8, x27, 0x7fffffdf, 0x7fffffff, 0x20, x2, 48, x13)
9000019c:	80000db7          	lui	s11,0x80000
900001a0:	fffd8d93          	addi	s11,s11,-1 # 7fffffff <_end+0xefffb5fb>
900001a4:	020dc413          	xori	s0,s11,32
900001a8:	02812823          	sw	s0,48(sp)

900001ac <inst_13>:

inst_13:
// rs1==x3, rd==x25, imm_val == 64, 
// opcode: xori ; op1:x3; dest:x25; op1val:0x66666666;  immval:0x40
TEST_IMM_OP( xori, x25, x3, 0x66666626, 0x66666666, 0x40, x2, 52, x13)
900001ac:	666661b7          	lui	gp,0x66666
900001b0:	66618193          	addi	gp,gp,1638 # 66666666 <offset+0x666665e6>
900001b4:	0401cc93          	xori	s9,gp,64
900001b8:	03912a23          	sw	s9,52(sp)

900001bc <inst_14>:

inst_14:
// rs1==x31, rd==x17, imm_val == 128, rs1_val == -524289
// opcode: xori ; op1:x31; dest:x17; op1val:-0x80001;  immval:0x80
TEST_IMM_OP( xori, x17, x31, 0xfff7ff7f, -0x80001, 0x80, x2, 56, x13)
900001bc:	fff80fb7          	lui	t6,0xfff80
900001c0:	ffff8f93          	addi	t6,t6,-1 # fff7ffff <_end+0x6ff7b5fb>
900001c4:	080fc893          	xori	a7,t6,128
900001c8:	03112c23          	sw	a7,56(sp)

900001cc <inst_15>:

inst_15:
// rs1==x29, rd==x16, imm_val == 256, 
// opcode: xori ; op1:x29; dest:x16; op1val:-0xb504;  immval:0x100
TEST_IMM_OP( xori, x16, x29, 0xffff4bfc, -0xb504, 0x100, x2, 60, x13)
900001cc:	ffff5eb7          	lui	t4,0xffff5
900001d0:	afce8e93          	addi	t4,t4,-1284 # ffff4afc <_end+0x6fff00f8>
900001d4:	100ec813          	xori	a6,t4,256
900001d8:	03012e23          	sw	a6,60(sp)

900001dc <inst_16>:

inst_16:
// rs1==x4, rd==x6, imm_val == 512, 
// opcode: xori ; op1:x4; dest:x6; op1val:0x0;  immval:0x200
TEST_IMM_OP( xori, x6, x4, 0x200, 0x0, 0x200, x2, 64, x13)
900001dc:	00000213          	li	tp,0
900001e0:	20024313          	xori	t1,tp,512
900001e4:	04612023          	sw	t1,64(sp)

900001e8 <inst_17>:

inst_17:
// rs1==x14, rd==x3, imm_val == 1024, rs1_val == -1048577
// opcode: xori ; op1:x14; dest:x3; op1val:-0x100001;  immval:0x400
TEST_IMM_OP( xori, x3, x14, 0xffeffbff, -0x100001, 0x400, x2, 68, x13)
900001e8:	fff00737          	lui	a4,0xfff00
900001ec:	fff70713          	addi	a4,a4,-1 # ffefffff <_end+0x6fefb5fb>
900001f0:	40074193          	xori	gp,a4,1024
900001f4:	04312223          	sw	gp,68(sp)

900001f8 <inst_18>:

inst_18:
// rs1==x12, rd==x15, imm_val == -2, 
// opcode: xori ; op1:x12; dest:x15; op1val:-0x7;  immval:-0x2
TEST_IMM_OP( xori, x15, x12, 0x7, -0x7, -0x2, x2, 72, x13)
900001f8:	ff900613          	li	a2,-7
900001fc:	ffe64793          	xori	a5,a2,-2
90000200:	04f12423          	sw	a5,72(sp)

90000204 <inst_19>:

inst_19:
// rs1==x21, rd==x9, imm_val == -3, 
// opcode: xori ; op1:x21; dest:x9; op1val:0x5;  immval:-0x3
TEST_IMM_OP( xori, x9, x21, 0xfffffff8, 0x5, -0x3, x2, 76, x4)
90000204:	00500a93          	li	s5,5
90000208:	ffdac493          	xori	s1,s5,-3
9000020c:	04912623          	sw	s1,76(sp)

90000210 <inst_20>:

inst_20:
// rs1==x10, rd==x19, imm_val == -5, 
// opcode: xori ; op1:x10; dest:x19; op1val:-0xb504;  immval:-0x5
TEST_IMM_OP( xori, x19, x10, 0xb507, -0xb504, -0x5, x2, 80, x4)
90000210:	ffff5537          	lui	a0,0xffff5
90000214:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000218:	ffb54993          	xori	s3,a0,-5
9000021c:	05312823          	sw	s3,80(sp)

90000220 <inst_21>:

inst_21:
// rs1==x16, rd==x26, imm_val == -9, 
// opcode: xori ; op1:x16; dest:x26; op1val:0x1;  immval:-0x9
TEST_IMM_OP( xori, x26, x16, 0xfffffff6, 0x1, -0x9, x2, 84, x4)
90000220:	00100813          	li	a6,1
90000224:	ff784d13          	xori	s10,a6,-9
90000228:	05a12a23          	sw	s10,84(sp)
RVTEST_SIGBASE( x3,signature_x3_0)
9000022c:	00004197          	auipc	gp,0x4
90000230:	e3c18193          	addi	gp,gp,-452 # 90004068 <signature_x3_0>

90000234 <inst_22>:

inst_22:
// rs1==x26, rd==x30, imm_val == -17, 
// opcode: xori ; op1:x26; dest:x30; op1val:0x66666667;  immval:-0x11
TEST_IMM_OP( xori, x30, x26, 0x99999988, 0x66666667, -0x11, x3, 0, x4)
90000234:	66666d37          	lui	s10,0x66666
90000238:	667d0d13          	addi	s10,s10,1639 # 66666667 <offset+0x666665e7>
9000023c:	fefd4f13          	xori	t5,s10,-17
90000240:	01e1a023          	sw	t5,0(gp)

90000244 <inst_23>:

inst_23:
// rs1==x1, rd==x23, imm_val == -33, rs1_val == -65
// opcode: xori ; op1:x1; dest:x23; op1val:-0x41;  immval:-0x21
TEST_IMM_OP( xori, x23, x1, 0x60, -0x41, -0x21, x3, 4, x4)
90000244:	fbf00093          	li	ra,-65
90000248:	fdf0cb93          	xori	s7,ra,-33
9000024c:	0171a223          	sw	s7,4(gp)

90000250 <inst_24>:

inst_24:
// rs1==x6, rd==x0, imm_val == -65, 
// opcode: xori ; op1:x6; dest:x0; op1val:-0x1;  immval:-0x41
TEST_IMM_OP( xori, x0, x6, 0, -0x1, -0x41, x3, 8, x4)
90000250:	fff00313          	li	t1,-1
90000254:	fbf34013          	xori	zero,t1,-65
90000258:	0001a423          	sw	zero,8(gp)

9000025c <inst_25>:

inst_25:
// rs1==x2, rd==x7, imm_val == -129, rs1_val == 1431655765
// opcode: xori ; op1:x2; dest:x7; op1val:0x55555555;  immval:-0x81
TEST_IMM_OP( xori, x7, x2, 0xaaaaaa2a, 0x55555555, -0x81, x3, 12, x4)
9000025c:	55555137          	lui	sp,0x55555
90000260:	55510113          	addi	sp,sp,1365 # 55555555 <offset+0x555554d5>
90000264:	f7f14393          	xori	t2,sp,-129
90000268:	0071a623          	sw	t2,12(gp)

9000026c <inst_26>:

inst_26:
// rs1==x0, rd==x14, imm_val == -257, 
// opcode: xori ; op1:x0; dest:x14; op1val:0x0;  immval:-0x101
TEST_IMM_OP( xori, x14, x0, 0xfffffeff, 0x0, -0x101, x3, 16, x4)
9000026c:	00000013          	nop
90000270:	eff04713          	xori	a4,zero,-257
90000274:	00e1a823          	sw	a4,16(gp)

90000278 <inst_27>:

inst_27:
// rs1==x8, rd==x13, imm_val == 1365, 
// opcode: xori ; op1:x8; dest:x13; op1val:0x3fffffff;  immval:0x555
TEST_IMM_OP( xori, x13, x8, 0x3ffffaaa, 0x3fffffff, 0x555, x3, 20, x4)
90000278:	40000437          	lui	s0,0x40000
9000027c:	fff40413          	addi	s0,s0,-1 # 3fffffff <offset+0x3fffff7f>
90000280:	55544693          	xori	a3,s0,1365
90000284:	00d1aa23          	sw	a3,20(gp)

90000288 <inst_28>:

inst_28:
// rs1==x25, rd==x12, imm_val == -1366, 
// opcode: xori ; op1:x25; dest:x12; op1val:-0x7;  immval:-0x556
TEST_IMM_OP( xori, x12, x25, 0x553, -0x7, -0x556, x3, 24, x4)
90000288:	ff900c93          	li	s9,-7
9000028c:	aaacc613          	xori	a2,s9,-1366
90000290:	00c1ac23          	sw	a2,24(gp)

90000294 <inst_29>:

inst_29:
// rs1==x13, rd==x11, rs1_val == 8, 
// opcode: xori ; op1:x13; dest:x11; op1val:0x8;  immval:0x0
TEST_IMM_OP( xori, x11, x13, 0x8, 0x8, 0x0, x3, 28, x4)
90000294:	00800693          	li	a3,8
90000298:	0006c593          	xori	a1,a3,0
9000029c:	00b1ae23          	sw	a1,28(gp)

900002a0 <inst_30>:

inst_30:
// rs1==x23, rd==x2, rs1_val == 16, 
// opcode: xori ; op1:x23; dest:x2; op1val:0x10;  immval:0x1
TEST_IMM_OP( xori, x2, x23, 0x11, 0x10, 0x1, x3, 32, x4)
900002a0:	01000b93          	li	s7,16
900002a4:	001bc113          	xori	sp,s7,1
900002a8:	0221a023          	sw	sp,32(gp)

900002ac <inst_31>:

inst_31:
// rs1==x5, rd==x28, rs1_val == 32, 
// opcode: xori ; op1:x5; dest:x28; op1val:0x20;  immval:0x555
TEST_IMM_OP( xori, x28, x5, 0x575, 0x20, 0x555, x3, 36, x4)
900002ac:	02000293          	li	t0,32
900002b0:	5552ce13          	xori	t3,t0,1365
900002b4:	03c1a223          	sw	t3,36(gp)

900002b8 <inst_32>:

inst_32:
// rs1_val == 64, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x40;  immval:0x100
TEST_IMM_OP( xori, x11, x10, 0x140, 0x40, 0x100, x3, 40, x4)
900002b8:	04000513          	li	a0,64
900002bc:	10054593          	xori	a1,a0,256
900002c0:	02b1a423          	sw	a1,40(gp)

900002c4 <inst_33>:

inst_33:
// rs1_val == 128, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x80;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x85, 0x80, 0x5, x3, 44, x4)
900002c4:	08000513          	li	a0,128
900002c8:	00554593          	xori	a1,a0,5
900002cc:	02b1a623          	sw	a1,44(gp)

900002d0 <inst_34>:

inst_34:
// rs1_val == 256, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x100;  immval:-0x41
TEST_IMM_OP( xori, x11, x10, 0xfffffebf, 0x100, -0x41, x3, 48, x4)
900002d0:	10000513          	li	a0,256
900002d4:	fbf54593          	xori	a1,a0,-65
900002d8:	02b1a823          	sw	a1,48(gp)

900002dc <inst_35>:

inst_35:
// rs1_val == 512, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x200;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x202, 0x200, 0x2, x3, 52, x4)
900002dc:	20000513          	li	a0,512
900002e0:	00254593          	xori	a1,a0,2
900002e4:	02b1aa23          	sw	a1,52(gp)

900002e8 <inst_36>:

inst_36:
// rs1_val == 1024, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x400;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffeab, 0x400, -0x555, x3, 56, x4)
900002e8:	40000513          	li	a0,1024
900002ec:	aab54593          	xori	a1,a0,-1365
900002f0:	02b1ac23          	sw	a1,56(gp)

900002f4 <inst_37>:

inst_37:
// rs1_val == 2048, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x800;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x804, 0x800, 0x4, x3, 60, x4)
900002f4:	00001537          	lui	a0,0x1
900002f8:	80050513          	addi	a0,a0,-2048 # 800 <offset+0x780>
900002fc:	00454593          	xori	a1,a0,4
90000300:	02b1ae23          	sw	a1,60(gp)

90000304 <inst_38>:

inst_38:
// rs1_val == 4096, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x1000;  immval:0x8
TEST_IMM_OP( xori, x11, x10, 0x1008, 0x1000, 0x8, x3, 64, x4)
90000304:	00001537          	lui	a0,0x1
90000308:	00854593          	xori	a1,a0,8
9000030c:	04b1a023          	sw	a1,64(gp)

90000310 <inst_39>:

inst_39:
// rs1_val == 8192, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2000;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x2554, 0x2000, 0x554, x3, 68, x4)
90000310:	00002537          	lui	a0,0x2
90000314:	55454593          	xori	a1,a0,1364
90000318:	04b1a223          	sw	a1,68(gp)

9000031c <inst_40>:

inst_40:
// rs1_val == 16384, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4000;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x4004, 0x4000, 0x4, x3, 72, x4)
9000031c:	00004537          	lui	a0,0x4
90000320:	00454593          	xori	a1,a0,4
90000324:	04b1a423          	sw	a1,72(gp)

90000328 <inst_41>:

inst_41:
// rs1_val == 32768, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x8000;  immval:0x7ff
TEST_IMM_OP( xori, x11, x10, 0x87ff, 0x8000, 0x7ff, x3, 76, x4)
90000328:	00008537          	lui	a0,0x8
9000032c:	7ff54593          	xori	a1,a0,2047
90000330:	04b1a623          	sw	a1,76(gp)

90000334 <inst_42>:

inst_42:
// rs1_val == 65536, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x10000;  immval:0x40
TEST_IMM_OP( xori, x11, x10, 0x10040, 0x10000, 0x40, x3, 80, x4)
90000334:	00010537          	lui	a0,0x10
90000338:	04054593          	xori	a1,a0,64
9000033c:	04b1a823          	sw	a1,80(gp)

90000340 <inst_43>:

inst_43:
// rs1_val == 131072, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x20000;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2002c, 0x20000, 0x2c, x3, 84, x4)
90000340:	00020537          	lui	a0,0x20
90000344:	02c54593          	xori	a1,a0,44
90000348:	04b1aa23          	sw	a1,84(gp)

9000034c <inst_44>:

inst_44:
// rs1_val == 262144, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x40000;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffbfaaa, 0x40000, -0x556, x3, 88, x4)
9000034c:	00040537          	lui	a0,0x40
90000350:	aaa54593          	xori	a1,a0,-1366
90000354:	04b1ac23          	sw	a1,88(gp)

90000358 <inst_45>:

inst_45:
// rs1_val == 524288, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x80000;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x80333, 0x80000, 0x333, x3, 92, x4)
90000358:	00080537          	lui	a0,0x80
9000035c:	33354593          	xori	a1,a0,819
90000360:	04b1ae23          	sw	a1,92(gp)

90000364 <inst_46>:

inst_46:
// rs1_val == 1048576, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x100000;  immval:-0x6
TEST_IMM_OP( xori, x11, x10, 0xffeffffa, 0x100000, -0x6, x3, 96, x4)
90000364:	00100537          	lui	a0,0x100
90000368:	ffa54593          	xori	a1,a0,-6
9000036c:	06b1a023          	sw	a1,96(gp)

90000370 <inst_47>:

inst_47:
// rs1_val == 2097152, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x200000;  immval:-0x3
TEST_IMM_OP( xori, x11, x10, 0xffdffffd, 0x200000, -0x3, x3, 100, x4)
90000370:	00200537          	lui	a0,0x200
90000374:	ffd54593          	xori	a1,a0,-3
90000378:	06b1a223          	sw	a1,100(gp)

9000037c <inst_48>:

inst_48:
// rs1_val == 4194304, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x400000;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x400555, 0x400000, 0x555, x3, 104, x4)
9000037c:	00400537          	lui	a0,0x400
90000380:	55554593          	xori	a1,a0,1365
90000384:	06b1a423          	sw	a1,104(gp)

90000388 <inst_49>:

inst_49:
// rs1_val == 8388608, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x800000;  immval:-0x9
TEST_IMM_OP( xori, x11, x10, 0xff7ffff7, 0x800000, -0x9, x3, 108, x4)
90000388:	00800537          	lui	a0,0x800
9000038c:	ff754593          	xori	a1,a0,-9
90000390:	06b1a623          	sw	a1,108(gp)

90000394 <inst_50>:

inst_50:
// rs1_val == 16777216, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x1000000;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x1000005, 0x1000000, 0x5, x3, 112, x4)
90000394:	01000537          	lui	a0,0x1000
90000398:	00554593          	xori	a1,a0,5
9000039c:	06b1a823          	sw	a1,112(gp)

900003a0 <inst_51>:

inst_51:
// rs1_val == 33554432, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2000000;  immval:-0x201
TEST_IMM_OP( xori, x11, x10, 0xfdfffdff, 0x2000000, -0x201, x3, 116, x4)
900003a0:	02000537          	lui	a0,0x2000
900003a4:	dff54593          	xori	a1,a0,-513
900003a8:	06b1aa23          	sw	a1,116(gp)

900003ac <inst_52>:

inst_52:
// rs1_val == 67108864, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4000000;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x4000000, 0x4000000, 0x0, x3, 120, x4)
900003ac:	04000537          	lui	a0,0x4000
900003b0:	00054593          	xori	a1,a0,0
900003b4:	06b1ac23          	sw	a1,120(gp)

900003b8 <inst_53>:

inst_53:
// rs1_val == 134217728, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x8000334, 0x8000000, 0x334, x3, 124, x4)
900003b8:	08000537          	lui	a0,0x8000
900003bc:	33454593          	xori	a1,a0,820
900003c0:	06b1ae23          	sw	a1,124(gp)

900003c4 <inst_54>:

inst_54:
// rs1_val == 268435456, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x10000000;  immval:-0x41
TEST_IMM_OP( xori, x11, x10, 0xefffffbf, 0x10000000, -0x41, x3, 128, x4)
900003c4:	10000537          	lui	a0,0x10000
900003c8:	fbf54593          	xori	a1,a0,-65
900003cc:	08b1a023          	sw	a1,128(gp)

900003d0 <inst_55>:

inst_55:
// rs1_val == 536870912, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x20000000;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x20000555, 0x20000000, 0x555, x3, 132, x4)
900003d0:	20000537          	lui	a0,0x20000
900003d4:	55554593          	xori	a1,a0,1365
900003d8:	08b1a223          	sw	a1,132(gp)

900003dc <inst_56>:

inst_56:
// rs1_val == 1073741824, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x40000000;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xbffffaaa, 0x40000000, -0x556, x3, 136, x4)
900003dc:	40000537          	lui	a0,0x40000
900003e0:	aaa54593          	xori	a1,a0,-1366
900003e4:	08b1a423          	sw	a1,136(gp)

900003e8 <inst_57>:

inst_57:
// rs1_val == -2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x2;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xfffffffa, -0x2, 0x4, x3, 140, x4)
900003e8:	ffe00513          	li	a0,-2
900003ec:	00454593          	xori	a1,a0,4
900003f0:	08b1a623          	sw	a1,140(gp)

900003f4 <inst_58>:

inst_58:
// rs1_val == -3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x3;  immval:-0x3
TEST_IMM_OP( xori, x11, x10, 0x0, -0x3, -0x3, x3, 144, x4)
900003f4:	ffd00513          	li	a0,-3
900003f8:	ffd54593          	xori	a1,a0,-3
900003fc:	08b1a823          	sw	a1,144(gp)

90000400 <inst_59>:

inst_59:
// rs1_val == -5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x5;  immval:-0x400
TEST_IMM_OP( xori, x11, x10, 0x3fb, -0x5, -0x400, x3, 148, x4)
90000400:	ffb00513          	li	a0,-5
90000404:	c0054593          	xori	a1,a0,-1024
90000408:	08b1aa23          	sw	a1,148(gp)

9000040c <inst_60>:

inst_60:
// rs1_val == -9, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x9;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x55c, -0x9, -0x555, x3, 152, x4)
9000040c:	ff700513          	li	a0,-9
90000410:	aab54593          	xori	a1,a0,-1365
90000414:	08b1ac23          	sw	a1,152(gp)

90000418 <inst_61>:

inst_61:
// rs1_val == -17, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x11;  immval:0x80
TEST_IMM_OP( xori, x11, x10, 0xffffff6f, -0x11, 0x80, x3, 156, x4)
90000418:	fef00513          	li	a0,-17
9000041c:	08054593          	xori	a1,a0,128
90000420:	08b1ae23          	sw	a1,156(gp)

90000424 <inst_62>:

inst_62:
// rs1_val == -129, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x81;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xfffff919, -0x81, 0x666, x3, 160, x4)
90000424:	f7f00513          	li	a0,-129
90000428:	66654593          	xori	a1,a0,1638
9000042c:	0ab1a023          	sw	a1,160(gp)

90000430 <inst_63>:

inst_63:
// rs1_val == -257, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x101;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xfffffef9, -0x101, 0x6, x3, 164, x4)
90000430:	eff00513          	li	a0,-257
90000434:	00654593          	xori	a1,a0,6
90000438:	0ab1a223          	sw	a1,164(gp)

9000043c <inst_64>:

inst_64:
// rs1_val == -1025, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x401;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xfffffbf9, -0x401, 0x6, x3, 168, x4)
9000043c:	bff00513          	li	a0,-1025
90000440:	00654593          	xori	a1,a0,6
90000444:	0ab1a423          	sw	a1,168(gp)

90000448 <inst_65>:

inst_65:
// rs1_val == -2049, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x801;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xfffff7fd, -0x801, 0x2, x3, 172, x4)
90000448:	fffff537          	lui	a0,0xfffff
9000044c:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0x6fffadfb>
90000450:	00254593          	xori	a1,a0,2
90000454:	0ab1a623          	sw	a1,172(gp)

90000458 <inst_66>:

inst_66:
// rs1_val == -4097, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x1001;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xffffefff, -0x1001, 0x0, x3, 176, x4)
90000458:	fffff537          	lui	a0,0xfffff
9000045c:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0x6fffa5fb>
90000460:	00054593          	xori	a1,a0,0
90000464:	0ab1a823          	sw	a1,176(gp)

90000468 <inst_67>:

inst_67:
// rs1_val == -8193, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x2001;  immval:0x7ff
TEST_IMM_OP( xori, x11, x10, 0xffffd800, -0x2001, 0x7ff, x3, 180, x4)
90000468:	ffffe537          	lui	a0,0xffffe
9000046c:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0x6fff95fb>
90000470:	7ff54593          	xori	a1,a0,2047
90000474:	0ab1aa23          	sw	a1,180(gp)

90000478 <inst_68>:

inst_68:
// rs1_val == -16385, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x4001;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x402b, -0x4001, -0x2c, x3, 184, x4)
90000478:	ffffc537          	lui	a0,0xffffc
9000047c:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0x6fff75fb>
90000480:	fd454593          	xori	a1,a0,-44
90000484:	0ab1ac23          	sw	a1,184(gp)

90000488 <inst_69>:

inst_69:
// rs1_val == -32769, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xffff799a, -0x8001, 0x665, x3, 188, x4)
90000488:	ffff8537          	lui	a0,0xffff8
9000048c:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0x6fff35fb>
90000490:	66554593          	xori	a1,a0,1637
90000494:	0ab1ae23          	sw	a1,188(gp)

90000498 <inst_70>:

inst_70:
// rs1_val == -65537, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x10001;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xfffefccd, -0x10001, 0x332, x3, 192, x4)
90000498:	ffff0537          	lui	a0,0xffff0
9000049c:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0x6ffeb5fb>
900004a0:	33254593          	xori	a1,a0,818
900004a4:	0cb1a023          	sw	a1,192(gp)

900004a8 <inst_71>:

inst_71:
// rs1_val == -131073, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x20001;  immval:-0x101
TEST_IMM_OP( xori, x11, x10, 0x20100, -0x20001, -0x101, x3, 196, x4)
900004a8:	fffe0537          	lui	a0,0xfffe0
900004ac:	fff50513          	addi	a0,a0,-1 # fffdffff <_end+0x6ffdb5fb>
900004b0:	eff54593          	xori	a1,a0,-257
900004b4:	0cb1a223          	sw	a1,196(gp)

900004b8 <inst_72>:

inst_72:
// rs1_val == -262145, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x40001;  immval:-0x800
TEST_IMM_OP( xori, x11, x10, 0x407ff, -0x40001, -0x800, x3, 200, x4)
900004b8:	fffc0537          	lui	a0,0xfffc0
900004bc:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0x6ffbb5fb>
900004c0:	80054593          	xori	a1,a0,-2048
900004c4:	0cb1a423          	sw	a1,200(gp)

900004c8 <inst_73>:

inst_73:
// rs1_val == -2097153, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x200001;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xffdfffff, -0x200001, 0x0, x3, 204, x4)
900004c8:	ffe00537          	lui	a0,0xffe00
900004cc:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0x6fdfb5fb>
900004d0:	00054593          	xori	a1,a0,0
900004d4:	0cb1a623          	sw	a1,204(gp)

900004d8 <inst_74>:

inst_74:
// rs1_val == -4194305, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x400001;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xffbff99a, -0x400001, 0x665, x3, 208, x4)
900004d8:	ffc00537          	lui	a0,0xffc00
900004dc:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0x6fbfb5fb>
900004e0:	66554593          	xori	a1,a0,1637
900004e4:	0cb1a823          	sw	a1,208(gp)

900004e8 <inst_75>:

inst_75:
// rs1_val == -8388609, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x800001;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xff7ff998, -0x800001, 0x667, x3, 212, x4)
900004e8:	ff800537          	lui	a0,0xff800
900004ec:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0x6f7fb5fb>
900004f0:	66754593          	xori	a1,a0,1639
900004f4:	0cb1aa23          	sw	a1,212(gp)

900004f8 <inst_76>:

inst_76:
// rs1_val == -16777217, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x1000001;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x1000555, -0x1000001, -0x556, x3, 216, x4)
900004f8:	ff000537          	lui	a0,0xff000
900004fc:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0x6effb5fb>
90000500:	aaa54593          	xori	a1,a0,-1366
90000504:	0cb1ac23          	sw	a1,216(gp)

90000508 <inst_77>:

inst_77:
// rs1_val == -33554433, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x2000001;  immval:-0x8
TEST_IMM_OP( xori, x11, x10, 0x2000007, -0x2000001, -0x8, x3, 220, x4)
90000508:	fe000537          	lui	a0,0xfe000
9000050c:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0x6dffb5fb>
90000510:	ff854593          	xori	a1,a0,-8
90000514:	0cb1ae23          	sw	a1,220(gp)

90000518 <inst_78>:

inst_78:
// rs1_val == -67108865, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x4000001;  immval:-0x2
TEST_IMM_OP( xori, x11, x10, 0x4000001, -0x4000001, -0x2, x3, 224, x4)
90000518:	fc000537          	lui	a0,0xfc000
9000051c:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0x6bffb5fb>
90000520:	ffe54593          	xori	a1,a0,-2
90000524:	0eb1a023          	sw	a1,224(gp)

90000528 <inst_79>:

inst_79:
// rs1_val == -134217729, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x8000001;  immval:-0x400
TEST_IMM_OP( xori, x11, x10, 0x80003ff, -0x8000001, -0x400, x3, 228, x4)
90000528:	f8000537          	lui	a0,0xf8000
9000052c:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0x67ffb5fb>
90000530:	c0054593          	xori	a1,a0,-1024
90000534:	0eb1a223          	sw	a1,228(gp)

90000538 <inst_80>:

inst_80:
// rs1_val == -268435457, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x10000001;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x1000002b, -0x10000001, -0x2c, x3, 232, x4)
90000538:	f0000537          	lui	a0,0xf0000
9000053c:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0x5fffb5fb>
90000540:	fd454593          	xori	a1,a0,-44
90000544:	0eb1a423          	sw	a1,232(gp)

90000548 <inst_81>:

inst_81:
// rs1_val == -536870913, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x20000001;  immval:-0x101
TEST_IMM_OP( xori, x11, x10, 0x20000100, -0x20000001, -0x101, x3, 236, x4)
90000548:	e0000537          	lui	a0,0xe0000
9000054c:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0x4fffb5fb>
90000550:	eff54593          	xori	a1,a0,-257
90000554:	0eb1a623          	sw	a1,236(gp)

90000558 <inst_82>:

inst_82:
// rs1_val == -1431655766, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x200
TEST_IMM_OP( xori, x11, x10, 0xaaaaa8aa, -0x55555556, 0x200, x3, 240, x4)
90000558:	aaaab537          	lui	a0,0xaaaab
9000055c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000560:	20054593          	xori	a1,a0,512
90000564:	0eb1a823          	sw	a1,240(gp)

90000568 <inst_83>:

inst_83:
// rs1_val==3 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x0, 0x3, 0x3, x3, 244, x4)
90000568:	00300513          	li	a0,3
9000056c:	00354593          	xori	a1,a0,3
90000570:	0eb1aa23          	sw	a1,244(gp)

90000574 <inst_84>:

inst_84:
// rs1_val==3 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x556, 0x3, 0x555, x3, 248, x4)
90000574:	00300513          	li	a0,3
90000578:	55554593          	xori	a1,a0,1365
9000057c:	0eb1ac23          	sw	a1,248(gp)

90000580 <inst_85>:

inst_85:
// rs1_val==3 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaa9, 0x3, -0x556, x3, 252, x4)
90000580:	00300513          	li	a0,3
90000584:	aaa54593          	xori	a1,a0,-1366
90000588:	0eb1ae23          	sw	a1,252(gp)

9000058c <inst_86>:

inst_86:
// rs1_val==3 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x6, 0x3, 0x5, x3, 256, x4)
9000058c:	00300513          	li	a0,3
90000590:	00554593          	xori	a1,a0,5
90000594:	10b1a023          	sw	a1,256(gp)

90000598 <inst_87>:

inst_87:
// rs1_val==3 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x330, 0x3, 0x333, x3, 260, x4)
90000598:	00300513          	li	a0,3
9000059c:	33354593          	xori	a1,a0,819
900005a0:	10b1a223          	sw	a1,260(gp)

900005a4 <inst_88>:

inst_88:
// rs1_val==3 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x665, 0x3, 0x666, x3, 264, x4)
900005a4:	00300513          	li	a0,3
900005a8:	66654593          	xori	a1,a0,1638
900005ac:	10b1a423          	sw	a1,264(gp)

900005b0 <inst_89>:

inst_89:
// rs1_val==3 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd0, 0x3, -0x2d, x3, 268, x4)
900005b0:	00300513          	li	a0,3
900005b4:	fd354593          	xori	a1,a0,-45
900005b8:	10b1a623          	sw	a1,268(gp)

900005bc <inst_90>:

inst_90:
// rs1_val==3 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x2e, 0x3, 0x2d, x3, 272, x4)
900005bc:	00300513          	li	a0,3
900005c0:	02d54593          	xori	a1,a0,45
900005c4:	10b1a823          	sw	a1,272(gp)

900005c8 <inst_91>:

inst_91:
// rs1_val==3 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x1, 0x3, 0x2, x3, 276, x4)
900005c8:	00300513          	li	a0,3
900005cc:	00254593          	xori	a1,a0,2
900005d0:	10b1aa23          	sw	a1,276(gp)

900005d4 <inst_92>:

inst_92:
// rs1_val==3 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x557, 0x3, 0x554, x3, 280, x4)
900005d4:	00300513          	li	a0,3
900005d8:	55454593          	xori	a1,a0,1364
900005dc:	10b1ac23          	sw	a1,280(gp)

900005e0 <inst_93>:

inst_93:
// rs1_val==3 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x3, 0x3, 0x0, x3, 284, x4)
900005e0:	00300513          	li	a0,3
900005e4:	00054593          	xori	a1,a0,0
900005e8:	10b1ae23          	sw	a1,284(gp)

900005ec <inst_94>:

inst_94:
// rs1_val==3 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x7, 0x3, 0x4, x3, 288, x4)
900005ec:	00300513          	li	a0,3
900005f0:	00454593          	xori	a1,a0,4
900005f4:	12b1a023          	sw	a1,288(gp)

900005f8 <inst_95>:

inst_95:
// rs1_val==3 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x331, 0x3, 0x332, x3, 292, x4)
900005f8:	00300513          	li	a0,3
900005fc:	33254593          	xori	a1,a0,818
90000600:	12b1a223          	sw	a1,292(gp)

90000604 <inst_96>:

inst_96:
// rs1_val==3 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x666, 0x3, 0x665, x3, 296, x4)
90000604:	00300513          	li	a0,3
90000608:	66554593          	xori	a1,a0,1637
9000060c:	12b1a423          	sw	a1,296(gp)

90000610 <inst_97>:

inst_97:
// rs1_val==3 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2f, 0x3, 0x2c, x3, 300, x4)
90000610:	00300513          	li	a0,3
90000614:	02c54593          	xori	a1,a0,44
90000618:	12b1a623          	sw	a1,300(gp)

9000061c <inst_98>:

inst_98:
// rs1_val==3 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x555, 0x3, 0x556, x3, 304, x4)
9000061c:	00300513          	li	a0,3
90000620:	55654593          	xori	a1,a0,1366
90000624:	12b1a823          	sw	a1,304(gp)

90000628 <inst_99>:

inst_99:
// rs1_val==3 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaa8, 0x3, -0x555, x3, 308, x4)
90000628:	00300513          	li	a0,3
9000062c:	aab54593          	xori	a1,a0,-1365
90000630:	12b1aa23          	sw	a1,308(gp)

90000634 <inst_100>:

inst_100:
// rs1_val==3 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x5, 0x3, 0x6, x3, 312, x4)
90000634:	00300513          	li	a0,3
90000638:	00654593          	xori	a1,a0,6
9000063c:	12b1ac23          	sw	a1,312(gp)

90000640 <inst_101>:

inst_101:
// rs1_val==3 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x337, 0x3, 0x334, x3, 316, x4)
90000640:	00300513          	li	a0,3
90000644:	33454593          	xori	a1,a0,820
90000648:	12b1ae23          	sw	a1,316(gp)

9000064c <inst_102>:

inst_102:
// rs1_val==3 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x664, 0x3, 0x667, x3, 320, x4)
9000064c:	00300513          	li	a0,3
90000650:	66754593          	xori	a1,a0,1639
90000654:	14b1a023          	sw	a1,320(gp)

90000658 <inst_103>:

inst_103:
// rs1_val==3 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd7, 0x3, -0x2c, x3, 324, x4)
90000658:	00300513          	li	a0,3
9000065c:	fd454593          	xori	a1,a0,-44
90000660:	14b1a223          	sw	a1,324(gp)

90000664 <inst_104>:

inst_104:
// rs1_val==3 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2d, 0x3, 0x2e, x3, 328, x4)
90000664:	00300513          	li	a0,3
90000668:	02e54593          	xori	a1,a0,46
9000066c:	14b1a423          	sw	a1,328(gp)

90000670 <inst_105>:

inst_105:
// rs1_val==1431655765 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x55555556, 0x55555555, 0x3, x3, 332, x4)
90000670:	55555537          	lui	a0,0x55555
90000674:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000678:	00354593          	xori	a1,a0,3
9000067c:	14b1a623          	sw	a1,332(gp)

90000680 <inst_106>:

inst_106:
// rs1_val==1431655765 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x55555000, 0x55555555, 0x555, x3, 336, x4)
90000680:	55555537          	lui	a0,0x55555
90000684:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000688:	55554593          	xori	a1,a0,1365
9000068c:	14b1a823          	sw	a1,336(gp)

90000690 <inst_107>:

inst_107:
// rs1_val==1431655765 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaafff, 0x55555555, -0x556, x3, 340, x4)
90000690:	55555537          	lui	a0,0x55555
90000694:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000698:	aaa54593          	xori	a1,a0,-1366
9000069c:	14b1aa23          	sw	a1,340(gp)

900006a0 <inst_108>:

inst_108:
// rs1_val==1431655765 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x55555550, 0x55555555, 0x5, x3, 344, x4)
900006a0:	55555537          	lui	a0,0x55555
900006a4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
900006a8:	00554593          	xori	a1,a0,5
900006ac:	14b1ac23          	sw	a1,344(gp)

900006b0 <inst_109>:

inst_109:
// rs1_val==1431655765 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x55555666, 0x55555555, 0x333, x3, 348, x4)
900006b0:	55555537          	lui	a0,0x55555
900006b4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
900006b8:	33354593          	xori	a1,a0,819
900006bc:	14b1ae23          	sw	a1,348(gp)

900006c0 <inst_110>:

inst_110:
// rs1_val==1431655765 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x55555333, 0x55555555, 0x666, x3, 352, x4)
900006c0:	55555537          	lui	a0,0x55555
900006c4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
900006c8:	66654593          	xori	a1,a0,1638
900006cc:	16b1a023          	sw	a1,352(gp)

900006d0 <inst_111>:

inst_111:
// rs1_val==1431655765 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa86, 0x55555555, -0x2d, x3, 356, x4)
900006d0:	55555537          	lui	a0,0x55555
900006d4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
900006d8:	fd354593          	xori	a1,a0,-45
900006dc:	16b1a223          	sw	a1,356(gp)

900006e0 <inst_112>:

inst_112:
// rs1_val==1431655765 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x55555578, 0x55555555, 0x2d, x3, 360, x4)
900006e0:	55555537          	lui	a0,0x55555
900006e4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
900006e8:	02d54593          	xori	a1,a0,45
900006ec:	16b1a423          	sw	a1,360(gp)

900006f0 <inst_113>:

inst_113:
// rs1_val==1431655765 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x55555557, 0x55555555, 0x2, x3, 364, x4)
900006f0:	55555537          	lui	a0,0x55555
900006f4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
900006f8:	00254593          	xori	a1,a0,2
900006fc:	16b1a623          	sw	a1,364(gp)

90000700 <inst_114>:

inst_114:
// rs1_val==1431655765 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x55555001, 0x55555555, 0x554, x3, 368, x4)
90000700:	55555537          	lui	a0,0x55555
90000704:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000708:	55454593          	xori	a1,a0,1364
9000070c:	16b1a823          	sw	a1,368(gp)

90000710 <inst_115>:

inst_115:
// rs1_val==1431655765 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x55555555, 0x55555555, 0x0, x3, 372, x4)
90000710:	55555537          	lui	a0,0x55555
90000714:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000718:	00054593          	xori	a1,a0,0
9000071c:	16b1aa23          	sw	a1,372(gp)

90000720 <inst_116>:

inst_116:
// rs1_val==1431655765 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x55555551, 0x55555555, 0x4, x3, 376, x4)
90000720:	55555537          	lui	a0,0x55555
90000724:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000728:	00454593          	xori	a1,a0,4
9000072c:	16b1ac23          	sw	a1,376(gp)

90000730 <inst_117>:

inst_117:
// rs1_val==1431655765 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x55555667, 0x55555555, 0x332, x3, 380, x4)
90000730:	55555537          	lui	a0,0x55555
90000734:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000738:	33254593          	xori	a1,a0,818
9000073c:	16b1ae23          	sw	a1,380(gp)

90000740 <inst_118>:

inst_118:
// rs1_val==1431655765 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x55555330, 0x55555555, 0x665, x3, 384, x4)
90000740:	55555537          	lui	a0,0x55555
90000744:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000748:	66554593          	xori	a1,a0,1637
9000074c:	18b1a023          	sw	a1,384(gp)

90000750 <inst_119>:

inst_119:
// rs1_val==1431655765 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x55555579, 0x55555555, 0x2c, x3, 388, x4)
90000750:	55555537          	lui	a0,0x55555
90000754:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000758:	02c54593          	xori	a1,a0,44
9000075c:	18b1a223          	sw	a1,388(gp)

90000760 <inst_120>:

inst_120:
// rs1_val==1431655765 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x55555003, 0x55555555, 0x556, x3, 392, x4)
90000760:	55555537          	lui	a0,0x55555
90000764:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000768:	55654593          	xori	a1,a0,1366
9000076c:	18b1a423          	sw	a1,392(gp)

90000770 <inst_121>:

inst_121:
// rs1_val==1431655765 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffe, 0x55555555, -0x555, x3, 396, x4)
90000770:	55555537          	lui	a0,0x55555
90000774:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000778:	aab54593          	xori	a1,a0,-1365
9000077c:	18b1a623          	sw	a1,396(gp)

90000780 <inst_122>:

inst_122:
// rs1_val==1431655765 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x55555553, 0x55555555, 0x6, x3, 400, x4)
90000780:	55555537          	lui	a0,0x55555
90000784:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000788:	00654593          	xori	a1,a0,6
9000078c:	18b1a823          	sw	a1,400(gp)

90000790 <inst_123>:

inst_123:
// rs1_val==1431655765 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x55555661, 0x55555555, 0x334, x3, 404, x4)
90000790:	55555537          	lui	a0,0x55555
90000794:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
90000798:	33454593          	xori	a1,a0,820
9000079c:	18b1aa23          	sw	a1,404(gp)

900007a0 <inst_124>:

inst_124:
// rs1_val==1431655765 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x55555332, 0x55555555, 0x667, x3, 408, x4)
900007a0:	55555537          	lui	a0,0x55555
900007a4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
900007a8:	66754593          	xori	a1,a0,1639
900007ac:	18b1ac23          	sw	a1,408(gp)

900007b0 <inst_125>:

inst_125:
// rs1_val==1431655765 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa81, 0x55555555, -0x2c, x3, 412, x4)
900007b0:	55555537          	lui	a0,0x55555
900007b4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
900007b8:	fd454593          	xori	a1,a0,-44
900007bc:	18b1ae23          	sw	a1,412(gp)

900007c0 <inst_126>:

inst_126:
// rs1_val==1431655765 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x5555557b, 0x55555555, 0x2e, x3, 416, x4)
900007c0:	55555537          	lui	a0,0x55555
900007c4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d5>
900007c8:	02e54593          	xori	a1,a0,46
900007cc:	1ab1a023          	sw	a1,416(gp)

900007d0 <inst_127>:

inst_127:
// rs1_val==-1431655766 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaa9, -0x55555556, 0x3, x3, 420, x4)
900007d0:	aaaab537          	lui	a0,0xaaaab
900007d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900007d8:	00354593          	xori	a1,a0,3
900007dc:	1ab1a223          	sw	a1,420(gp)

900007e0 <inst_128>:

inst_128:
// rs1_val==-1431655766 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaafff, -0x55555556, 0x555, x3, 424, x4)
900007e0:	aaaab537          	lui	a0,0xaaaab
900007e4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900007e8:	55554593          	xori	a1,a0,1365
900007ec:	1ab1a423          	sw	a1,424(gp)

900007f0 <inst_129>:

inst_129:
// rs1_val==-1431655766 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x55555000, -0x55555556, -0x556, x3, 428, x4)
900007f0:	aaaab537          	lui	a0,0xaaaab
900007f4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900007f8:	aaa54593          	xori	a1,a0,-1366
900007fc:	1ab1a623          	sw	a1,428(gp)

90000800 <inst_130>:

inst_130:
// rs1_val==-1431655766 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaaf, -0x55555556, 0x5, x3, 432, x4)
90000800:	aaaab537          	lui	a0,0xaaaab
90000804:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000808:	00554593          	xori	a1,a0,5
9000080c:	1ab1a823          	sw	a1,432(gp)

90000810 <inst_131>:

inst_131:
// rs1_val==-1431655766 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xaaaaa999, -0x55555556, 0x333, x3, 436, x4)
90000810:	aaaab537          	lui	a0,0xaaaab
90000814:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000818:	33354593          	xori	a1,a0,819
9000081c:	1ab1aa23          	sw	a1,436(gp)

90000820 <inst_132>:

inst_132:
// rs1_val==-1431655766 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccc, -0x55555556, 0x666, x3, 440, x4)
90000820:	aaaab537          	lui	a0,0xaaaab
90000824:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000828:	66654593          	xori	a1,a0,1638
9000082c:	1ab1ac23          	sw	a1,440(gp)

90000830 <inst_133>:

inst_133:
// rs1_val==-1431655766 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x55555579, -0x55555556, -0x2d, x3, 444, x4)
90000830:	aaaab537          	lui	a0,0xaaaab
90000834:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000838:	fd354593          	xori	a1,a0,-45
9000083c:	1ab1ae23          	sw	a1,444(gp)

90000840 <inst_134>:

inst_134:
// rs1_val==-1431655766 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa87, -0x55555556, 0x2d, x3, 448, x4)
90000840:	aaaab537          	lui	a0,0xaaaab
90000844:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000848:	02d54593          	xori	a1,a0,45
9000084c:	1cb1a023          	sw	a1,448(gp)

90000850 <inst_135>:

inst_135:
// rs1_val==-1431655766 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaa8, -0x55555556, 0x2, x3, 452, x4)
90000850:	aaaab537          	lui	a0,0xaaaab
90000854:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000858:	00254593          	xori	a1,a0,2
9000085c:	1cb1a223          	sw	a1,452(gp)

90000860 <inst_136>:

inst_136:
// rs1_val==-1431655766 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffe, -0x55555556, 0x554, x3, 456, x4)
90000860:	aaaab537          	lui	a0,0xaaaab
90000864:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000868:	55454593          	xori	a1,a0,1364
9000086c:	1cb1a423          	sw	a1,456(gp)

90000870 <inst_137>:

inst_137:
// rs1_val==-1431655766 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaaa, -0x55555556, 0x0, x3, 460, x4)
90000870:	aaaab537          	lui	a0,0xaaaab
90000874:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000878:	00054593          	xori	a1,a0,0
9000087c:	1cb1a623          	sw	a1,460(gp)

90000880 <inst_138>:

inst_138:
// rs1_val==-1431655766 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaae, -0x55555556, 0x4, x3, 464, x4)
90000880:	aaaab537          	lui	a0,0xaaaab
90000884:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000888:	00454593          	xori	a1,a0,4
9000088c:	1cb1a823          	sw	a1,464(gp)

90000890 <inst_139>:

inst_139:
// rs1_val==-1431655766 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xaaaaa998, -0x55555556, 0x332, x3, 468, x4)
90000890:	aaaab537          	lui	a0,0xaaaab
90000894:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000898:	33254593          	xori	a1,a0,818
9000089c:	1cb1aa23          	sw	a1,468(gp)

900008a0 <inst_140>:

inst_140:
// rs1_val==-1431655766 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccf, -0x55555556, 0x665, x3, 472, x4)
900008a0:	aaaab537          	lui	a0,0xaaaab
900008a4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008a8:	66554593          	xori	a1,a0,1637
900008ac:	1cb1ac23          	sw	a1,472(gp)

900008b0 <inst_141>:

inst_141:
// rs1_val==-1431655766 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa86, -0x55555556, 0x2c, x3, 476, x4)
900008b0:	aaaab537          	lui	a0,0xaaaab
900008b4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008b8:	02c54593          	xori	a1,a0,44
900008bc:	1cb1ae23          	sw	a1,476(gp)

900008c0 <inst_142>:

inst_142:
// rs1_val==-1431655766 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffc, -0x55555556, 0x556, x3, 480, x4)
900008c0:	aaaab537          	lui	a0,0xaaaab
900008c4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008c8:	55654593          	xori	a1,a0,1366
900008cc:	1eb1a023          	sw	a1,480(gp)

900008d0 <inst_143>:

inst_143:
// rs1_val==-1431655766 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x55555001, -0x55555556, -0x555, x3, 484, x4)
900008d0:	aaaab537          	lui	a0,0xaaaab
900008d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008d8:	aab54593          	xori	a1,a0,-1365
900008dc:	1eb1a223          	sw	a1,484(gp)

900008e0 <inst_144>:

inst_144:
// rs1_val==-1431655766 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaac, -0x55555556, 0x6, x3, 488, x4)
900008e0:	aaaab537          	lui	a0,0xaaaab
900008e4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008e8:	00654593          	xori	a1,a0,6
900008ec:	1eb1a423          	sw	a1,488(gp)

900008f0 <inst_145>:

inst_145:
// rs1_val==-1431655766 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xaaaaa99e, -0x55555556, 0x334, x3, 492, x4)
900008f0:	aaaab537          	lui	a0,0xaaaab
900008f4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008f8:	33454593          	xori	a1,a0,820
900008fc:	1eb1a623          	sw	a1,492(gp)

90000900 <inst_146>:

inst_146:
// rs1_val==-1431655766 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccd, -0x55555556, 0x667, x3, 496, x4)
90000900:	aaaab537          	lui	a0,0xaaaab
90000904:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000908:	66754593          	xori	a1,a0,1639
9000090c:	1eb1a823          	sw	a1,496(gp)

90000910 <inst_147>:

inst_147:
// rs1_val==-1431655766 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x5555557e, -0x55555556, -0x2c, x3, 500, x4)
90000910:	aaaab537          	lui	a0,0xaaaab
90000914:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000918:	fd454593          	xori	a1,a0,-44
9000091c:	1eb1aa23          	sw	a1,500(gp)

90000920 <inst_148>:

inst_148:
// rs1_val==-1431655766 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa84, -0x55555556, 0x2e, x3, 504, x4)
90000920:	aaaab537          	lui	a0,0xaaaab
90000924:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000928:	02e54593          	xori	a1,a0,46
9000092c:	1eb1ac23          	sw	a1,504(gp)

90000930 <inst_149>:

inst_149:
// rs1_val==5 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x6, 0x5, 0x3, x3, 508, x4)
90000930:	00500513          	li	a0,5
90000934:	00354593          	xori	a1,a0,3
90000938:	1eb1ae23          	sw	a1,508(gp)

9000093c <inst_150>:

inst_150:
// rs1_val==5 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x550, 0x5, 0x555, x3, 512, x4)
9000093c:	00500513          	li	a0,5
90000940:	55554593          	xori	a1,a0,1365
90000944:	20b1a023          	sw	a1,512(gp)

90000948 <inst_151>:

inst_151:
// rs1_val==5 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaaf, 0x5, -0x556, x3, 516, x4)
90000948:	00500513          	li	a0,5
9000094c:	aaa54593          	xori	a1,a0,-1366
90000950:	20b1a223          	sw	a1,516(gp)

90000954 <inst_152>:

inst_152:
// rs1_val==5 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x0, 0x5, 0x5, x3, 520, x4)
90000954:	00500513          	li	a0,5
90000958:	00554593          	xori	a1,a0,5
9000095c:	20b1a423          	sw	a1,520(gp)

90000960 <inst_153>:

inst_153:
// rs1_val==5 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x336, 0x5, 0x333, x3, 524, x4)
90000960:	00500513          	li	a0,5
90000964:	33354593          	xori	a1,a0,819
90000968:	20b1a623          	sw	a1,524(gp)

9000096c <inst_154>:

inst_154:
// rs1_val==5 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x663, 0x5, 0x666, x3, 528, x4)
9000096c:	00500513          	li	a0,5
90000970:	66654593          	xori	a1,a0,1638
90000974:	20b1a823          	sw	a1,528(gp)

90000978 <inst_155>:

inst_155:
// rs1_val==5 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd6, 0x5, -0x2d, x3, 532, x4)
90000978:	00500513          	li	a0,5
9000097c:	fd354593          	xori	a1,a0,-45
90000980:	20b1aa23          	sw	a1,532(gp)

90000984 <inst_156>:

inst_156:
// rs1_val==5 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x28, 0x5, 0x2d, x3, 536, x4)
90000984:	00500513          	li	a0,5
90000988:	02d54593          	xori	a1,a0,45
9000098c:	20b1ac23          	sw	a1,536(gp)

90000990 <inst_157>:

inst_157:
// rs1_val==5 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x7, 0x5, 0x2, x3, 540, x4)
90000990:	00500513          	li	a0,5
90000994:	00254593          	xori	a1,a0,2
90000998:	20b1ae23          	sw	a1,540(gp)

9000099c <inst_158>:

inst_158:
// rs1_val==5 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x551, 0x5, 0x554, x3, 544, x4)
9000099c:	00500513          	li	a0,5
900009a0:	55454593          	xori	a1,a0,1364
900009a4:	22b1a023          	sw	a1,544(gp)

900009a8 <inst_159>:

inst_159:
// rs1_val==5 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x5, 0x5, 0x0, x3, 548, x4)
900009a8:	00500513          	li	a0,5
900009ac:	00054593          	xori	a1,a0,0
900009b0:	22b1a223          	sw	a1,548(gp)

900009b4 <inst_160>:

inst_160:
// rs1_val==5 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x1, 0x5, 0x4, x3, 552, x4)
900009b4:	00500513          	li	a0,5
900009b8:	00454593          	xori	a1,a0,4
900009bc:	22b1a423          	sw	a1,552(gp)

900009c0 <inst_161>:

inst_161:
// rs1_val==5 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x337, 0x5, 0x332, x3, 556, x4)
900009c0:	00500513          	li	a0,5
900009c4:	33254593          	xori	a1,a0,818
900009c8:	22b1a623          	sw	a1,556(gp)

900009cc <inst_162>:

inst_162:
// rs1_val==5 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x660, 0x5, 0x665, x3, 560, x4)
900009cc:	00500513          	li	a0,5
900009d0:	66554593          	xori	a1,a0,1637
900009d4:	22b1a823          	sw	a1,560(gp)

900009d8 <inst_163>:

inst_163:
// rs1_val==5 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x29, 0x5, 0x2c, x3, 564, x4)
900009d8:	00500513          	li	a0,5
900009dc:	02c54593          	xori	a1,a0,44
900009e0:	22b1aa23          	sw	a1,564(gp)

900009e4 <inst_164>:

inst_164:
// rs1_val==5 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x553, 0x5, 0x556, x3, 568, x4)
900009e4:	00500513          	li	a0,5
900009e8:	55654593          	xori	a1,a0,1366
900009ec:	22b1ac23          	sw	a1,568(gp)

900009f0 <inst_165>:

inst_165:
// rs1_val==5 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaae, 0x5, -0x555, x3, 572, x4)
900009f0:	00500513          	li	a0,5
900009f4:	aab54593          	xori	a1,a0,-1365
900009f8:	22b1ae23          	sw	a1,572(gp)

900009fc <inst_166>:

inst_166:
// rs1_val==5 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x3, 0x5, 0x6, x3, 576, x4)
900009fc:	00500513          	li	a0,5
90000a00:	00654593          	xori	a1,a0,6
90000a04:	24b1a023          	sw	a1,576(gp)

90000a08 <inst_167>:

inst_167:
// rs1_val==5 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x331, 0x5, 0x334, x3, 580, x4)
90000a08:	00500513          	li	a0,5
90000a0c:	33454593          	xori	a1,a0,820
90000a10:	24b1a223          	sw	a1,580(gp)

90000a14 <inst_168>:

inst_168:
// rs1_val==5 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x662, 0x5, 0x667, x3, 584, x4)
90000a14:	00500513          	li	a0,5
90000a18:	66754593          	xori	a1,a0,1639
90000a1c:	24b1a423          	sw	a1,584(gp)

90000a20 <inst_169>:

inst_169:
// rs1_val==5 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd1, 0x5, -0x2c, x3, 588, x4)
90000a20:	00500513          	li	a0,5
90000a24:	fd454593          	xori	a1,a0,-44
90000a28:	24b1a623          	sw	a1,588(gp)

90000a2c <inst_170>:

inst_170:
// rs1_val==5 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2b, 0x5, 0x2e, x3, 592, x4)
90000a2c:	00500513          	li	a0,5
90000a30:	02e54593          	xori	a1,a0,46
90000a34:	24b1a823          	sw	a1,592(gp)

90000a38 <inst_171>:

inst_171:
// rs1_val==858993459 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x33333330, 0x33333333, 0x3, x3, 596, x4)
90000a38:	33333537          	lui	a0,0x33333
90000a3c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000a40:	00354593          	xori	a1,a0,3
90000a44:	24b1aa23          	sw	a1,596(gp)

90000a48 <inst_172>:

inst_172:
// rs1_val==858993459 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x33333666, 0x33333333, 0x555, x3, 600, x4)
90000a48:	33333537          	lui	a0,0x33333
90000a4c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000a50:	55554593          	xori	a1,a0,1365
90000a54:	24b1ac23          	sw	a1,600(gp)

90000a58 <inst_173>:

inst_173:
// rs1_val==858993459 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xccccc999, 0x33333333, -0x556, x3, 604, x4)
90000a58:	33333537          	lui	a0,0x33333
90000a5c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000a60:	aaa54593          	xori	a1,a0,-1366
90000a64:	24b1ae23          	sw	a1,604(gp)

90000a68 <inst_174>:

inst_174:
// rs1_val==858993459 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x33333336, 0x33333333, 0x5, x3, 608, x4)
90000a68:	33333537          	lui	a0,0x33333
90000a6c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000a70:	00554593          	xori	a1,a0,5
90000a74:	26b1a023          	sw	a1,608(gp)

90000a78 <inst_175>:

inst_175:
// rs1_val==858993459 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x33333000, 0x33333333, 0x333, x3, 612, x4)
90000a78:	33333537          	lui	a0,0x33333
90000a7c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000a80:	33354593          	xori	a1,a0,819
90000a84:	26b1a223          	sw	a1,612(gp)

90000a88 <inst_176>:

inst_176:
// rs1_val==858993459 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x33333555, 0x33333333, 0x666, x3, 616, x4)
90000a88:	33333537          	lui	a0,0x33333
90000a8c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000a90:	66654593          	xori	a1,a0,1638
90000a94:	26b1a423          	sw	a1,616(gp)

90000a98 <inst_177>:

inst_177:
// rs1_val==858993459 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xcccccce0, 0x33333333, -0x2d, x3, 620, x4)
90000a98:	33333537          	lui	a0,0x33333
90000a9c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000aa0:	fd354593          	xori	a1,a0,-45
90000aa4:	26b1a623          	sw	a1,620(gp)

90000aa8 <inst_178>:

inst_178:
// rs1_val==858993459 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x3333331e, 0x33333333, 0x2d, x3, 624, x4)
90000aa8:	33333537          	lui	a0,0x33333
90000aac:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000ab0:	02d54593          	xori	a1,a0,45
90000ab4:	26b1a823          	sw	a1,624(gp)

90000ab8 <inst_179>:

inst_179:
// rs1_val==858993459 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x33333331, 0x33333333, 0x2, x3, 628, x4)
90000ab8:	33333537          	lui	a0,0x33333
90000abc:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000ac0:	00254593          	xori	a1,a0,2
90000ac4:	26b1aa23          	sw	a1,628(gp)

90000ac8 <inst_180>:

inst_180:
// rs1_val==858993459 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x33333667, 0x33333333, 0x554, x3, 632, x4)
90000ac8:	33333537          	lui	a0,0x33333
90000acc:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000ad0:	55454593          	xori	a1,a0,1364
90000ad4:	26b1ac23          	sw	a1,632(gp)

90000ad8 <inst_181>:

inst_181:
// rs1_val==858993459 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x33333333, 0x33333333, 0x0, x3, 636, x4)
90000ad8:	33333537          	lui	a0,0x33333
90000adc:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000ae0:	00054593          	xori	a1,a0,0
90000ae4:	26b1ae23          	sw	a1,636(gp)

90000ae8 <inst_182>:

inst_182:
// rs1_val==858993459 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x33333337, 0x33333333, 0x4, x3, 640, x4)
90000ae8:	33333537          	lui	a0,0x33333
90000aec:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000af0:	00454593          	xori	a1,a0,4
90000af4:	28b1a023          	sw	a1,640(gp)

90000af8 <inst_183>:

inst_183:
// rs1_val==858993459 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x33333001, 0x33333333, 0x332, x3, 644, x4)
90000af8:	33333537          	lui	a0,0x33333
90000afc:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b00:	33254593          	xori	a1,a0,818
90000b04:	28b1a223          	sw	a1,644(gp)

90000b08 <inst_184>:

inst_184:
// rs1_val==858993459 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x33333556, 0x33333333, 0x665, x3, 648, x4)
90000b08:	33333537          	lui	a0,0x33333
90000b0c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b10:	66554593          	xori	a1,a0,1637
90000b14:	28b1a423          	sw	a1,648(gp)

90000b18 <inst_185>:

inst_185:
// rs1_val==858993459 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x3333331f, 0x33333333, 0x2c, x3, 652, x4)
90000b18:	33333537          	lui	a0,0x33333
90000b1c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b20:	02c54593          	xori	a1,a0,44
90000b24:	28b1a623          	sw	a1,652(gp)

90000b28 <inst_186>:

inst_186:
// rs1_val==858993459 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x33333665, 0x33333333, 0x556, x3, 656, x4)
90000b28:	33333537          	lui	a0,0x33333
90000b2c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b30:	55654593          	xori	a1,a0,1366
90000b34:	28b1a823          	sw	a1,656(gp)

90000b38 <inst_187>:

inst_187:
// rs1_val==858993459 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xccccc998, 0x33333333, -0x555, x3, 660, x4)
90000b38:	33333537          	lui	a0,0x33333
90000b3c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b40:	aab54593          	xori	a1,a0,-1365
90000b44:	28b1aa23          	sw	a1,660(gp)

90000b48 <inst_188>:

inst_188:
// rs1_val==858993459 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x33333335, 0x33333333, 0x6, x3, 664, x4)
90000b48:	33333537          	lui	a0,0x33333
90000b4c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b50:	00654593          	xori	a1,a0,6
90000b54:	28b1ac23          	sw	a1,664(gp)

90000b58 <inst_189>:

inst_189:
// rs1_val==858993459 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x33333007, 0x33333333, 0x334, x3, 668, x4)
90000b58:	33333537          	lui	a0,0x33333
90000b5c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b60:	33454593          	xori	a1,a0,820
90000b64:	28b1ae23          	sw	a1,668(gp)

90000b68 <inst_190>:

inst_190:
// rs1_val==858993459 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x33333554, 0x33333333, 0x667, x3, 672, x4)
90000b68:	33333537          	lui	a0,0x33333
90000b6c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b70:	66754593          	xori	a1,a0,1639
90000b74:	2ab1a023          	sw	a1,672(gp)

90000b78 <inst_191>:

inst_191:
// rs1_val==858993459 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xcccccce7, 0x33333333, -0x2c, x3, 676, x4)
90000b78:	33333537          	lui	a0,0x33333
90000b7c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b80:	fd454593          	xori	a1,a0,-44
90000b84:	2ab1a223          	sw	a1,676(gp)

90000b88 <inst_192>:

inst_192:
// rs1_val==858993459 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x3333331d, 0x33333333, 0x2e, x3, 680, x4)
90000b88:	33333537          	lui	a0,0x33333
90000b8c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b3>
90000b90:	02e54593          	xori	a1,a0,46
90000b94:	2ab1a423          	sw	a1,680(gp)

90000b98 <inst_193>:

inst_193:
// rs1_val==1717986918 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x66666665, 0x66666666, 0x3, x3, 684, x4)
90000b98:	66666537          	lui	a0,0x66666
90000b9c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000ba0:	00354593          	xori	a1,a0,3
90000ba4:	2ab1a623          	sw	a1,684(gp)

90000ba8 <inst_194>:

inst_194:
// rs1_val==1717986918 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x66666333, 0x66666666, 0x555, x3, 688, x4)
90000ba8:	66666537          	lui	a0,0x66666
90000bac:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000bb0:	55554593          	xori	a1,a0,1365
90000bb4:	2ab1a823          	sw	a1,688(gp)

90000bb8 <inst_195>:

inst_195:
// rs1_val==1717986918 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x99999ccc, 0x66666666, -0x556, x3, 692, x4)
90000bb8:	66666537          	lui	a0,0x66666
90000bbc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000bc0:	aaa54593          	xori	a1,a0,-1366
90000bc4:	2ab1aa23          	sw	a1,692(gp)

90000bc8 <inst_196>:

inst_196:
// rs1_val==1717986918 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x66666663, 0x66666666, 0x5, x3, 696, x4)
90000bc8:	66666537          	lui	a0,0x66666
90000bcc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000bd0:	00554593          	xori	a1,a0,5
90000bd4:	2ab1ac23          	sw	a1,696(gp)

90000bd8 <inst_197>:

inst_197:
// rs1_val==1717986918 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x66666555, 0x66666666, 0x333, x3, 700, x4)
90000bd8:	66666537          	lui	a0,0x66666
90000bdc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000be0:	33354593          	xori	a1,a0,819
90000be4:	2ab1ae23          	sw	a1,700(gp)

90000be8 <inst_198>:

inst_198:
// rs1_val==1717986918 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x66666000, 0x66666666, 0x666, x3, 704, x4)
90000be8:	66666537          	lui	a0,0x66666
90000bec:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000bf0:	66654593          	xori	a1,a0,1638
90000bf4:	2cb1a023          	sw	a1,704(gp)

90000bf8 <inst_199>:

inst_199:
// rs1_val==1717986918 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x999999b5, 0x66666666, -0x2d, x3, 708, x4)
90000bf8:	66666537          	lui	a0,0x66666
90000bfc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c00:	fd354593          	xori	a1,a0,-45
90000c04:	2cb1a223          	sw	a1,708(gp)

90000c08 <inst_200>:

inst_200:
// rs1_val==1717986918 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x6666664b, 0x66666666, 0x2d, x3, 712, x4)
90000c08:	66666537          	lui	a0,0x66666
90000c0c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c10:	02d54593          	xori	a1,a0,45
90000c14:	2cb1a423          	sw	a1,712(gp)

90000c18 <inst_201>:

inst_201:
// rs1_val==1717986918 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x66666664, 0x66666666, 0x2, x3, 716, x4)
90000c18:	66666537          	lui	a0,0x66666
90000c1c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c20:	00254593          	xori	a1,a0,2
90000c24:	2cb1a623          	sw	a1,716(gp)

90000c28 <inst_202>:

inst_202:
// rs1_val==1717986918 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x66666332, 0x66666666, 0x554, x3, 720, x4)
90000c28:	66666537          	lui	a0,0x66666
90000c2c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c30:	55454593          	xori	a1,a0,1364
90000c34:	2cb1a823          	sw	a1,720(gp)

90000c38 <inst_203>:

inst_203:
// rs1_val==1717986918 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x66666666, 0x66666666, 0x0, x3, 724, x4)
90000c38:	66666537          	lui	a0,0x66666
90000c3c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c40:	00054593          	xori	a1,a0,0
90000c44:	2cb1aa23          	sw	a1,724(gp)

90000c48 <inst_204>:

inst_204:
// rs1_val==1717986918 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x66666662, 0x66666666, 0x4, x3, 728, x4)
90000c48:	66666537          	lui	a0,0x66666
90000c4c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c50:	00454593          	xori	a1,a0,4
90000c54:	2cb1ac23          	sw	a1,728(gp)

90000c58 <inst_205>:

inst_205:
// rs1_val==1717986918 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x66666554, 0x66666666, 0x332, x3, 732, x4)
90000c58:	66666537          	lui	a0,0x66666
90000c5c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c60:	33254593          	xori	a1,a0,818
90000c64:	2cb1ae23          	sw	a1,732(gp)

90000c68 <inst_206>:

inst_206:
// rs1_val==1717986918 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x66666003, 0x66666666, 0x665, x3, 736, x4)
90000c68:	66666537          	lui	a0,0x66666
90000c6c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c70:	66554593          	xori	a1,a0,1637
90000c74:	2eb1a023          	sw	a1,736(gp)

90000c78 <inst_207>:

inst_207:
// rs1_val==1717986918 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x6666664a, 0x66666666, 0x2c, x3, 740, x4)
90000c78:	66666537          	lui	a0,0x66666
90000c7c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c80:	02c54593          	xori	a1,a0,44
90000c84:	2eb1a223          	sw	a1,740(gp)

90000c88 <inst_208>:

inst_208:
// rs1_val==1717986918 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x66666330, 0x66666666, 0x556, x3, 744, x4)
90000c88:	66666537          	lui	a0,0x66666
90000c8c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000c90:	55654593          	xori	a1,a0,1366
90000c94:	2eb1a423          	sw	a1,744(gp)

90000c98 <inst_209>:

inst_209:
// rs1_val==1717986918 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x99999ccd, 0x66666666, -0x555, x3, 748, x4)
90000c98:	66666537          	lui	a0,0x66666
90000c9c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000ca0:	aab54593          	xori	a1,a0,-1365
90000ca4:	2eb1a623          	sw	a1,748(gp)

90000ca8 <inst_210>:

inst_210:
// rs1_val==1717986918 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x66666660, 0x66666666, 0x6, x3, 752, x4)
90000ca8:	66666537          	lui	a0,0x66666
90000cac:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000cb0:	00654593          	xori	a1,a0,6
90000cb4:	2eb1a823          	sw	a1,752(gp)

90000cb8 <inst_211>:

inst_211:
// rs1_val==1717986918 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x66666552, 0x66666666, 0x334, x3, 756, x4)
90000cb8:	66666537          	lui	a0,0x66666
90000cbc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000cc0:	33454593          	xori	a1,a0,820
90000cc4:	2eb1aa23          	sw	a1,756(gp)

90000cc8 <inst_212>:

inst_212:
// rs1_val==1717986918 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x66666001, 0x66666666, 0x667, x3, 760, x4)
90000cc8:	66666537          	lui	a0,0x66666
90000ccc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000cd0:	66754593          	xori	a1,a0,1639
90000cd4:	2eb1ac23          	sw	a1,760(gp)

90000cd8 <inst_213>:

inst_213:
// rs1_val==1717986918 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x999999b2, 0x66666666, -0x2c, x3, 764, x4)
90000cd8:	66666537          	lui	a0,0x66666
90000cdc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000ce0:	fd454593          	xori	a1,a0,-44
90000ce4:	2eb1ae23          	sw	a1,764(gp)

90000ce8 <inst_214>:

inst_214:
// rs1_val==1717986918 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x66666648, 0x66666666, 0x2e, x3, 768, x4)
90000ce8:	66666537          	lui	a0,0x66666
90000cec:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665e6>
90000cf0:	02e54593          	xori	a1,a0,46
90000cf4:	30b1a023          	sw	a1,768(gp)

90000cf8 <inst_215>:

inst_215:
// rs1_val==-46340 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xffff4aff, -0xb504, 0x3, x3, 772, x4)
90000cf8:	ffff5537          	lui	a0,0xffff5
90000cfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d00:	00354593          	xori	a1,a0,3
90000d04:	30b1a223          	sw	a1,772(gp)

90000d08 <inst_216>:

inst_216:
// rs1_val==-46340 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4fa9, -0xb504, 0x555, x3, 776, x4)
90000d08:	ffff5537          	lui	a0,0xffff5
90000d0c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d10:	55554593          	xori	a1,a0,1365
90000d14:	30b1a423          	sw	a1,776(gp)

90000d18 <inst_217>:

inst_217:
// rs1_val==-46340 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xb056, -0xb504, -0x556, x3, 780, x4)
90000d18:	ffff5537          	lui	a0,0xffff5
90000d1c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d20:	aaa54593          	xori	a1,a0,-1366
90000d24:	30b1a623          	sw	a1,780(gp)

90000d28 <inst_218>:

inst_218:
// rs1_val==-46340 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xffff4af9, -0xb504, 0x5, x3, 784, x4)
90000d28:	ffff5537          	lui	a0,0xffff5
90000d2c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d30:	00554593          	xori	a1,a0,5
90000d34:	30b1a823          	sw	a1,784(gp)

90000d38 <inst_219>:

inst_219:
// rs1_val==-46340 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xffff49cf, -0xb504, 0x333, x3, 788, x4)
90000d38:	ffff5537          	lui	a0,0xffff5
90000d3c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d40:	33354593          	xori	a1,a0,819
90000d44:	30b1aa23          	sw	a1,788(gp)

90000d48 <inst_220>:

inst_220:
// rs1_val==-46340 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xffff4c9a, -0xb504, 0x666, x3, 792, x4)
90000d48:	ffff5537          	lui	a0,0xffff5
90000d4c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d50:	66654593          	xori	a1,a0,1638
90000d54:	30b1ac23          	sw	a1,792(gp)

90000d58 <inst_221>:

inst_221:
// rs1_val==-46340 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xb52f, -0xb504, -0x2d, x3, 796, x4)
90000d58:	ffff5537          	lui	a0,0xffff5
90000d5c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d60:	fd354593          	xori	a1,a0,-45
90000d64:	30b1ae23          	sw	a1,796(gp)

90000d68 <inst_222>:

inst_222:
// rs1_val==-46340 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad1, -0xb504, 0x2d, x3, 800, x4)
90000d68:	ffff5537          	lui	a0,0xffff5
90000d6c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d70:	02d54593          	xori	a1,a0,45
90000d74:	32b1a023          	sw	a1,800(gp)

90000d78 <inst_223>:

inst_223:
// rs1_val==-46340 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xffff4afe, -0xb504, 0x2, x3, 804, x4)
90000d78:	ffff5537          	lui	a0,0xffff5
90000d7c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d80:	00254593          	xori	a1,a0,2
90000d84:	32b1a223          	sw	a1,804(gp)

90000d88 <inst_224>:

inst_224:
// rs1_val==-46340 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xffff4fa8, -0xb504, 0x554, x3, 808, x4)
90000d88:	ffff5537          	lui	a0,0xffff5
90000d8c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d90:	55454593          	xori	a1,a0,1364
90000d94:	32b1a423          	sw	a1,808(gp)

90000d98 <inst_225>:

inst_225:
// rs1_val==-46340 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xffff4afc, -0xb504, 0x0, x3, 812, x4)
90000d98:	ffff5537          	lui	a0,0xffff5
90000d9c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000da0:	00054593          	xori	a1,a0,0
90000da4:	32b1a623          	sw	a1,812(gp)

90000da8 <inst_226>:

inst_226:
// rs1_val==-46340 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xffff4af8, -0xb504, 0x4, x3, 816, x4)
90000da8:	ffff5537          	lui	a0,0xffff5
90000dac:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000db0:	00454593          	xori	a1,a0,4
90000db4:	32b1a823          	sw	a1,816(gp)

90000db8 <inst_227>:

inst_227:
// rs1_val==-46340 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xffff49ce, -0xb504, 0x332, x3, 820, x4)
90000db8:	ffff5537          	lui	a0,0xffff5
90000dbc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000dc0:	33254593          	xori	a1,a0,818
90000dc4:	32b1aa23          	sw	a1,820(gp)

90000dc8 <inst_228>:

inst_228:
// rs1_val==-46340 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xffff4c99, -0xb504, 0x665, x3, 824, x4)
90000dc8:	ffff5537          	lui	a0,0xffff5
90000dcc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000dd0:	66554593          	xori	a1,a0,1637
90000dd4:	32b1ac23          	sw	a1,824(gp)

90000dd8 <inst_229>:

inst_229:
// rs1_val==-46340 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad0, -0xb504, 0x2c, x3, 828, x4)
90000dd8:	ffff5537          	lui	a0,0xffff5
90000ddc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000de0:	02c54593          	xori	a1,a0,44
90000de4:	32b1ae23          	sw	a1,828(gp)

90000de8 <inst_230>:

inst_230:
// rs1_val==-46340 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4faa, -0xb504, 0x556, x3, 832, x4)
90000de8:	ffff5537          	lui	a0,0xffff5
90000dec:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000df0:	55654593          	xori	a1,a0,1366
90000df4:	34b1a023          	sw	a1,832(gp)

90000df8 <inst_231>:

inst_231:
// rs1_val==-46340 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xb057, -0xb504, -0x555, x3, 836, x4)
90000df8:	ffff5537          	lui	a0,0xffff5
90000dfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000e00:	aab54593          	xori	a1,a0,-1365
90000e04:	34b1a223          	sw	a1,836(gp)

90000e08 <inst_232>:

inst_232:
// rs1_val==-46340 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xffff4afa, -0xb504, 0x6, x3, 840, x4)
90000e08:	ffff5537          	lui	a0,0xffff5
90000e0c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000e10:	00654593          	xori	a1,a0,6
90000e14:	34b1a423          	sw	a1,840(gp)

90000e18 <inst_233>:

inst_233:
// rs1_val==-46340 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xffff49c8, -0xb504, 0x334, x3, 844, x4)
90000e18:	ffff5537          	lui	a0,0xffff5
90000e1c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000e20:	33454593          	xori	a1,a0,820
90000e24:	34b1a623          	sw	a1,844(gp)

90000e28 <inst_234>:

inst_234:
// rs1_val==-46340 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xffff4c9b, -0xb504, 0x667, x3, 848, x4)
90000e28:	ffff5537          	lui	a0,0xffff5
90000e2c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000e30:	66754593          	xori	a1,a0,1639
90000e34:	34b1a823          	sw	a1,848(gp)

90000e38 <inst_235>:

inst_235:
// rs1_val==-46340 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xb528, -0xb504, -0x2c, x3, 852, x4)
90000e38:	ffff5537          	lui	a0,0xffff5
90000e3c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000e40:	fd454593          	xori	a1,a0,-44
90000e44:	34b1aa23          	sw	a1,852(gp)

90000e48 <inst_236>:

inst_236:
// rs1_val==-46340 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xffff4ad2, -0xb504, 0x2e, x3, 856, x4)
90000e48:	ffff5537          	lui	a0,0xffff5
90000e4c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000e50:	02e54593          	xori	a1,a0,46
90000e54:	34b1ac23          	sw	a1,856(gp)

90000e58 <inst_237>:

inst_237:
// rs1_val==46340 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xb507, 0xb504, 0x3, x3, 860, x4)
90000e58:	0000b537          	lui	a0,0xb
90000e5c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000e60:	00354593          	xori	a1,a0,3
90000e64:	34b1ae23          	sw	a1,860(gp)

90000e68 <inst_238>:

inst_238:
// rs1_val==46340 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xb051, 0xb504, 0x555, x3, 864, x4)
90000e68:	0000b537          	lui	a0,0xb
90000e6c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000e70:	55554593          	xori	a1,a0,1365
90000e74:	36b1a023          	sw	a1,864(gp)

90000e78 <inst_239>:

inst_239:
// rs1_val==46340 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4fae, 0xb504, -0x556, x3, 868, x4)
90000e78:	0000b537          	lui	a0,0xb
90000e7c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000e80:	aaa54593          	xori	a1,a0,-1366
90000e84:	36b1a223          	sw	a1,868(gp)

90000e88 <inst_240>:

inst_240:
// rs1_val==46340 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xb501, 0xb504, 0x5, x3, 872, x4)
90000e88:	0000b537          	lui	a0,0xb
90000e8c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000e90:	00554593          	xori	a1,a0,5
90000e94:	36b1a423          	sw	a1,872(gp)

90000e98 <inst_241>:

inst_241:
// rs1_val==46340 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xb637, 0xb504, 0x333, x3, 876, x4)
90000e98:	0000b537          	lui	a0,0xb
90000e9c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000ea0:	33354593          	xori	a1,a0,819
90000ea4:	36b1a623          	sw	a1,876(gp)

90000ea8 <inst_242>:

inst_242:
// rs1_val==46340 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xb362, 0xb504, 0x666, x3, 880, x4)
90000ea8:	0000b537          	lui	a0,0xb
90000eac:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000eb0:	66654593          	xori	a1,a0,1638
90000eb4:	36b1a823          	sw	a1,880(gp)

90000eb8 <inst_243>:

inst_243:
// rs1_val==46340 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad7, 0xb504, -0x2d, x3, 884, x4)
90000eb8:	0000b537          	lui	a0,0xb
90000ebc:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000ec0:	fd354593          	xori	a1,a0,-45
90000ec4:	36b1aa23          	sw	a1,884(gp)

90000ec8 <inst_244>:

inst_244:
// rs1_val==46340 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xb529, 0xb504, 0x2d, x3, 888, x4)
90000ec8:	0000b537          	lui	a0,0xb
90000ecc:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000ed0:	02d54593          	xori	a1,a0,45
90000ed4:	36b1ac23          	sw	a1,888(gp)

90000ed8 <inst_245>:

inst_245:
// rs1_val==46340 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xb506, 0xb504, 0x2, x3, 892, x4)
90000ed8:	0000b537          	lui	a0,0xb
90000edc:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000ee0:	00254593          	xori	a1,a0,2
90000ee4:	36b1ae23          	sw	a1,892(gp)

90000ee8 <inst_246>:

inst_246:
// rs1_val==46340 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xb050, 0xb504, 0x554, x3, 896, x4)
90000ee8:	0000b537          	lui	a0,0xb
90000eec:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000ef0:	55454593          	xori	a1,a0,1364
90000ef4:	38b1a023          	sw	a1,896(gp)

90000ef8 <inst_247>:

inst_247:
// rs1_val==46340 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xb504, 0xb504, 0x0, x3, 900, x4)
90000ef8:	0000b537          	lui	a0,0xb
90000efc:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f00:	00054593          	xori	a1,a0,0
90000f04:	38b1a223          	sw	a1,900(gp)

90000f08 <inst_248>:

inst_248:
// rs1_val==46340 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xb500, 0xb504, 0x4, x3, 904, x4)
90000f08:	0000b537          	lui	a0,0xb
90000f0c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f10:	00454593          	xori	a1,a0,4
90000f14:	38b1a423          	sw	a1,904(gp)

90000f18 <inst_249>:

inst_249:
// rs1_val==46340 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xb636, 0xb504, 0x332, x3, 908, x4)
90000f18:	0000b537          	lui	a0,0xb
90000f1c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f20:	33254593          	xori	a1,a0,818
90000f24:	38b1a623          	sw	a1,908(gp)

90000f28 <inst_250>:

inst_250:
// rs1_val==46340 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xb361, 0xb504, 0x665, x3, 912, x4)
90000f28:	0000b537          	lui	a0,0xb
90000f2c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f30:	66554593          	xori	a1,a0,1637
90000f34:	38b1a823          	sw	a1,912(gp)

90000f38 <inst_251>:

inst_251:
// rs1_val==46340 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xb528, 0xb504, 0x2c, x3, 916, x4)
90000f38:	0000b537          	lui	a0,0xb
90000f3c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f40:	02c54593          	xori	a1,a0,44
90000f44:	38b1aa23          	sw	a1,916(gp)

90000f48 <inst_252>:

inst_252:
// rs1_val==46340 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xb052, 0xb504, 0x556, x3, 920, x4)
90000f48:	0000b537          	lui	a0,0xb
90000f4c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f50:	55654593          	xori	a1,a0,1366
90000f54:	38b1ac23          	sw	a1,920(gp)

90000f58 <inst_253>:

inst_253:
// rs1_val==46340 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4faf, 0xb504, -0x555, x3, 924, x4)
90000f58:	0000b537          	lui	a0,0xb
90000f5c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f60:	aab54593          	xori	a1,a0,-1365
90000f64:	38b1ae23          	sw	a1,924(gp)

90000f68 <inst_254>:

inst_254:
// rs1_val==46340 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xb502, 0xb504, 0x6, x3, 928, x4)
90000f68:	0000b537          	lui	a0,0xb
90000f6c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f70:	00654593          	xori	a1,a0,6
90000f74:	3ab1a023          	sw	a1,928(gp)

90000f78 <inst_255>:

inst_255:
// rs1_val==46340 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xb630, 0xb504, 0x334, x3, 932, x4)
90000f78:	0000b537          	lui	a0,0xb
90000f7c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f80:	33454593          	xori	a1,a0,820
90000f84:	3ab1a223          	sw	a1,932(gp)

90000f88 <inst_256>:

inst_256:
// rs1_val==46340 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xb363, 0xb504, 0x667, x3, 936, x4)
90000f88:	0000b537          	lui	a0,0xb
90000f8c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000f90:	66754593          	xori	a1,a0,1639
90000f94:	3ab1a423          	sw	a1,936(gp)

90000f98 <inst_257>:

inst_257:
// rs1_val==46340 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad0, 0xb504, -0x2c, x3, 940, x4)
90000f98:	0000b537          	lui	a0,0xb
90000f9c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000fa0:	fd454593          	xori	a1,a0,-44
90000fa4:	3ab1a623          	sw	a1,940(gp)

90000fa8 <inst_258>:

inst_258:
// rs1_val==46340 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xb52a, 0xb504, 0x2e, x3, 944, x4)
90000fa8:	0000b537          	lui	a0,0xb
90000fac:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb484>
90000fb0:	02e54593          	xori	a1,a0,46
90000fb4:	3ab1a823          	sw	a1,944(gp)

90000fb8 <inst_259>:

inst_259:
// rs1_val==2 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x1, 0x2, 0x3, x3, 948, x4)
90000fb8:	00200513          	li	a0,2
90000fbc:	00354593          	xori	a1,a0,3
90000fc0:	3ab1aa23          	sw	a1,948(gp)

90000fc4 <inst_260>:

inst_260:
// rs1_val==2 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x557, 0x2, 0x555, x3, 952, x4)
90000fc4:	00200513          	li	a0,2
90000fc8:	55554593          	xori	a1,a0,1365
90000fcc:	3ab1ac23          	sw	a1,952(gp)

90000fd0 <inst_261>:

inst_261:
// rs1_val==2 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaa8, 0x2, -0x556, x3, 956, x4)
90000fd0:	00200513          	li	a0,2
90000fd4:	aaa54593          	xori	a1,a0,-1366
90000fd8:	3ab1ae23          	sw	a1,956(gp)

90000fdc <inst_262>:

inst_262:
// rs1_val==2 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x7, 0x2, 0x5, x3, 960, x4)
90000fdc:	00200513          	li	a0,2
90000fe0:	00554593          	xori	a1,a0,5
90000fe4:	3cb1a023          	sw	a1,960(gp)

90000fe8 <inst_263>:

inst_263:
// rs1_val==2 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x331, 0x2, 0x333, x3, 964, x4)
90000fe8:	00200513          	li	a0,2
90000fec:	33354593          	xori	a1,a0,819
90000ff0:	3cb1a223          	sw	a1,964(gp)

90000ff4 <inst_264>:

inst_264:
// rs1_val==2 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x664, 0x2, 0x666, x3, 968, x4)
90000ff4:	00200513          	li	a0,2
90000ff8:	66654593          	xori	a1,a0,1638
90000ffc:	3cb1a423          	sw	a1,968(gp)

90001000 <inst_265>:

inst_265:
// rs1_val==2 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd1, 0x2, -0x2d, x3, 972, x4)
90001000:	00200513          	li	a0,2
90001004:	fd354593          	xori	a1,a0,-45
90001008:	3cb1a623          	sw	a1,972(gp)

9000100c <inst_266>:

inst_266:
// rs1_val==2 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x2f, 0x2, 0x2d, x3, 976, x4)
9000100c:	00200513          	li	a0,2
90001010:	02d54593          	xori	a1,a0,45
90001014:	3cb1a823          	sw	a1,976(gp)

90001018 <inst_267>:

inst_267:
// rs1_val==2 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x0, 0x2, 0x2, x3, 980, x4)
90001018:	00200513          	li	a0,2
9000101c:	00254593          	xori	a1,a0,2
90001020:	3cb1aa23          	sw	a1,980(gp)

90001024 <inst_268>:

inst_268:
// rs1_val==2 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x556, 0x2, 0x554, x3, 984, x4)
90001024:	00200513          	li	a0,2
90001028:	55454593          	xori	a1,a0,1364
9000102c:	3cb1ac23          	sw	a1,984(gp)

90001030 <inst_269>:

inst_269:
// rs1_val==2 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x2, 0x2, 0x0, x3, 988, x4)
90001030:	00200513          	li	a0,2
90001034:	00054593          	xori	a1,a0,0
90001038:	3cb1ae23          	sw	a1,988(gp)

9000103c <inst_270>:

inst_270:
// rs1_val==2 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x6, 0x2, 0x4, x3, 992, x4)
9000103c:	00200513          	li	a0,2
90001040:	00454593          	xori	a1,a0,4
90001044:	3eb1a023          	sw	a1,992(gp)

90001048 <inst_271>:

inst_271:
// rs1_val==2 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x330, 0x2, 0x332, x3, 996, x4)
90001048:	00200513          	li	a0,2
9000104c:	33254593          	xori	a1,a0,818
90001050:	3eb1a223          	sw	a1,996(gp)

90001054 <inst_272>:

inst_272:
// rs1_val==2 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x667, 0x2, 0x665, x3, 1000, x4)
90001054:	00200513          	li	a0,2
90001058:	66554593          	xori	a1,a0,1637
9000105c:	3eb1a423          	sw	a1,1000(gp)

90001060 <inst_273>:

inst_273:
// rs1_val==2 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2e, 0x2, 0x2c, x3, 1004, x4)
90001060:	00200513          	li	a0,2
90001064:	02c54593          	xori	a1,a0,44
90001068:	3eb1a623          	sw	a1,1004(gp)

9000106c <inst_274>:

inst_274:
// rs1_val==2 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x554, 0x2, 0x556, x3, 1008, x4)
9000106c:	00200513          	li	a0,2
90001070:	55654593          	xori	a1,a0,1366
90001074:	3eb1a823          	sw	a1,1008(gp)

90001078 <inst_275>:

inst_275:
// rs1_val==2 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaa9, 0x2, -0x555, x3, 1012, x4)
90001078:	00200513          	li	a0,2
9000107c:	aab54593          	xori	a1,a0,-1365
90001080:	3eb1aa23          	sw	a1,1012(gp)

90001084 <inst_276>:

inst_276:
// rs1_val==2 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x4, 0x2, 0x6, x3, 1016, x4)
90001084:	00200513          	li	a0,2
90001088:	00654593          	xori	a1,a0,6
9000108c:	3eb1ac23          	sw	a1,1016(gp)

90001090 <inst_277>:

inst_277:
// rs1_val==2 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x336, 0x2, 0x334, x3, 1020, x4)
90001090:	00200513          	li	a0,2
90001094:	33454593          	xori	a1,a0,820
90001098:	3eb1ae23          	sw	a1,1020(gp)

9000109c <inst_278>:

inst_278:
// rs1_val==2 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x665, 0x2, 0x667, x3, 1024, x4)
9000109c:	00200513          	li	a0,2
900010a0:	66754593          	xori	a1,a0,1639
900010a4:	40b1a023          	sw	a1,1024(gp)

900010a8 <inst_279>:

inst_279:
// rs1_val==2 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd6, 0x2, -0x2c, x3, 1028, x4)
900010a8:	00200513          	li	a0,2
900010ac:	fd454593          	xori	a1,a0,-44
900010b0:	40b1a223          	sw	a1,1028(gp)

900010b4 <inst_280>:

inst_280:
// rs1_val==2 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2c, 0x2, 0x2e, x3, 1032, x4)
900010b4:	00200513          	li	a0,2
900010b8:	02e54593          	xori	a1,a0,46
900010bc:	40b1a423          	sw	a1,1032(gp)

900010c0 <inst_281>:

inst_281:
// rs1_val==1431655764 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x55555557, 0x55555554, 0x3, x3, 1036, x4)
900010c0:	55555537          	lui	a0,0x55555
900010c4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900010c8:	00354593          	xori	a1,a0,3
900010cc:	40b1a623          	sw	a1,1036(gp)

900010d0 <inst_282>:

inst_282:
// rs1_val==1431655764 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x55555001, 0x55555554, 0x555, x3, 1040, x4)
900010d0:	55555537          	lui	a0,0x55555
900010d4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900010d8:	55554593          	xori	a1,a0,1365
900010dc:	40b1a823          	sw	a1,1040(gp)

900010e0 <inst_283>:

inst_283:
// rs1_val==1431655764 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffe, 0x55555554, -0x556, x3, 1044, x4)
900010e0:	55555537          	lui	a0,0x55555
900010e4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900010e8:	aaa54593          	xori	a1,a0,-1366
900010ec:	40b1aa23          	sw	a1,1044(gp)

900010f0 <inst_284>:

inst_284:
// rs1_val==1431655764 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x55555551, 0x55555554, 0x5, x3, 1048, x4)
900010f0:	55555537          	lui	a0,0x55555
900010f4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900010f8:	00554593          	xori	a1,a0,5
900010fc:	40b1ac23          	sw	a1,1048(gp)

90001100 <inst_285>:

inst_285:
// rs1_val==1431655764 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x55555667, 0x55555554, 0x333, x3, 1052, x4)
90001100:	55555537          	lui	a0,0x55555
90001104:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001108:	33354593          	xori	a1,a0,819
9000110c:	40b1ae23          	sw	a1,1052(gp)

90001110 <inst_286>:

inst_286:
// rs1_val==1431655764 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x55555332, 0x55555554, 0x666, x3, 1056, x4)
90001110:	55555537          	lui	a0,0x55555
90001114:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001118:	66654593          	xori	a1,a0,1638
9000111c:	42b1a023          	sw	a1,1056(gp)

90001120 <inst_287>:

inst_287:
// rs1_val==1431655764 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa87, 0x55555554, -0x2d, x3, 1060, x4)
90001120:	55555537          	lui	a0,0x55555
90001124:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001128:	fd354593          	xori	a1,a0,-45
9000112c:	42b1a223          	sw	a1,1060(gp)

90001130 <inst_288>:

inst_288:
// rs1_val==1431655764 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x55555579, 0x55555554, 0x2d, x3, 1064, x4)
90001130:	55555537          	lui	a0,0x55555
90001134:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001138:	02d54593          	xori	a1,a0,45
9000113c:	42b1a423          	sw	a1,1064(gp)

90001140 <inst_289>:

inst_289:
// rs1_val==1431655764 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x55555556, 0x55555554, 0x2, x3, 1068, x4)
90001140:	55555537          	lui	a0,0x55555
90001144:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001148:	00254593          	xori	a1,a0,2
9000114c:	42b1a623          	sw	a1,1068(gp)

90001150 <inst_290>:

inst_290:
// rs1_val==1431655764 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x55555000, 0x55555554, 0x554, x3, 1072, x4)
90001150:	55555537          	lui	a0,0x55555
90001154:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001158:	55454593          	xori	a1,a0,1364
9000115c:	42b1a823          	sw	a1,1072(gp)

90001160 <inst_291>:

inst_291:
// rs1_val==1431655764 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x55555554, 0x55555554, 0x0, x3, 1076, x4)
90001160:	55555537          	lui	a0,0x55555
90001164:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001168:	00054593          	xori	a1,a0,0
9000116c:	42b1aa23          	sw	a1,1076(gp)

90001170 <inst_292>:

inst_292:
// rs1_val==1431655764 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x55555550, 0x55555554, 0x4, x3, 1080, x4)
90001170:	55555537          	lui	a0,0x55555
90001174:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001178:	00454593          	xori	a1,a0,4
9000117c:	42b1ac23          	sw	a1,1080(gp)

90001180 <inst_293>:

inst_293:
// rs1_val==1431655764 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x55555666, 0x55555554, 0x332, x3, 1084, x4)
90001180:	55555537          	lui	a0,0x55555
90001184:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001188:	33254593          	xori	a1,a0,818
9000118c:	42b1ae23          	sw	a1,1084(gp)

90001190 <inst_294>:

inst_294:
// rs1_val==1431655764 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x55555331, 0x55555554, 0x665, x3, 1088, x4)
90001190:	55555537          	lui	a0,0x55555
90001194:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001198:	66554593          	xori	a1,a0,1637
9000119c:	44b1a023          	sw	a1,1088(gp)

900011a0 <inst_295>:

inst_295:
// rs1_val==1431655764 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x55555578, 0x55555554, 0x2c, x3, 1092, x4)
900011a0:	55555537          	lui	a0,0x55555
900011a4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900011a8:	02c54593          	xori	a1,a0,44
900011ac:	44b1a223          	sw	a1,1092(gp)

900011b0 <inst_296>:

inst_296:
// rs1_val==1431655764 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x55555002, 0x55555554, 0x556, x3, 1096, x4)
900011b0:	55555537          	lui	a0,0x55555
900011b4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900011b8:	55654593          	xori	a1,a0,1366
900011bc:	44b1a423          	sw	a1,1096(gp)

900011c0 <inst_297>:

inst_297:
// rs1_val==1431655764 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaafff, 0x55555554, -0x555, x3, 1100, x4)
900011c0:	55555537          	lui	a0,0x55555
900011c4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900011c8:	aab54593          	xori	a1,a0,-1365
900011cc:	44b1a623          	sw	a1,1100(gp)

900011d0 <inst_298>:

inst_298:
// rs1_val==1431655764 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x55555552, 0x55555554, 0x6, x3, 1104, x4)
900011d0:	55555537          	lui	a0,0x55555
900011d4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900011d8:	00654593          	xori	a1,a0,6
900011dc:	44b1a823          	sw	a1,1104(gp)

900011e0 <inst_299>:

inst_299:
// rs1_val==1431655764 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x55555660, 0x55555554, 0x334, x3, 1108, x4)
900011e0:	55555537          	lui	a0,0x55555
900011e4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900011e8:	33454593          	xori	a1,a0,820
900011ec:	44b1aa23          	sw	a1,1108(gp)

900011f0 <inst_300>:

inst_300:
// rs1_val==1431655764 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x55555333, 0x55555554, 0x667, x3, 1112, x4)
900011f0:	55555537          	lui	a0,0x55555
900011f4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
900011f8:	66754593          	xori	a1,a0,1639
900011fc:	44b1ac23          	sw	a1,1112(gp)

90001200 <inst_301>:

inst_301:
// rs1_val==1431655764 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa80, 0x55555554, -0x2c, x3, 1116, x4)
90001200:	55555537          	lui	a0,0x55555
90001204:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001208:	fd454593          	xori	a1,a0,-44
9000120c:	44b1ae23          	sw	a1,1116(gp)

90001210 <inst_302>:

inst_302:
// rs1_val==1431655764 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x5555557a, 0x55555554, 0x2e, x3, 1120, x4)
90001210:	55555537          	lui	a0,0x55555
90001214:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d4>
90001218:	02e54593          	xori	a1,a0,46
9000121c:	46b1a023          	sw	a1,1120(gp)

90001220 <inst_303>:

inst_303:
// rs1_val==0 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x3, 0x0, 0x3, x3, 1124, x4)
90001220:	00000513          	li	a0,0
90001224:	00354593          	xori	a1,a0,3
90001228:	46b1a223          	sw	a1,1124(gp)

9000122c <inst_304>:

inst_304:
// rs1_val==0 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x555, 0x0, 0x555, x3, 1128, x4)
9000122c:	00000513          	li	a0,0
90001230:	55554593          	xori	a1,a0,1365
90001234:	46b1a423          	sw	a1,1128(gp)

90001238 <inst_305>:

inst_305:
// rs1_val==0 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaaa, 0x0, -0x556, x3, 1132, x4)
90001238:	00000513          	li	a0,0
9000123c:	aaa54593          	xori	a1,a0,-1366
90001240:	46b1a623          	sw	a1,1132(gp)

90001244 <inst_306>:

inst_306:
// rs1_val==0 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x5, 0x0, 0x5, x3, 1136, x4)
90001244:	00000513          	li	a0,0
90001248:	00554593          	xori	a1,a0,5
9000124c:	46b1a823          	sw	a1,1136(gp)

90001250 <inst_307>:

inst_307:
// rs1_val==0 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x333, 0x0, 0x333, x3, 1140, x4)
90001250:	00000513          	li	a0,0
90001254:	33354593          	xori	a1,a0,819
90001258:	46b1aa23          	sw	a1,1140(gp)

9000125c <inst_308>:

inst_308:
// rs1_val==0 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x666, 0x0, 0x666, x3, 1144, x4)
9000125c:	00000513          	li	a0,0
90001260:	66654593          	xori	a1,a0,1638
90001264:	46b1ac23          	sw	a1,1144(gp)

90001268 <inst_309>:

inst_309:
// rs1_val==0 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd3, 0x0, -0x2d, x3, 1148, x4)
90001268:	00000513          	li	a0,0
9000126c:	fd354593          	xori	a1,a0,-45
90001270:	46b1ae23          	sw	a1,1148(gp)

90001274 <inst_310>:

inst_310:
// rs1_val==0 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x2d, 0x0, 0x2d, x3, 1152, x4)
90001274:	00000513          	li	a0,0
90001278:	02d54593          	xori	a1,a0,45
9000127c:	48b1a023          	sw	a1,1152(gp)

90001280 <inst_311>:

inst_311:
// rs1_val==858993460 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x33333006, 0x33333334, 0x332, x3, 1156, x4)
90001280:	33333537          	lui	a0,0x33333
90001284:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
90001288:	33254593          	xori	a1,a0,818
9000128c:	48b1a223          	sw	a1,1156(gp)

90001290 <inst_312>:

inst_312:
// rs1_val==858993460 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x33333551, 0x33333334, 0x665, x3, 1160, x4)
90001290:	33333537          	lui	a0,0x33333
90001294:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
90001298:	66554593          	xori	a1,a0,1637
9000129c:	48b1a423          	sw	a1,1160(gp)

900012a0 <inst_313>:

inst_313:
// rs1_val==858993460 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x33333318, 0x33333334, 0x2c, x3, 1164, x4)
900012a0:	33333537          	lui	a0,0x33333
900012a4:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
900012a8:	02c54593          	xori	a1,a0,44
900012ac:	48b1a623          	sw	a1,1164(gp)

900012b0 <inst_314>:

inst_314:
// rs1_val==858993460 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x33333662, 0x33333334, 0x556, x3, 1168, x4)
900012b0:	33333537          	lui	a0,0x33333
900012b4:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
900012b8:	55654593          	xori	a1,a0,1366
900012bc:	48b1a823          	sw	a1,1168(gp)

900012c0 <inst_315>:

inst_315:
// rs1_val==858993460 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xccccc99f, 0x33333334, -0x555, x3, 1172, x4)
900012c0:	33333537          	lui	a0,0x33333
900012c4:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
900012c8:	aab54593          	xori	a1,a0,-1365
900012cc:	48b1aa23          	sw	a1,1172(gp)

900012d0 <inst_316>:

inst_316:
// rs1_val==858993460 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x33333332, 0x33333334, 0x6, x3, 1176, x4)
900012d0:	33333537          	lui	a0,0x33333
900012d4:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
900012d8:	00654593          	xori	a1,a0,6
900012dc:	48b1ac23          	sw	a1,1176(gp)

900012e0 <inst_317>:

inst_317:
// rs1_val==858993460 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x33333000, 0x33333334, 0x334, x3, 1180, x4)
900012e0:	33333537          	lui	a0,0x33333
900012e4:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
900012e8:	33454593          	xori	a1,a0,820
900012ec:	48b1ae23          	sw	a1,1180(gp)

900012f0 <inst_318>:

inst_318:
// rs1_val==858993460 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x33333553, 0x33333334, 0x667, x3, 1184, x4)
900012f0:	33333537          	lui	a0,0x33333
900012f4:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
900012f8:	66754593          	xori	a1,a0,1639
900012fc:	4ab1a023          	sw	a1,1184(gp)

90001300 <inst_319>:

inst_319:
// rs1_val==858993460 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xcccccce0, 0x33333334, -0x2c, x3, 1188, x4)
90001300:	33333537          	lui	a0,0x33333
90001304:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
90001308:	fd454593          	xori	a1,a0,-44
9000130c:	4ab1a223          	sw	a1,1188(gp)

90001310 <inst_320>:

inst_320:
// rs1_val==858993460 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x3333331a, 0x33333334, 0x2e, x3, 1192, x4)
90001310:	33333537          	lui	a0,0x33333
90001314:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
90001318:	02e54593          	xori	a1,a0,46
9000131c:	4ab1a423          	sw	a1,1192(gp)

90001320 <inst_321>:

inst_321:
// rs1_val==1717986919 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x66666664, 0x66666667, 0x3, x3, 1196, x4)
90001320:	66666537          	lui	a0,0x66666
90001324:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001328:	00354593          	xori	a1,a0,3
9000132c:	4ab1a623          	sw	a1,1196(gp)

90001330 <inst_322>:

inst_322:
// rs1_val==1717986919 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x66666332, 0x66666667, 0x555, x3, 1200, x4)
90001330:	66666537          	lui	a0,0x66666
90001334:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001338:	55554593          	xori	a1,a0,1365
9000133c:	4ab1a823          	sw	a1,1200(gp)

90001340 <inst_323>:

inst_323:
// rs1_val==1717986919 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x99999ccd, 0x66666667, -0x556, x3, 1204, x4)
90001340:	66666537          	lui	a0,0x66666
90001344:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001348:	aaa54593          	xori	a1,a0,-1366
9000134c:	4ab1aa23          	sw	a1,1204(gp)

90001350 <inst_324>:

inst_324:
// rs1_val==1717986919 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x66666662, 0x66666667, 0x5, x3, 1208, x4)
90001350:	66666537          	lui	a0,0x66666
90001354:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001358:	00554593          	xori	a1,a0,5
9000135c:	4ab1ac23          	sw	a1,1208(gp)

90001360 <inst_325>:

inst_325:
// rs1_val==1717986919 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x66666554, 0x66666667, 0x333, x3, 1212, x4)
90001360:	66666537          	lui	a0,0x66666
90001364:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001368:	33354593          	xori	a1,a0,819
9000136c:	4ab1ae23          	sw	a1,1212(gp)

90001370 <inst_326>:

inst_326:
// rs1_val==1717986919 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x66666001, 0x66666667, 0x666, x3, 1216, x4)
90001370:	66666537          	lui	a0,0x66666
90001374:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001378:	66654593          	xori	a1,a0,1638
9000137c:	4cb1a023          	sw	a1,1216(gp)

90001380 <inst_327>:

inst_327:
// rs1_val==1717986919 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x999999b4, 0x66666667, -0x2d, x3, 1220, x4)
90001380:	66666537          	lui	a0,0x66666
90001384:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001388:	fd354593          	xori	a1,a0,-45
9000138c:	4cb1a223          	sw	a1,1220(gp)

90001390 <inst_328>:

inst_328:
// rs1_val==1717986919 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x6666664a, 0x66666667, 0x2d, x3, 1224, x4)
90001390:	66666537          	lui	a0,0x66666
90001394:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001398:	02d54593          	xori	a1,a0,45
9000139c:	4cb1a423          	sw	a1,1224(gp)

900013a0 <inst_329>:

inst_329:
// rs1_val==1717986919 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x66666665, 0x66666667, 0x2, x3, 1228, x4)
900013a0:	66666537          	lui	a0,0x66666
900013a4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
900013a8:	00254593          	xori	a1,a0,2
900013ac:	4cb1a623          	sw	a1,1228(gp)

900013b0 <inst_330>:

inst_330:
// rs1_val==1717986919 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x66666333, 0x66666667, 0x554, x3, 1232, x4)
900013b0:	66666537          	lui	a0,0x66666
900013b4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
900013b8:	55454593          	xori	a1,a0,1364
900013bc:	4cb1a823          	sw	a1,1232(gp)

900013c0 <inst_331>:

inst_331:
// rs1_val==1717986919 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x66666667, 0x66666667, 0x0, x3, 1236, x4)
900013c0:	66666537          	lui	a0,0x66666
900013c4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
900013c8:	00054593          	xori	a1,a0,0
900013cc:	4cb1aa23          	sw	a1,1236(gp)

900013d0 <inst_332>:

inst_332:
// rs1_val==1717986919 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x66666663, 0x66666667, 0x4, x3, 1240, x4)
900013d0:	66666537          	lui	a0,0x66666
900013d4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
900013d8:	00454593          	xori	a1,a0,4
900013dc:	4cb1ac23          	sw	a1,1240(gp)

900013e0 <inst_333>:

inst_333:
// rs1_val==1717986919 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x66666555, 0x66666667, 0x332, x3, 1244, x4)
900013e0:	66666537          	lui	a0,0x66666
900013e4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
900013e8:	33254593          	xori	a1,a0,818
900013ec:	4cb1ae23          	sw	a1,1244(gp)

900013f0 <inst_334>:

inst_334:
// rs1_val==1717986919 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x66666002, 0x66666667, 0x665, x3, 1248, x4)
900013f0:	66666537          	lui	a0,0x66666
900013f4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
900013f8:	66554593          	xori	a1,a0,1637
900013fc:	4eb1a023          	sw	a1,1248(gp)

90001400 <inst_335>:

inst_335:
// rs1_val==1717986919 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x6666664b, 0x66666667, 0x2c, x3, 1252, x4)
90001400:	66666537          	lui	a0,0x66666
90001404:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001408:	02c54593          	xori	a1,a0,44
9000140c:	4eb1a223          	sw	a1,1252(gp)

90001410 <inst_336>:

inst_336:
// rs1_val==1717986919 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x66666331, 0x66666667, 0x556, x3, 1256, x4)
90001410:	66666537          	lui	a0,0x66666
90001414:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001418:	55654593          	xori	a1,a0,1366
9000141c:	4eb1a423          	sw	a1,1256(gp)

90001420 <inst_337>:

inst_337:
// rs1_val==1717986919 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x99999ccc, 0x66666667, -0x555, x3, 1260, x4)
90001420:	66666537          	lui	a0,0x66666
90001424:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001428:	aab54593          	xori	a1,a0,-1365
9000142c:	4eb1a623          	sw	a1,1260(gp)

90001430 <inst_338>:

inst_338:
// rs1_val==1717986919 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x66666661, 0x66666667, 0x6, x3, 1264, x4)
90001430:	66666537          	lui	a0,0x66666
90001434:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001438:	00654593          	xori	a1,a0,6
9000143c:	4eb1a823          	sw	a1,1264(gp)

90001440 <inst_339>:

inst_339:
// rs1_val==1717986919 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x66666553, 0x66666667, 0x334, x3, 1268, x4)
90001440:	66666537          	lui	a0,0x66666
90001444:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001448:	33454593          	xori	a1,a0,820
9000144c:	4eb1aa23          	sw	a1,1268(gp)

90001450 <inst_340>:

inst_340:
// rs1_val==1717986919 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x66666000, 0x66666667, 0x667, x3, 1272, x4)
90001450:	66666537          	lui	a0,0x66666
90001454:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001458:	66754593          	xori	a1,a0,1639
9000145c:	4eb1ac23          	sw	a1,1272(gp)

90001460 <inst_341>:

inst_341:
// rs1_val==1717986919 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x999999b3, 0x66666667, -0x2c, x3, 1276, x4)
90001460:	66666537          	lui	a0,0x66666
90001464:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001468:	fd454593          	xori	a1,a0,-44
9000146c:	4eb1ae23          	sw	a1,1276(gp)

90001470 <inst_342>:

inst_342:
// rs1_val==1717986919 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x66666649, 0x66666667, 0x2e, x3, 1280, x4)
90001470:	66666537          	lui	a0,0x66666
90001474:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665e7>
90001478:	02e54593          	xori	a1,a0,46
9000147c:	50b1a023          	sw	a1,1280(gp)

90001480 <inst_343>:

inst_343:
// rs1_val==-46339 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xffff4afe, -0xb503, 0x3, x3, 1284, x4)
90001480:	ffff5537          	lui	a0,0xffff5
90001484:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001488:	00354593          	xori	a1,a0,3
9000148c:	50b1a223          	sw	a1,1284(gp)

90001490 <inst_344>:

inst_344:
// rs1_val==-46339 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4fa8, -0xb503, 0x555, x3, 1288, x4)
90001490:	ffff5537          	lui	a0,0xffff5
90001494:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001498:	55554593          	xori	a1,a0,1365
9000149c:	50b1a423          	sw	a1,1288(gp)

900014a0 <inst_345>:

inst_345:
// rs1_val==-46339 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xb057, -0xb503, -0x556, x3, 1292, x4)
900014a0:	ffff5537          	lui	a0,0xffff5
900014a4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014a8:	aaa54593          	xori	a1,a0,-1366
900014ac:	50b1a623          	sw	a1,1292(gp)

900014b0 <inst_346>:

inst_346:
// rs1_val==-46339 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xffff4af8, -0xb503, 0x5, x3, 1296, x4)
900014b0:	ffff5537          	lui	a0,0xffff5
900014b4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014b8:	00554593          	xori	a1,a0,5
900014bc:	50b1a823          	sw	a1,1296(gp)

900014c0 <inst_347>:

inst_347:
// rs1_val==-46339 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xffff49ce, -0xb503, 0x333, x3, 1300, x4)
900014c0:	ffff5537          	lui	a0,0xffff5
900014c4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014c8:	33354593          	xori	a1,a0,819
900014cc:	50b1aa23          	sw	a1,1300(gp)

900014d0 <inst_348>:

inst_348:
// rs1_val==-46339 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xffff4c9b, -0xb503, 0x666, x3, 1304, x4)
900014d0:	ffff5537          	lui	a0,0xffff5
900014d4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014d8:	66654593          	xori	a1,a0,1638
900014dc:	50b1ac23          	sw	a1,1304(gp)

900014e0 <inst_349>:

inst_349:
// rs1_val==-46339 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xb52e, -0xb503, -0x2d, x3, 1308, x4)
900014e0:	ffff5537          	lui	a0,0xffff5
900014e4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014e8:	fd354593          	xori	a1,a0,-45
900014ec:	50b1ae23          	sw	a1,1308(gp)

900014f0 <inst_350>:

inst_350:
// rs1_val==-46339 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad0, -0xb503, 0x2d, x3, 1312, x4)
900014f0:	ffff5537          	lui	a0,0xffff5
900014f4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014f8:	02d54593          	xori	a1,a0,45
900014fc:	52b1a023          	sw	a1,1312(gp)

90001500 <inst_351>:

inst_351:
// rs1_val==-46339 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xffff4aff, -0xb503, 0x2, x3, 1316, x4)
90001500:	ffff5537          	lui	a0,0xffff5
90001504:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001508:	00254593          	xori	a1,a0,2
9000150c:	52b1a223          	sw	a1,1316(gp)

90001510 <inst_352>:

inst_352:
// rs1_val==-46339 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xffff4fa9, -0xb503, 0x554, x3, 1320, x4)
90001510:	ffff5537          	lui	a0,0xffff5
90001514:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001518:	55454593          	xori	a1,a0,1364
9000151c:	52b1a423          	sw	a1,1320(gp)

90001520 <inst_353>:

inst_353:
// rs1_val==-46339 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xffff4afd, -0xb503, 0x0, x3, 1324, x4)
90001520:	ffff5537          	lui	a0,0xffff5
90001524:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001528:	00054593          	xori	a1,a0,0
9000152c:	52b1a623          	sw	a1,1324(gp)

90001530 <inst_354>:

inst_354:
// rs1_val==-46339 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xffff4af9, -0xb503, 0x4, x3, 1328, x4)
90001530:	ffff5537          	lui	a0,0xffff5
90001534:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001538:	00454593          	xori	a1,a0,4
9000153c:	52b1a823          	sw	a1,1328(gp)

90001540 <inst_355>:

inst_355:
// rs1_val==-46339 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xffff49cf, -0xb503, 0x332, x3, 1332, x4)
90001540:	ffff5537          	lui	a0,0xffff5
90001544:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001548:	33254593          	xori	a1,a0,818
9000154c:	52b1aa23          	sw	a1,1332(gp)

90001550 <inst_356>:

inst_356:
// rs1_val==-46339 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xffff4c98, -0xb503, 0x665, x3, 1336, x4)
90001550:	ffff5537          	lui	a0,0xffff5
90001554:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001558:	66554593          	xori	a1,a0,1637
9000155c:	52b1ac23          	sw	a1,1336(gp)

90001560 <inst_357>:

inst_357:
// rs1_val==-46339 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad1, -0xb503, 0x2c, x3, 1340, x4)
90001560:	ffff5537          	lui	a0,0xffff5
90001564:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001568:	02c54593          	xori	a1,a0,44
9000156c:	52b1ae23          	sw	a1,1340(gp)

90001570 <inst_358>:

inst_358:
// rs1_val==-46339 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4fab, -0xb503, 0x556, x3, 1344, x4)
90001570:	ffff5537          	lui	a0,0xffff5
90001574:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001578:	55654593          	xori	a1,a0,1366
9000157c:	54b1a023          	sw	a1,1344(gp)

90001580 <inst_359>:

inst_359:
// rs1_val==-46339 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xb056, -0xb503, -0x555, x3, 1348, x4)
90001580:	ffff5537          	lui	a0,0xffff5
90001584:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001588:	aab54593          	xori	a1,a0,-1365
9000158c:	54b1a223          	sw	a1,1348(gp)

90001590 <inst_360>:

inst_360:
// rs1_val==-46339 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xffff4afb, -0xb503, 0x6, x3, 1352, x4)
90001590:	ffff5537          	lui	a0,0xffff5
90001594:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001598:	00654593          	xori	a1,a0,6
9000159c:	54b1a423          	sw	a1,1352(gp)

900015a0 <inst_361>:

inst_361:
// rs1_val==-46339 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xffff49c9, -0xb503, 0x334, x3, 1356, x4)
900015a0:	ffff5537          	lui	a0,0xffff5
900015a4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900015a8:	33454593          	xori	a1,a0,820
900015ac:	54b1a623          	sw	a1,1356(gp)

900015b0 <inst_362>:

inst_362:
// rs1_val==-46339 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xffff4c9a, -0xb503, 0x667, x3, 1360, x4)
900015b0:	ffff5537          	lui	a0,0xffff5
900015b4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900015b8:	66754593          	xori	a1,a0,1639
900015bc:	54b1a823          	sw	a1,1360(gp)

900015c0 <inst_363>:

inst_363:
// rs1_val==-46339 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xb529, -0xb503, -0x2c, x3, 1364, x4)
900015c0:	ffff5537          	lui	a0,0xffff5
900015c4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900015c8:	fd454593          	xori	a1,a0,-44
900015cc:	54b1aa23          	sw	a1,1364(gp)

900015d0 <inst_364>:

inst_364:
// rs1_val==-46339 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xffff4ad3, -0xb503, 0x2e, x3, 1368, x4)
900015d0:	ffff5537          	lui	a0,0xffff5
900015d4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900015d8:	02e54593          	xori	a1,a0,46
900015dc:	54b1ac23          	sw	a1,1368(gp)

900015e0 <inst_365>:

inst_365:
// rs1_val==46341 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xb506, 0xb505, 0x3, x3, 1372, x4)
900015e0:	0000b537          	lui	a0,0xb
900015e4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
900015e8:	00354593          	xori	a1,a0,3
900015ec:	54b1ae23          	sw	a1,1372(gp)

900015f0 <inst_366>:

inst_366:
// rs1_val==46341 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xb050, 0xb505, 0x555, x3, 1376, x4)
900015f0:	0000b537          	lui	a0,0xb
900015f4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
900015f8:	55554593          	xori	a1,a0,1365
900015fc:	56b1a023          	sw	a1,1376(gp)

90001600 <inst_367>:

inst_367:
// rs1_val==46341 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4faf, 0xb505, -0x556, x3, 1380, x4)
90001600:	0000b537          	lui	a0,0xb
90001604:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001608:	aaa54593          	xori	a1,a0,-1366
9000160c:	56b1a223          	sw	a1,1380(gp)

90001610 <inst_368>:

inst_368:
// rs1_val==46341 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xb500, 0xb505, 0x5, x3, 1384, x4)
90001610:	0000b537          	lui	a0,0xb
90001614:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001618:	00554593          	xori	a1,a0,5
9000161c:	56b1a423          	sw	a1,1384(gp)

90001620 <inst_369>:

inst_369:
// rs1_val==46341 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xb636, 0xb505, 0x333, x3, 1388, x4)
90001620:	0000b537          	lui	a0,0xb
90001624:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001628:	33354593          	xori	a1,a0,819
9000162c:	56b1a623          	sw	a1,1388(gp)

90001630 <inst_370>:

inst_370:
// rs1_val==46341 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xb363, 0xb505, 0x666, x3, 1392, x4)
90001630:	0000b537          	lui	a0,0xb
90001634:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001638:	66654593          	xori	a1,a0,1638
9000163c:	56b1a823          	sw	a1,1392(gp)

90001640 <inst_371>:

inst_371:
// rs1_val==46341 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad6, 0xb505, -0x2d, x3, 1396, x4)
90001640:	0000b537          	lui	a0,0xb
90001644:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001648:	fd354593          	xori	a1,a0,-45
9000164c:	56b1aa23          	sw	a1,1396(gp)

90001650 <inst_372>:

inst_372:
// rs1_val==46341 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xb528, 0xb505, 0x2d, x3, 1400, x4)
90001650:	0000b537          	lui	a0,0xb
90001654:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001658:	02d54593          	xori	a1,a0,45
9000165c:	56b1ac23          	sw	a1,1400(gp)

90001660 <inst_373>:

inst_373:
// rs1_val==46341 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xb507, 0xb505, 0x2, x3, 1404, x4)
90001660:	0000b537          	lui	a0,0xb
90001664:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001668:	00254593          	xori	a1,a0,2
9000166c:	56b1ae23          	sw	a1,1404(gp)

90001670 <inst_374>:

inst_374:
// rs1_val==46341 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xb051, 0xb505, 0x554, x3, 1408, x4)
90001670:	0000b537          	lui	a0,0xb
90001674:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001678:	55454593          	xori	a1,a0,1364
9000167c:	58b1a023          	sw	a1,1408(gp)

90001680 <inst_375>:

inst_375:
// rs1_val==46341 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xb505, 0xb505, 0x0, x3, 1412, x4)
90001680:	0000b537          	lui	a0,0xb
90001684:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001688:	00054593          	xori	a1,a0,0
9000168c:	58b1a223          	sw	a1,1412(gp)

90001690 <inst_376>:

inst_376:
// rs1_val==46341 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xb501, 0xb505, 0x4, x3, 1416, x4)
90001690:	0000b537          	lui	a0,0xb
90001694:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001698:	00454593          	xori	a1,a0,4
9000169c:	58b1a423          	sw	a1,1416(gp)

900016a0 <inst_377>:

inst_377:
// rs1_val==46341 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xb637, 0xb505, 0x332, x3, 1420, x4)
900016a0:	0000b537          	lui	a0,0xb
900016a4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
900016a8:	33254593          	xori	a1,a0,818
900016ac:	58b1a623          	sw	a1,1420(gp)

900016b0 <inst_378>:

inst_378:
// rs1_val==46341 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xb360, 0xb505, 0x665, x3, 1424, x4)
900016b0:	0000b537          	lui	a0,0xb
900016b4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
900016b8:	66554593          	xori	a1,a0,1637
900016bc:	58b1a823          	sw	a1,1424(gp)

900016c0 <inst_379>:

inst_379:
// rs1_val==46341 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xb529, 0xb505, 0x2c, x3, 1428, x4)
900016c0:	0000b537          	lui	a0,0xb
900016c4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
900016c8:	02c54593          	xori	a1,a0,44
900016cc:	58b1aa23          	sw	a1,1428(gp)

900016d0 <inst_380>:

inst_380:
// rs1_val==46341 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xb053, 0xb505, 0x556, x3, 1432, x4)
900016d0:	0000b537          	lui	a0,0xb
900016d4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
900016d8:	55654593          	xori	a1,a0,1366
900016dc:	58b1ac23          	sw	a1,1432(gp)

900016e0 <inst_381>:

inst_381:
// rs1_val==46341 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4fae, 0xb505, -0x555, x3, 1436, x4)
900016e0:	0000b537          	lui	a0,0xb
900016e4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
900016e8:	aab54593          	xori	a1,a0,-1365
900016ec:	58b1ae23          	sw	a1,1436(gp)

900016f0 <inst_382>:

inst_382:
// rs1_val==46341 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xb503, 0xb505, 0x6, x3, 1440, x4)
900016f0:	0000b537          	lui	a0,0xb
900016f4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
900016f8:	00654593          	xori	a1,a0,6
900016fc:	5ab1a023          	sw	a1,1440(gp)

90001700 <inst_383>:

inst_383:
// rs1_val==46341 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xb631, 0xb505, 0x334, x3, 1444, x4)
90001700:	0000b537          	lui	a0,0xb
90001704:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001708:	33454593          	xori	a1,a0,820
9000170c:	5ab1a223          	sw	a1,1444(gp)

90001710 <inst_384>:

inst_384:
// rs1_val==46341 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xb362, 0xb505, 0x667, x3, 1448, x4)
90001710:	0000b537          	lui	a0,0xb
90001714:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001718:	66754593          	xori	a1,a0,1639
9000171c:	5ab1a423          	sw	a1,1448(gp)

90001720 <inst_385>:

inst_385:
// rs1_val==46341 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad1, 0xb505, -0x2c, x3, 1452, x4)
90001720:	0000b537          	lui	a0,0xb
90001724:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001728:	fd454593          	xori	a1,a0,-44
9000172c:	5ab1a623          	sw	a1,1452(gp)

90001730 <inst_386>:

inst_386:
// rs1_val==46341 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xb52b, 0xb505, 0x2e, x3, 1456, x4)
90001730:	0000b537          	lui	a0,0xb
90001734:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb485>
90001738:	02e54593          	xori	a1,a0,46
9000173c:	5ab1a823          	sw	a1,1456(gp)

90001740 <inst_387>:

inst_387:
// rs1_val==0 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x2, 0x0, 0x2, x3, 1460, x4)
90001740:	00000513          	li	a0,0
90001744:	00254593          	xori	a1,a0,2
90001748:	5ab1aa23          	sw	a1,1460(gp)

9000174c <inst_388>:

inst_388:
// rs1_val==0 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x554, 0x0, 0x554, x3, 1464, x4)
9000174c:	00000513          	li	a0,0
90001750:	55454593          	xori	a1,a0,1364
90001754:	5ab1ac23          	sw	a1,1464(gp)

90001758 <inst_389>:

inst_389:
// rs1_val==0 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x0, 0x0, 0x0, x3, 1468, x4)
90001758:	00000513          	li	a0,0
9000175c:	00054593          	xori	a1,a0,0
90001760:	5ab1ae23          	sw	a1,1468(gp)

90001764 <inst_390>:

inst_390:
// rs1_val==0 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x4, 0x0, 0x4, x3, 1472, x4)
90001764:	00000513          	li	a0,0
90001768:	00454593          	xori	a1,a0,4
9000176c:	5cb1a023          	sw	a1,1472(gp)

90001770 <inst_391>:

inst_391:
// rs1_val==0 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x332, 0x0, 0x332, x3, 1476, x4)
90001770:	00000513          	li	a0,0
90001774:	33254593          	xori	a1,a0,818
90001778:	5cb1a223          	sw	a1,1476(gp)

9000177c <inst_392>:

inst_392:
// rs1_val==0 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x665, 0x0, 0x665, x3, 1480, x4)
9000177c:	00000513          	li	a0,0
90001780:	66554593          	xori	a1,a0,1637
90001784:	5cb1a423          	sw	a1,1480(gp)

90001788 <inst_393>:

inst_393:
// rs1_val==0 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2c, 0x0, 0x2c, x3, 1484, x4)
90001788:	00000513          	li	a0,0
9000178c:	02c54593          	xori	a1,a0,44
90001790:	5cb1a623          	sw	a1,1484(gp)

90001794 <inst_394>:

inst_394:
// rs1_val==0 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x556, 0x0, 0x556, x3, 1488, x4)
90001794:	00000513          	li	a0,0
90001798:	55654593          	xori	a1,a0,1366
9000179c:	5cb1a823          	sw	a1,1488(gp)

900017a0 <inst_395>:

inst_395:
// rs1_val==0 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaab, 0x0, -0x555, x3, 1492, x4)
900017a0:	00000513          	li	a0,0
900017a4:	aab54593          	xori	a1,a0,-1365
900017a8:	5cb1aa23          	sw	a1,1492(gp)

900017ac <inst_396>:

inst_396:
// rs1_val==0 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x6, 0x0, 0x6, x3, 1496, x4)
900017ac:	00000513          	li	a0,0
900017b0:	00654593          	xori	a1,a0,6
900017b4:	5cb1ac23          	sw	a1,1496(gp)

900017b8 <inst_397>:

inst_397:
// rs1_val==0 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x334, 0x0, 0x334, x3, 1500, x4)
900017b8:	00000513          	li	a0,0
900017bc:	33454593          	xori	a1,a0,820
900017c0:	5cb1ae23          	sw	a1,1500(gp)

900017c4 <inst_398>:

inst_398:
// rs1_val==0 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x667, 0x0, 0x667, x3, 1504, x4)
900017c4:	00000513          	li	a0,0
900017c8:	66754593          	xori	a1,a0,1639
900017cc:	5eb1a023          	sw	a1,1504(gp)

900017d0 <inst_399>:

inst_399:
// rs1_val==0 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd4, 0x0, -0x2c, x3, 1508, x4)
900017d0:	00000513          	li	a0,0
900017d4:	fd454593          	xori	a1,a0,-44
900017d8:	5eb1a223          	sw	a1,1508(gp)

900017dc <inst_400>:

inst_400:
// rs1_val==0 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2e, 0x0, 0x2e, x3, 1512, x4)
900017dc:	00000513          	li	a0,0
900017e0:	02e54593          	xori	a1,a0,46
900017e4:	5eb1a423          	sw	a1,1512(gp)

900017e8 <inst_401>:

inst_401:
// rs1_val==4 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x7, 0x4, 0x3, x3, 1516, x4)
900017e8:	00400513          	li	a0,4
900017ec:	00354593          	xori	a1,a0,3
900017f0:	5eb1a623          	sw	a1,1516(gp)

900017f4 <inst_402>:

inst_402:
// rs1_val==4 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x551, 0x4, 0x555, x3, 1520, x4)
900017f4:	00400513          	li	a0,4
900017f8:	55554593          	xori	a1,a0,1365
900017fc:	5eb1a823          	sw	a1,1520(gp)

90001800 <inst_403>:

inst_403:
// rs1_val==4 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaae, 0x4, -0x556, x3, 1524, x4)
90001800:	00400513          	li	a0,4
90001804:	aaa54593          	xori	a1,a0,-1366
90001808:	5eb1aa23          	sw	a1,1524(gp)

9000180c <inst_404>:

inst_404:
// rs1_val==4 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x1, 0x4, 0x5, x3, 1528, x4)
9000180c:	00400513          	li	a0,4
90001810:	00554593          	xori	a1,a0,5
90001814:	5eb1ac23          	sw	a1,1528(gp)

90001818 <inst_405>:

inst_405:
// rs1_val==4 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x337, 0x4, 0x333, x3, 1532, x4)
90001818:	00400513          	li	a0,4
9000181c:	33354593          	xori	a1,a0,819
90001820:	5eb1ae23          	sw	a1,1532(gp)

90001824 <inst_406>:

inst_406:
// rs1_val==4 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x662, 0x4, 0x666, x3, 1536, x4)
90001824:	00400513          	li	a0,4
90001828:	66654593          	xori	a1,a0,1638
9000182c:	60b1a023          	sw	a1,1536(gp)

90001830 <inst_407>:

inst_407:
// rs1_val==4 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd7, 0x4, -0x2d, x3, 1540, x4)
90001830:	00400513          	li	a0,4
90001834:	fd354593          	xori	a1,a0,-45
90001838:	60b1a223          	sw	a1,1540(gp)

9000183c <inst_408>:

inst_408:
// rs1_val==4 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x29, 0x4, 0x2d, x3, 1544, x4)
9000183c:	00400513          	li	a0,4
90001840:	02d54593          	xori	a1,a0,45
90001844:	60b1a423          	sw	a1,1544(gp)

90001848 <inst_409>:

inst_409:
// rs1_val==4 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x6, 0x4, 0x2, x3, 1548, x4)
90001848:	00400513          	li	a0,4
9000184c:	00254593          	xori	a1,a0,2
90001850:	60b1a623          	sw	a1,1548(gp)

90001854 <inst_410>:

inst_410:
// rs1_val==4 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x550, 0x4, 0x554, x3, 1552, x4)
90001854:	00400513          	li	a0,4
90001858:	55454593          	xori	a1,a0,1364
9000185c:	60b1a823          	sw	a1,1552(gp)

90001860 <inst_411>:

inst_411:
// rs1_val==4 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x0, 0x4, 0x4, x3, 1556, x4)
90001860:	00400513          	li	a0,4
90001864:	00454593          	xori	a1,a0,4
90001868:	60b1aa23          	sw	a1,1556(gp)

9000186c <inst_412>:

inst_412:
// rs1_val==4 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x336, 0x4, 0x332, x3, 1560, x4)
9000186c:	00400513          	li	a0,4
90001870:	33254593          	xori	a1,a0,818
90001874:	60b1ac23          	sw	a1,1560(gp)

90001878 <inst_413>:

inst_413:
// rs1_val==4 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x661, 0x4, 0x665, x3, 1564, x4)
90001878:	00400513          	li	a0,4
9000187c:	66554593          	xori	a1,a0,1637
90001880:	60b1ae23          	sw	a1,1564(gp)

90001884 <inst_414>:

inst_414:
// rs1_val==4 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x28, 0x4, 0x2c, x3, 1568, x4)
90001884:	00400513          	li	a0,4
90001888:	02c54593          	xori	a1,a0,44
9000188c:	62b1a023          	sw	a1,1568(gp)

90001890 <inst_415>:

inst_415:
// rs1_val==4 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x552, 0x4, 0x556, x3, 1572, x4)
90001890:	00400513          	li	a0,4
90001894:	55654593          	xori	a1,a0,1366
90001898:	62b1a223          	sw	a1,1572(gp)

9000189c <inst_416>:

inst_416:
// rs1_val==4 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaaf, 0x4, -0x555, x3, 1576, x4)
9000189c:	00400513          	li	a0,4
900018a0:	aab54593          	xori	a1,a0,-1365
900018a4:	62b1a423          	sw	a1,1576(gp)

900018a8 <inst_417>:

inst_417:
// rs1_val==4 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x2, 0x4, 0x6, x3, 1580, x4)
900018a8:	00400513          	li	a0,4
900018ac:	00654593          	xori	a1,a0,6
900018b0:	62b1a623          	sw	a1,1580(gp)

900018b4 <inst_418>:

inst_418:
// rs1_val==4 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x330, 0x4, 0x334, x3, 1584, x4)
900018b4:	00400513          	li	a0,4
900018b8:	33454593          	xori	a1,a0,820
900018bc:	62b1a823          	sw	a1,1584(gp)

900018c0 <inst_419>:

inst_419:
// rs1_val==4 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x663, 0x4, 0x667, x3, 1588, x4)
900018c0:	00400513          	li	a0,4
900018c4:	66754593          	xori	a1,a0,1639
900018c8:	62b1aa23          	sw	a1,1588(gp)

900018cc <inst_420>:

inst_420:
// rs1_val==4 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd0, 0x4, -0x2c, x3, 1592, x4)
900018cc:	00400513          	li	a0,4
900018d0:	fd454593          	xori	a1,a0,-44
900018d4:	62b1ac23          	sw	a1,1592(gp)

900018d8 <inst_421>:

inst_421:
// rs1_val==4 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2a, 0x4, 0x2e, x3, 1596, x4)
900018d8:	00400513          	li	a0,4
900018dc:	02e54593          	xori	a1,a0,46
900018e0:	62b1ae23          	sw	a1,1596(gp)

900018e4 <inst_422>:

inst_422:
// rs1_val==858993458 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x33333331, 0x33333332, 0x3, x3, 1600, x4)
900018e4:	33333537          	lui	a0,0x33333
900018e8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
900018ec:	00354593          	xori	a1,a0,3
900018f0:	64b1a023          	sw	a1,1600(gp)

900018f4 <inst_423>:

inst_423:
// rs1_val==858993458 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x33333667, 0x33333332, 0x555, x3, 1604, x4)
900018f4:	33333537          	lui	a0,0x33333
900018f8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
900018fc:	55554593          	xori	a1,a0,1365
90001900:	64b1a223          	sw	a1,1604(gp)

90001904 <inst_424>:

inst_424:
// rs1_val==858993458 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xccccc998, 0x33333332, -0x556, x3, 1608, x4)
90001904:	33333537          	lui	a0,0x33333
90001908:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000190c:	aaa54593          	xori	a1,a0,-1366
90001910:	64b1a423          	sw	a1,1608(gp)

90001914 <inst_425>:

inst_425:
// rs1_val==858993458 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x33333337, 0x33333332, 0x5, x3, 1612, x4)
90001914:	33333537          	lui	a0,0x33333
90001918:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000191c:	00554593          	xori	a1,a0,5
90001920:	64b1a623          	sw	a1,1612(gp)

90001924 <inst_426>:

inst_426:
// rs1_val==858993458 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x33333001, 0x33333332, 0x333, x3, 1616, x4)
90001924:	33333537          	lui	a0,0x33333
90001928:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000192c:	33354593          	xori	a1,a0,819
90001930:	64b1a823          	sw	a1,1616(gp)

90001934 <inst_427>:

inst_427:
// rs1_val==858993458 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x33333554, 0x33333332, 0x666, x3, 1620, x4)
90001934:	33333537          	lui	a0,0x33333
90001938:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000193c:	66654593          	xori	a1,a0,1638
90001940:	64b1aa23          	sw	a1,1620(gp)

90001944 <inst_428>:

inst_428:
// rs1_val==858993458 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xcccccce1, 0x33333332, -0x2d, x3, 1624, x4)
90001944:	33333537          	lui	a0,0x33333
90001948:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000194c:	fd354593          	xori	a1,a0,-45
90001950:	64b1ac23          	sw	a1,1624(gp)

90001954 <inst_429>:

inst_429:
// rs1_val==858993458 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x3333331f, 0x33333332, 0x2d, x3, 1628, x4)
90001954:	33333537          	lui	a0,0x33333
90001958:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000195c:	02d54593          	xori	a1,a0,45
90001960:	64b1ae23          	sw	a1,1628(gp)

90001964 <inst_430>:

inst_430:
// rs1_val==858993458 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x33333330, 0x33333332, 0x2, x3, 1632, x4)
90001964:	33333537          	lui	a0,0x33333
90001968:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000196c:	00254593          	xori	a1,a0,2
90001970:	66b1a023          	sw	a1,1632(gp)

90001974 <inst_431>:

inst_431:
// rs1_val==858993458 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x33333666, 0x33333332, 0x554, x3, 1636, x4)
90001974:	33333537          	lui	a0,0x33333
90001978:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000197c:	55454593          	xori	a1,a0,1364
90001980:	66b1a223          	sw	a1,1636(gp)

90001984 <inst_432>:

inst_432:
// rs1_val==858993458 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x33333332, 0x33333332, 0x0, x3, 1640, x4)
90001984:	33333537          	lui	a0,0x33333
90001988:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000198c:	00054593          	xori	a1,a0,0
90001990:	66b1a423          	sw	a1,1640(gp)

90001994 <inst_433>:

inst_433:
// rs1_val==858993458 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x33333336, 0x33333332, 0x4, x3, 1644, x4)
90001994:	33333537          	lui	a0,0x33333
90001998:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
9000199c:	00454593          	xori	a1,a0,4
900019a0:	66b1a623          	sw	a1,1644(gp)

900019a4 <inst_434>:

inst_434:
// rs1_val==858993458 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x33333000, 0x33333332, 0x332, x3, 1648, x4)
900019a4:	33333537          	lui	a0,0x33333
900019a8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
900019ac:	33254593          	xori	a1,a0,818
900019b0:	66b1a823          	sw	a1,1648(gp)

900019b4 <inst_435>:

inst_435:
// rs1_val==858993458 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x33333557, 0x33333332, 0x665, x3, 1652, x4)
900019b4:	33333537          	lui	a0,0x33333
900019b8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
900019bc:	66554593          	xori	a1,a0,1637
900019c0:	66b1aa23          	sw	a1,1652(gp)

900019c4 <inst_436>:

inst_436:
// rs1_val==858993458 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x3333331e, 0x33333332, 0x2c, x3, 1656, x4)
900019c4:	33333537          	lui	a0,0x33333
900019c8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
900019cc:	02c54593          	xori	a1,a0,44
900019d0:	66b1ac23          	sw	a1,1656(gp)

900019d4 <inst_437>:

inst_437:
// rs1_val==858993458 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x33333664, 0x33333332, 0x556, x3, 1660, x4)
900019d4:	33333537          	lui	a0,0x33333
900019d8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
900019dc:	55654593          	xori	a1,a0,1366
900019e0:	66b1ae23          	sw	a1,1660(gp)

900019e4 <inst_438>:

inst_438:
// rs1_val==858993458 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xccccc999, 0x33333332, -0x555, x3, 1664, x4)
900019e4:	33333537          	lui	a0,0x33333
900019e8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
900019ec:	aab54593          	xori	a1,a0,-1365
900019f0:	68b1a023          	sw	a1,1664(gp)

900019f4 <inst_439>:

inst_439:
// rs1_val==858993458 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x33333334, 0x33333332, 0x6, x3, 1668, x4)
900019f4:	33333537          	lui	a0,0x33333
900019f8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
900019fc:	00654593          	xori	a1,a0,6
90001a00:	68b1a223          	sw	a1,1668(gp)

90001a04 <inst_440>:

inst_440:
// rs1_val==858993458 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x33333006, 0x33333332, 0x334, x3, 1672, x4)
90001a04:	33333537          	lui	a0,0x33333
90001a08:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
90001a0c:	33454593          	xori	a1,a0,820
90001a10:	68b1a423          	sw	a1,1672(gp)

90001a14 <inst_441>:

inst_441:
// rs1_val==858993458 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x33333555, 0x33333332, 0x667, x3, 1676, x4)
90001a14:	33333537          	lui	a0,0x33333
90001a18:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
90001a1c:	66754593          	xori	a1,a0,1639
90001a20:	68b1a623          	sw	a1,1676(gp)

90001a24 <inst_442>:

inst_442:
// rs1_val==858993458 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xcccccce6, 0x33333332, -0x2c, x3, 1680, x4)
90001a24:	33333537          	lui	a0,0x33333
90001a28:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
90001a2c:	fd454593          	xori	a1,a0,-44
90001a30:	68b1a823          	sw	a1,1680(gp)

90001a34 <inst_443>:

inst_443:
// rs1_val==858993458 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x3333331c, 0x33333332, 0x2e, x3, 1684, x4)
90001a34:	33333537          	lui	a0,0x33333
90001a38:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b2>
90001a3c:	02e54593          	xori	a1,a0,46
90001a40:	68b1aa23          	sw	a1,1684(gp)

90001a44 <inst_444>:

inst_444:
// rs1_val==1717986917 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x66666666, 0x66666665, 0x3, x3, 1688, x4)
90001a44:	66666537          	lui	a0,0x66666
90001a48:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001a4c:	00354593          	xori	a1,a0,3
90001a50:	68b1ac23          	sw	a1,1688(gp)

90001a54 <inst_445>:

inst_445:
// rs1_val==1717986917 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x66666330, 0x66666665, 0x555, x3, 1692, x4)
90001a54:	66666537          	lui	a0,0x66666
90001a58:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001a5c:	55554593          	xori	a1,a0,1365
90001a60:	68b1ae23          	sw	a1,1692(gp)

90001a64 <inst_446>:

inst_446:
// rs1_val==1717986917 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x99999ccf, 0x66666665, -0x556, x3, 1696, x4)
90001a64:	66666537          	lui	a0,0x66666
90001a68:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001a6c:	aaa54593          	xori	a1,a0,-1366
90001a70:	6ab1a023          	sw	a1,1696(gp)

90001a74 <inst_447>:

inst_447:
// rs1_val==1717986917 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x66666660, 0x66666665, 0x5, x3, 1700, x4)
90001a74:	66666537          	lui	a0,0x66666
90001a78:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001a7c:	00554593          	xori	a1,a0,5
90001a80:	6ab1a223          	sw	a1,1700(gp)

90001a84 <inst_448>:

inst_448:
// rs1_val==1717986917 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x66666556, 0x66666665, 0x333, x3, 1704, x4)
90001a84:	66666537          	lui	a0,0x66666
90001a88:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001a8c:	33354593          	xori	a1,a0,819
90001a90:	6ab1a423          	sw	a1,1704(gp)

90001a94 <inst_449>:

inst_449:
// rs1_val==1717986917 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x66666003, 0x66666665, 0x666, x3, 1708, x4)
90001a94:	66666537          	lui	a0,0x66666
90001a98:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001a9c:	66654593          	xori	a1,a0,1638
90001aa0:	6ab1a623          	sw	a1,1708(gp)

90001aa4 <inst_450>:

inst_450:
// rs1_val==1717986917 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x999999b6, 0x66666665, -0x2d, x3, 1712, x4)
90001aa4:	66666537          	lui	a0,0x66666
90001aa8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001aac:	fd354593          	xori	a1,a0,-45
90001ab0:	6ab1a823          	sw	a1,1712(gp)

90001ab4 <inst_451>:

inst_451:
// rs1_val==1717986917 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x66666648, 0x66666665, 0x2d, x3, 1716, x4)
90001ab4:	66666537          	lui	a0,0x66666
90001ab8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001abc:	02d54593          	xori	a1,a0,45
90001ac0:	6ab1aa23          	sw	a1,1716(gp)

90001ac4 <inst_452>:

inst_452:
// rs1_val==1717986917 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x66666667, 0x66666665, 0x2, x3, 1720, x4)
90001ac4:	66666537          	lui	a0,0x66666
90001ac8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001acc:	00254593          	xori	a1,a0,2
90001ad0:	6ab1ac23          	sw	a1,1720(gp)

90001ad4 <inst_453>:

inst_453:
// rs1_val==1717986917 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x66666331, 0x66666665, 0x554, x3, 1724, x4)
90001ad4:	66666537          	lui	a0,0x66666
90001ad8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001adc:	55454593          	xori	a1,a0,1364
90001ae0:	6ab1ae23          	sw	a1,1724(gp)

90001ae4 <inst_454>:

inst_454:
// rs1_val==1717986917 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x66666665, 0x66666665, 0x0, x3, 1728, x4)
90001ae4:	66666537          	lui	a0,0x66666
90001ae8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001aec:	00054593          	xori	a1,a0,0
90001af0:	6cb1a023          	sw	a1,1728(gp)

90001af4 <inst_455>:

inst_455:
// rs1_val==1717986917 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x66666661, 0x66666665, 0x4, x3, 1732, x4)
90001af4:	66666537          	lui	a0,0x66666
90001af8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001afc:	00454593          	xori	a1,a0,4
90001b00:	6cb1a223          	sw	a1,1732(gp)

90001b04 <inst_456>:

inst_456:
// rs1_val==1717986917 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x66666557, 0x66666665, 0x332, x3, 1736, x4)
90001b04:	66666537          	lui	a0,0x66666
90001b08:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b0c:	33254593          	xori	a1,a0,818
90001b10:	6cb1a423          	sw	a1,1736(gp)

90001b14 <inst_457>:

inst_457:
// rs1_val==1717986917 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x66666000, 0x66666665, 0x665, x3, 1740, x4)
90001b14:	66666537          	lui	a0,0x66666
90001b18:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b1c:	66554593          	xori	a1,a0,1637
90001b20:	6cb1a623          	sw	a1,1740(gp)

90001b24 <inst_458>:

inst_458:
// rs1_val==1717986917 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x66666649, 0x66666665, 0x2c, x3, 1744, x4)
90001b24:	66666537          	lui	a0,0x66666
90001b28:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b2c:	02c54593          	xori	a1,a0,44
90001b30:	6cb1a823          	sw	a1,1744(gp)

90001b34 <inst_459>:

inst_459:
// rs1_val==1717986917 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x66666333, 0x66666665, 0x556, x3, 1748, x4)
90001b34:	66666537          	lui	a0,0x66666
90001b38:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b3c:	55654593          	xori	a1,a0,1366
90001b40:	6cb1aa23          	sw	a1,1748(gp)

90001b44 <inst_460>:

inst_460:
// rs1_val==1717986917 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x99999cce, 0x66666665, -0x555, x3, 1752, x4)
90001b44:	66666537          	lui	a0,0x66666
90001b48:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b4c:	aab54593          	xori	a1,a0,-1365
90001b50:	6cb1ac23          	sw	a1,1752(gp)

90001b54 <inst_461>:

inst_461:
// rs1_val==1717986917 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x66666663, 0x66666665, 0x6, x3, 1756, x4)
90001b54:	66666537          	lui	a0,0x66666
90001b58:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b5c:	00654593          	xori	a1,a0,6
90001b60:	6cb1ae23          	sw	a1,1756(gp)

90001b64 <inst_462>:

inst_462:
// rs1_val==1717986917 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x66666551, 0x66666665, 0x334, x3, 1760, x4)
90001b64:	66666537          	lui	a0,0x66666
90001b68:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b6c:	33454593          	xori	a1,a0,820
90001b70:	6eb1a023          	sw	a1,1760(gp)

90001b74 <inst_463>:

inst_463:
// rs1_val==1717986917 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x66666002, 0x66666665, 0x667, x3, 1764, x4)
90001b74:	66666537          	lui	a0,0x66666
90001b78:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b7c:	66754593          	xori	a1,a0,1639
90001b80:	6eb1a223          	sw	a1,1764(gp)

90001b84 <inst_464>:

inst_464:
// rs1_val==1717986917 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x999999b1, 0x66666665, -0x2c, x3, 1768, x4)
90001b84:	66666537          	lui	a0,0x66666
90001b88:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b8c:	fd454593          	xori	a1,a0,-44
90001b90:	6eb1a423          	sw	a1,1768(gp)

90001b94 <inst_465>:

inst_465:
// rs1_val==1717986917 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x6666664b, 0x66666665, 0x2e, x3, 1772, x4)
90001b94:	66666537          	lui	a0,0x66666
90001b98:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e5>
90001b9c:	02e54593          	xori	a1,a0,46
90001ba0:	6eb1a623          	sw	a1,1772(gp)

90001ba4 <inst_466>:

inst_466:
// rs1_val==46339 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xb500, 0xb503, 0x3, x3, 1776, x4)
90001ba4:	0000b537          	lui	a0,0xb
90001ba8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001bac:	00354593          	xori	a1,a0,3
90001bb0:	6eb1a823          	sw	a1,1776(gp)

90001bb4 <inst_467>:

inst_467:
// rs1_val==46339 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xb056, 0xb503, 0x555, x3, 1780, x4)
90001bb4:	0000b537          	lui	a0,0xb
90001bb8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001bbc:	55554593          	xori	a1,a0,1365
90001bc0:	6eb1aa23          	sw	a1,1780(gp)

90001bc4 <inst_468>:

inst_468:
// rs1_val==46339 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4fa9, 0xb503, -0x556, x3, 1784, x4)
90001bc4:	0000b537          	lui	a0,0xb
90001bc8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001bcc:	aaa54593          	xori	a1,a0,-1366
90001bd0:	6eb1ac23          	sw	a1,1784(gp)

90001bd4 <inst_469>:

inst_469:
// rs1_val==46339 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xb506, 0xb503, 0x5, x3, 1788, x4)
90001bd4:	0000b537          	lui	a0,0xb
90001bd8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001bdc:	00554593          	xori	a1,a0,5
90001be0:	6eb1ae23          	sw	a1,1788(gp)

90001be4 <inst_470>:

inst_470:
// rs1_val==46339 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xb630, 0xb503, 0x333, x3, 1792, x4)
90001be4:	0000b537          	lui	a0,0xb
90001be8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001bec:	33354593          	xori	a1,a0,819
90001bf0:	70b1a023          	sw	a1,1792(gp)

90001bf4 <inst_471>:

inst_471:
// rs1_val==46339 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xb365, 0xb503, 0x666, x3, 1796, x4)
90001bf4:	0000b537          	lui	a0,0xb
90001bf8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001bfc:	66654593          	xori	a1,a0,1638
90001c00:	70b1a223          	sw	a1,1796(gp)

90001c04 <inst_472>:

inst_472:
// rs1_val==46339 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad0, 0xb503, -0x2d, x3, 1800, x4)
90001c04:	0000b537          	lui	a0,0xb
90001c08:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c0c:	fd354593          	xori	a1,a0,-45
90001c10:	70b1a423          	sw	a1,1800(gp)

90001c14 <inst_473>:

inst_473:
// rs1_val==46339 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xb52e, 0xb503, 0x2d, x3, 1804, x4)
90001c14:	0000b537          	lui	a0,0xb
90001c18:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c1c:	02d54593          	xori	a1,a0,45
90001c20:	70b1a623          	sw	a1,1804(gp)

90001c24 <inst_474>:

inst_474:
// rs1_val==46339 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xb501, 0xb503, 0x2, x3, 1808, x4)
90001c24:	0000b537          	lui	a0,0xb
90001c28:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c2c:	00254593          	xori	a1,a0,2
90001c30:	70b1a823          	sw	a1,1808(gp)

90001c34 <inst_475>:

inst_475:
// rs1_val==46339 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xb057, 0xb503, 0x554, x3, 1812, x4)
90001c34:	0000b537          	lui	a0,0xb
90001c38:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c3c:	55454593          	xori	a1,a0,1364
90001c40:	70b1aa23          	sw	a1,1812(gp)

90001c44 <inst_476>:

inst_476:
// rs1_val==46339 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xb503, 0xb503, 0x0, x3, 1816, x4)
90001c44:	0000b537          	lui	a0,0xb
90001c48:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c4c:	00054593          	xori	a1,a0,0
90001c50:	70b1ac23          	sw	a1,1816(gp)

90001c54 <inst_477>:

inst_477:
// rs1_val==46339 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xb507, 0xb503, 0x4, x3, 1820, x4)
90001c54:	0000b537          	lui	a0,0xb
90001c58:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c5c:	00454593          	xori	a1,a0,4
90001c60:	70b1ae23          	sw	a1,1820(gp)

90001c64 <inst_478>:

inst_478:
// rs1_val==46339 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xb631, 0xb503, 0x332, x3, 1824, x4)
90001c64:	0000b537          	lui	a0,0xb
90001c68:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c6c:	33254593          	xori	a1,a0,818
90001c70:	72b1a023          	sw	a1,1824(gp)

90001c74 <inst_479>:

inst_479:
// rs1_val==46339 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xb366, 0xb503, 0x665, x3, 1828, x4)
90001c74:	0000b537          	lui	a0,0xb
90001c78:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c7c:	66554593          	xori	a1,a0,1637
90001c80:	72b1a223          	sw	a1,1828(gp)

90001c84 <inst_480>:

inst_480:
// rs1_val==46339 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xb52f, 0xb503, 0x2c, x3, 1832, x4)
90001c84:	0000b537          	lui	a0,0xb
90001c88:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c8c:	02c54593          	xori	a1,a0,44
90001c90:	72b1a423          	sw	a1,1832(gp)

90001c94 <inst_481>:

inst_481:
// rs1_val==46339 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xb055, 0xb503, 0x556, x3, 1836, x4)
90001c94:	0000b537          	lui	a0,0xb
90001c98:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001c9c:	55654593          	xori	a1,a0,1366
90001ca0:	72b1a623          	sw	a1,1836(gp)

90001ca4 <inst_482>:

inst_482:
// rs1_val==46339 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4fa8, 0xb503, -0x555, x3, 1840, x4)
90001ca4:	0000b537          	lui	a0,0xb
90001ca8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001cac:	aab54593          	xori	a1,a0,-1365
90001cb0:	72b1a823          	sw	a1,1840(gp)

90001cb4 <inst_483>:

inst_483:
// rs1_val==46339 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xb505, 0xb503, 0x6, x3, 1844, x4)
90001cb4:	0000b537          	lui	a0,0xb
90001cb8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001cbc:	00654593          	xori	a1,a0,6
90001cc0:	72b1aa23          	sw	a1,1844(gp)

90001cc4 <inst_484>:

inst_484:
// rs1_val==46339 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xb637, 0xb503, 0x334, x3, 1848, x4)
90001cc4:	0000b537          	lui	a0,0xb
90001cc8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001ccc:	33454593          	xori	a1,a0,820
90001cd0:	72b1ac23          	sw	a1,1848(gp)

90001cd4 <inst_485>:

inst_485:
// rs1_val==46339 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xb364, 0xb503, 0x667, x3, 1852, x4)
90001cd4:	0000b537          	lui	a0,0xb
90001cd8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001cdc:	66754593          	xori	a1,a0,1639
90001ce0:	72b1ae23          	sw	a1,1852(gp)

90001ce4 <inst_486>:

inst_486:
// rs1_val==46339 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad7, 0xb503, -0x2c, x3, 1856, x4)
90001ce4:	0000b537          	lui	a0,0xb
90001ce8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001cec:	fd454593          	xori	a1,a0,-44
90001cf0:	74b1a023          	sw	a1,1856(gp)

90001cf4 <inst_487>:

inst_487:
// rs1_val==46339 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xb52d, 0xb503, 0x2e, x3, 1860, x4)
90001cf4:	0000b537          	lui	a0,0xb
90001cf8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb483>
90001cfc:	02e54593          	xori	a1,a0,46
90001d00:	74b1a223          	sw	a1,1860(gp)

90001d04 <inst_488>:

inst_488:
// rs1_val==1431655766 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x55555555, 0x55555556, 0x3, x3, 1864, x4)
90001d04:	55555537          	lui	a0,0x55555
90001d08:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d0c:	00354593          	xori	a1,a0,3
90001d10:	74b1a423          	sw	a1,1864(gp)

90001d14 <inst_489>:

inst_489:
// rs1_val==1431655766 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x55555003, 0x55555556, 0x555, x3, 1868, x4)
90001d14:	55555537          	lui	a0,0x55555
90001d18:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d1c:	55554593          	xori	a1,a0,1365
90001d20:	74b1a623          	sw	a1,1868(gp)

90001d24 <inst_490>:

inst_490:
// rs1_val==1431655766 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffc, 0x55555556, -0x556, x3, 1872, x4)
90001d24:	55555537          	lui	a0,0x55555
90001d28:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d2c:	aaa54593          	xori	a1,a0,-1366
90001d30:	74b1a823          	sw	a1,1872(gp)

90001d34 <inst_491>:

inst_491:
// rs1_val==1431655766 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x55555553, 0x55555556, 0x5, x3, 1876, x4)
90001d34:	55555537          	lui	a0,0x55555
90001d38:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d3c:	00554593          	xori	a1,a0,5
90001d40:	74b1aa23          	sw	a1,1876(gp)

90001d44 <inst_492>:

inst_492:
// rs1_val==1431655766 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x55555665, 0x55555556, 0x333, x3, 1880, x4)
90001d44:	55555537          	lui	a0,0x55555
90001d48:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d4c:	33354593          	xori	a1,a0,819
90001d50:	74b1ac23          	sw	a1,1880(gp)

90001d54 <inst_493>:

inst_493:
// rs1_val==1431655766 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x55555330, 0x55555556, 0x666, x3, 1884, x4)
90001d54:	55555537          	lui	a0,0x55555
90001d58:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d5c:	66654593          	xori	a1,a0,1638
90001d60:	74b1ae23          	sw	a1,1884(gp)

90001d64 <inst_494>:

inst_494:
// rs1_val==1431655766 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa85, 0x55555556, -0x2d, x3, 1888, x4)
90001d64:	55555537          	lui	a0,0x55555
90001d68:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d6c:	fd354593          	xori	a1,a0,-45
90001d70:	76b1a023          	sw	a1,1888(gp)

90001d74 <inst_495>:

inst_495:
// rs1_val==1431655766 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x5555557b, 0x55555556, 0x2d, x3, 1892, x4)
90001d74:	55555537          	lui	a0,0x55555
90001d78:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d7c:	02d54593          	xori	a1,a0,45
90001d80:	76b1a223          	sw	a1,1892(gp)

90001d84 <inst_496>:

inst_496:
// rs1_val==1431655766 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x55555554, 0x55555556, 0x2, x3, 1896, x4)
90001d84:	55555537          	lui	a0,0x55555
90001d88:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d8c:	00254593          	xori	a1,a0,2
90001d90:	76b1a423          	sw	a1,1896(gp)

90001d94 <inst_497>:

inst_497:
// rs1_val==1431655766 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x55555002, 0x55555556, 0x554, x3, 1900, x4)
90001d94:	55555537          	lui	a0,0x55555
90001d98:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001d9c:	55454593          	xori	a1,a0,1364
90001da0:	76b1a623          	sw	a1,1900(gp)

90001da4 <inst_498>:

inst_498:
// rs1_val==1431655766 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x55555556, 0x55555556, 0x0, x3, 1904, x4)
90001da4:	55555537          	lui	a0,0x55555
90001da8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001dac:	00054593          	xori	a1,a0,0
90001db0:	76b1a823          	sw	a1,1904(gp)

90001db4 <inst_499>:

inst_499:
// rs1_val==1431655766 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x55555552, 0x55555556, 0x4, x3, 1908, x4)
90001db4:	55555537          	lui	a0,0x55555
90001db8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001dbc:	00454593          	xori	a1,a0,4
90001dc0:	76b1aa23          	sw	a1,1908(gp)

90001dc4 <inst_500>:

inst_500:
// rs1_val==1431655766 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x55555664, 0x55555556, 0x332, x3, 1912, x4)
90001dc4:	55555537          	lui	a0,0x55555
90001dc8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001dcc:	33254593          	xori	a1,a0,818
90001dd0:	76b1ac23          	sw	a1,1912(gp)

90001dd4 <inst_501>:

inst_501:
// rs1_val==1431655766 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x55555333, 0x55555556, 0x665, x3, 1916, x4)
90001dd4:	55555537          	lui	a0,0x55555
90001dd8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001ddc:	66554593          	xori	a1,a0,1637
90001de0:	76b1ae23          	sw	a1,1916(gp)

90001de4 <inst_502>:

inst_502:
// rs1_val==1431655766 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x5555557a, 0x55555556, 0x2c, x3, 1920, x4)
90001de4:	55555537          	lui	a0,0x55555
90001de8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001dec:	02c54593          	xori	a1,a0,44
90001df0:	78b1a023          	sw	a1,1920(gp)

90001df4 <inst_503>:

inst_503:
// rs1_val==1431655766 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x55555000, 0x55555556, 0x556, x3, 1924, x4)
90001df4:	55555537          	lui	a0,0x55555
90001df8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001dfc:	55654593          	xori	a1,a0,1366
90001e00:	78b1a223          	sw	a1,1924(gp)

90001e04 <inst_504>:

inst_504:
// rs1_val==1431655766 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffd, 0x55555556, -0x555, x3, 1928, x4)
90001e04:	55555537          	lui	a0,0x55555
90001e08:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001e0c:	aab54593          	xori	a1,a0,-1365
90001e10:	78b1a423          	sw	a1,1928(gp)

90001e14 <inst_505>:

inst_505:
// rs1_val==1431655766 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x55555550, 0x55555556, 0x6, x3, 1932, x4)
90001e14:	55555537          	lui	a0,0x55555
90001e18:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001e1c:	00654593          	xori	a1,a0,6
90001e20:	78b1a623          	sw	a1,1932(gp)

90001e24 <inst_506>:

inst_506:
// rs1_val==1431655766 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x55555662, 0x55555556, 0x334, x3, 1936, x4)
90001e24:	55555537          	lui	a0,0x55555
90001e28:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001e2c:	33454593          	xori	a1,a0,820
90001e30:	78b1a823          	sw	a1,1936(gp)

90001e34 <inst_507>:

inst_507:
// rs1_val==1431655766 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x55555331, 0x55555556, 0x667, x3, 1940, x4)
90001e34:	55555537          	lui	a0,0x55555
90001e38:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001e3c:	66754593          	xori	a1,a0,1639
90001e40:	78b1aa23          	sw	a1,1940(gp)

90001e44 <inst_508>:

inst_508:
// rs1_val==1431655766 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa82, 0x55555556, -0x2c, x3, 1944, x4)
90001e44:	55555537          	lui	a0,0x55555
90001e48:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001e4c:	fd454593          	xori	a1,a0,-44
90001e50:	78b1ac23          	sw	a1,1944(gp)

90001e54 <inst_509>:

inst_509:
// rs1_val==1431655766 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x55555578, 0x55555556, 0x2e, x3, 1948, x4)
90001e54:	55555537          	lui	a0,0x55555
90001e58:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554d6>
90001e5c:	02e54593          	xori	a1,a0,46
90001e60:	78b1ae23          	sw	a1,1948(gp)

90001e64 <inst_510>:

inst_510:
// rs1_val==-1431655765 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaa8, -0x55555555, 0x3, x3, 1952, x4)
90001e64:	aaaab537          	lui	a0,0xaaaab
90001e68:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e6c:	00354593          	xori	a1,a0,3
90001e70:	7ab1a023          	sw	a1,1952(gp)

90001e74 <inst_511>:

inst_511:
// rs1_val==-1431655765 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffe, -0x55555555, 0x555, x3, 1956, x4)
90001e74:	aaaab537          	lui	a0,0xaaaab
90001e78:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e7c:	55554593          	xori	a1,a0,1365
90001e80:	7ab1a223          	sw	a1,1956(gp)

90001e84 <inst_512>:

inst_512:
// rs1_val==-1431655765 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x55555001, -0x55555555, -0x556, x3, 1960, x4)
90001e84:	aaaab537          	lui	a0,0xaaaab
90001e88:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e8c:	aaa54593          	xori	a1,a0,-1366
90001e90:	7ab1a423          	sw	a1,1960(gp)

90001e94 <inst_513>:

inst_513:
// rs1_val==-1431655765 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaae, -0x55555555, 0x5, x3, 1964, x4)
90001e94:	aaaab537          	lui	a0,0xaaaab
90001e98:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e9c:	00554593          	xori	a1,a0,5
90001ea0:	7ab1a623          	sw	a1,1964(gp)

90001ea4 <inst_514>:

inst_514:
// rs1_val==-1431655765 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xaaaaa998, -0x55555555, 0x333, x3, 1968, x4)
90001ea4:	aaaab537          	lui	a0,0xaaaab
90001ea8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001eac:	33354593          	xori	a1,a0,819
90001eb0:	7ab1a823          	sw	a1,1968(gp)

90001eb4 <inst_515>:

inst_515:
// rs1_val==-1431655765 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccd, -0x55555555, 0x666, x3, 1972, x4)
90001eb4:	aaaab537          	lui	a0,0xaaaab
90001eb8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001ebc:	66654593          	xori	a1,a0,1638
90001ec0:	7ab1aa23          	sw	a1,1972(gp)

90001ec4 <inst_516>:

inst_516:
// rs1_val==-1431655765 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x55555578, -0x55555555, -0x2d, x3, 1976, x4)
90001ec4:	aaaab537          	lui	a0,0xaaaab
90001ec8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001ecc:	fd354593          	xori	a1,a0,-45
90001ed0:	7ab1ac23          	sw	a1,1976(gp)

90001ed4 <inst_517>:

inst_517:
// rs1_val==-1431655765 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa86, -0x55555555, 0x2d, x3, 1980, x4)
90001ed4:	aaaab537          	lui	a0,0xaaaab
90001ed8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001edc:	02d54593          	xori	a1,a0,45
90001ee0:	7ab1ae23          	sw	a1,1980(gp)

90001ee4 <inst_518>:

inst_518:
// rs1_val==-1431655765 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaa9, -0x55555555, 0x2, x3, 1984, x4)
90001ee4:	aaaab537          	lui	a0,0xaaaab
90001ee8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001eec:	00254593          	xori	a1,a0,2
90001ef0:	7cb1a023          	sw	a1,1984(gp)

90001ef4 <inst_519>:

inst_519:
// rs1_val==-1431655765 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xaaaaafff, -0x55555555, 0x554, x3, 1988, x4)
90001ef4:	aaaab537          	lui	a0,0xaaaab
90001ef8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001efc:	55454593          	xori	a1,a0,1364
90001f00:	7cb1a223          	sw	a1,1988(gp)

90001f04 <inst_520>:

inst_520:
// rs1_val==-1431655765 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaab, -0x55555555, 0x0, x3, 1992, x4)
90001f04:	aaaab537          	lui	a0,0xaaaab
90001f08:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f0c:	00054593          	xori	a1,a0,0
90001f10:	7cb1a423          	sw	a1,1992(gp)

90001f14 <inst_521>:

inst_521:
// rs1_val==-1431655765 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaaf, -0x55555555, 0x4, x3, 1996, x4)
90001f14:	aaaab537          	lui	a0,0xaaaab
90001f18:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f1c:	00454593          	xori	a1,a0,4
90001f20:	7cb1a623          	sw	a1,1996(gp)

90001f24 <inst_522>:

inst_522:
// rs1_val==-1431655765 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xaaaaa999, -0x55555555, 0x332, x3, 2000, x4)
90001f24:	aaaab537          	lui	a0,0xaaaab
90001f28:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f2c:	33254593          	xori	a1,a0,818
90001f30:	7cb1a823          	sw	a1,2000(gp)

90001f34 <inst_523>:

inst_523:
// rs1_val==-1431655765 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xaaaaacce, -0x55555555, 0x665, x3, 2004, x4)
90001f34:	aaaab537          	lui	a0,0xaaaab
90001f38:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f3c:	66554593          	xori	a1,a0,1637
90001f40:	7cb1aa23          	sw	a1,2004(gp)

90001f44 <inst_524>:

inst_524:
// rs1_val==-1431655765 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa87, -0x55555555, 0x2c, x3, 2008, x4)
90001f44:	aaaab537          	lui	a0,0xaaaab
90001f48:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f4c:	02c54593          	xori	a1,a0,44
90001f50:	7cb1ac23          	sw	a1,2008(gp)

90001f54 <inst_525>:

inst_525:
// rs1_val==-1431655765 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffd, -0x55555555, 0x556, x3, 2012, x4)
90001f54:	aaaab537          	lui	a0,0xaaaab
90001f58:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f5c:	55654593          	xori	a1,a0,1366
90001f60:	7cb1ae23          	sw	a1,2012(gp)

90001f64 <inst_526>:

inst_526:
// rs1_val==-1431655765 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x55555000, -0x55555555, -0x555, x3, 2016, x4)
90001f64:	aaaab537          	lui	a0,0xaaaab
90001f68:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f6c:	aab54593          	xori	a1,a0,-1365
90001f70:	7eb1a023          	sw	a1,2016(gp)

90001f74 <inst_527>:

inst_527:
// rs1_val==-1431655765 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaad, -0x55555555, 0x6, x3, 2020, x4)
90001f74:	aaaab537          	lui	a0,0xaaaab
90001f78:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f7c:	00654593          	xori	a1,a0,6
90001f80:	7eb1a223          	sw	a1,2020(gp)

90001f84 <inst_528>:

inst_528:
// rs1_val==-1431655765 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xaaaaa99f, -0x55555555, 0x334, x3, 2024, x4)
90001f84:	aaaab537          	lui	a0,0xaaaab
90001f88:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f8c:	33454593          	xori	a1,a0,820
90001f90:	7eb1a423          	sw	a1,2024(gp)

90001f94 <inst_529>:

inst_529:
// rs1_val==-1431655765 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccc, -0x55555555, 0x667, x3, 2028, x4)
90001f94:	aaaab537          	lui	a0,0xaaaab
90001f98:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f9c:	66754593          	xori	a1,a0,1639
90001fa0:	7eb1a623          	sw	a1,2028(gp)

90001fa4 <inst_530>:

inst_530:
// rs1_val==-1431655765 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x5555557f, -0x55555555, -0x2c, x3, 2032, x4)
90001fa4:	aaaab537          	lui	a0,0xaaaab
90001fa8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001fac:	fd454593          	xori	a1,a0,-44
90001fb0:	7eb1a823          	sw	a1,2032(gp)

90001fb4 <inst_531>:

inst_531:
// rs1_val==-1431655765 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa85, -0x55555555, 0x2e, x3, 2036, x4)
90001fb4:	aaaab537          	lui	a0,0xaaaab
90001fb8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001fbc:	02e54593          	xori	a1,a0,46
90001fc0:	7eb1aa23          	sw	a1,2036(gp)

90001fc4 <inst_532>:

inst_532:
// rs1_val==6 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x5, 0x6, 0x3, x3, 2040, x4)
90001fc4:	00600513          	li	a0,6
90001fc8:	00354593          	xori	a1,a0,3
90001fcc:	7eb1ac23          	sw	a1,2040(gp)

90001fd0 <inst_533>:

inst_533:
// rs1_val==6 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x553, 0x6, 0x555, x3, 2044, x4)
90001fd0:	00600513          	li	a0,6
90001fd4:	55554593          	xori	a1,a0,1365
90001fd8:	7eb1ae23          	sw	a1,2044(gp)
RVTEST_SIGBASE( x3,signature_x3_1)
90001fdc:	00003197          	auipc	gp,0x3
90001fe0:	88c18193          	addi	gp,gp,-1908 # 90004868 <signature_x3_1>

90001fe4 <inst_534>:

inst_534:
// rs1_val==6 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaac, 0x6, -0x556, x3, 0, x4)
90001fe4:	00600513          	li	a0,6
90001fe8:	aaa54593          	xori	a1,a0,-1366
90001fec:	00b1a023          	sw	a1,0(gp)

90001ff0 <inst_535>:

inst_535:
// rs1_val==6 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x3, 0x6, 0x5, x3, 4, x4)
90001ff0:	00600513          	li	a0,6
90001ff4:	00554593          	xori	a1,a0,5
90001ff8:	00b1a223          	sw	a1,4(gp)

90001ffc <inst_536>:

inst_536:
// rs1_val==6 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x335, 0x6, 0x333, x3, 8, x4)
90001ffc:	00600513          	li	a0,6
90002000:	33354593          	xori	a1,a0,819
90002004:	00b1a423          	sw	a1,8(gp)

90002008 <inst_537>:

inst_537:
// rs1_val==6 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x660, 0x6, 0x666, x3, 12, x4)
90002008:	00600513          	li	a0,6
9000200c:	66654593          	xori	a1,a0,1638
90002010:	00b1a623          	sw	a1,12(gp)

90002014 <inst_538>:

inst_538:
// rs1_val==6 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd5, 0x6, -0x2d, x3, 16, x4)
90002014:	00600513          	li	a0,6
90002018:	fd354593          	xori	a1,a0,-45
9000201c:	00b1a823          	sw	a1,16(gp)

90002020 <inst_539>:

inst_539:
// rs1_val==6 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x2b, 0x6, 0x2d, x3, 20, x4)
90002020:	00600513          	li	a0,6
90002024:	02d54593          	xori	a1,a0,45
90002028:	00b1aa23          	sw	a1,20(gp)

9000202c <inst_540>:

inst_540:
// rs1_val==6 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x4, 0x6, 0x2, x3, 24, x4)
9000202c:	00600513          	li	a0,6
90002030:	00254593          	xori	a1,a0,2
90002034:	00b1ac23          	sw	a1,24(gp)

90002038 <inst_541>:

inst_541:
// rs1_val==6 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x552, 0x6, 0x554, x3, 28, x4)
90002038:	00600513          	li	a0,6
9000203c:	55454593          	xori	a1,a0,1364
90002040:	00b1ae23          	sw	a1,28(gp)

90002044 <inst_542>:

inst_542:
// rs1_val==6 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x6, 0x6, 0x0, x3, 32, x4)
90002044:	00600513          	li	a0,6
90002048:	00054593          	xori	a1,a0,0
9000204c:	02b1a023          	sw	a1,32(gp)

90002050 <inst_543>:

inst_543:
// rs1_val==6 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x2, 0x6, 0x4, x3, 36, x4)
90002050:	00600513          	li	a0,6
90002054:	00454593          	xori	a1,a0,4
90002058:	02b1a223          	sw	a1,36(gp)

9000205c <inst_544>:

inst_544:
// rs1_val==6 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x334, 0x6, 0x332, x3, 40, x4)
9000205c:	00600513          	li	a0,6
90002060:	33254593          	xori	a1,a0,818
90002064:	02b1a423          	sw	a1,40(gp)

90002068 <inst_545>:

inst_545:
// rs1_val==6 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x663, 0x6, 0x665, x3, 44, x4)
90002068:	00600513          	li	a0,6
9000206c:	66554593          	xori	a1,a0,1637
90002070:	02b1a623          	sw	a1,44(gp)

90002074 <inst_546>:

inst_546:
// rs1_val==6 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2a, 0x6, 0x2c, x3, 48, x4)
90002074:	00600513          	li	a0,6
90002078:	02c54593          	xori	a1,a0,44
9000207c:	02b1a823          	sw	a1,48(gp)

90002080 <inst_547>:

inst_547:
// rs1_val==6 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x550, 0x6, 0x556, x3, 52, x4)
90002080:	00600513          	li	a0,6
90002084:	55654593          	xori	a1,a0,1366
90002088:	02b1aa23          	sw	a1,52(gp)

9000208c <inst_548>:

inst_548:
// rs1_val==6 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaad, 0x6, -0x555, x3, 56, x4)
9000208c:	00600513          	li	a0,6
90002090:	aab54593          	xori	a1,a0,-1365
90002094:	02b1ac23          	sw	a1,56(gp)

90002098 <inst_549>:

inst_549:
// rs1_val==6 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x0, 0x6, 0x6, x3, 60, x4)
90002098:	00600513          	li	a0,6
9000209c:	00654593          	xori	a1,a0,6
900020a0:	02b1ae23          	sw	a1,60(gp)

900020a4 <inst_550>:

inst_550:
// rs1_val==6 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x332, 0x6, 0x334, x3, 64, x4)
900020a4:	00600513          	li	a0,6
900020a8:	33454593          	xori	a1,a0,820
900020ac:	04b1a023          	sw	a1,64(gp)

900020b0 <inst_551>:

inst_551:
// rs1_val==6 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x661, 0x6, 0x667, x3, 68, x4)
900020b0:	00600513          	li	a0,6
900020b4:	66754593          	xori	a1,a0,1639
900020b8:	04b1a223          	sw	a1,68(gp)

900020bc <inst_552>:

inst_552:
// rs1_val==6 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd2, 0x6, -0x2c, x3, 72, x4)
900020bc:	00600513          	li	a0,6
900020c0:	fd454593          	xori	a1,a0,-44
900020c4:	04b1a423          	sw	a1,72(gp)

900020c8 <inst_553>:

inst_553:
// rs1_val==6 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x28, 0x6, 0x2e, x3, 76, x4)
900020c8:	00600513          	li	a0,6
900020cc:	02e54593          	xori	a1,a0,46
900020d0:	04b1a623          	sw	a1,76(gp)

900020d4 <inst_554>:

inst_554:
// rs1_val==858993460 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x33333337, 0x33333334, 0x3, x3, 80, x4)
900020d4:	33333537          	lui	a0,0x33333
900020d8:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
900020dc:	00354593          	xori	a1,a0,3
900020e0:	04b1a823          	sw	a1,80(gp)

900020e4 <inst_555>:

inst_555:
// rs1_val==858993460 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x33333661, 0x33333334, 0x555, x3, 84, x4)
900020e4:	33333537          	lui	a0,0x33333
900020e8:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
900020ec:	55554593          	xori	a1,a0,1365
900020f0:	04b1aa23          	sw	a1,84(gp)

900020f4 <inst_556>:

inst_556:
// rs1_val==858993460 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xccccc99e, 0x33333334, -0x556, x3, 88, x4)
900020f4:	33333537          	lui	a0,0x33333
900020f8:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
900020fc:	aaa54593          	xori	a1,a0,-1366
90002100:	04b1ac23          	sw	a1,88(gp)

90002104 <inst_557>:

inst_557:
// rs1_val==858993460 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x33333331, 0x33333334, 0x5, x3, 92, x4)
90002104:	33333537          	lui	a0,0x33333
90002108:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
9000210c:	00554593          	xori	a1,a0,5
90002110:	04b1ae23          	sw	a1,92(gp)

90002114 <inst_558>:

inst_558:
// rs1_val==858993460 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x33333007, 0x33333334, 0x333, x3, 96, x4)
90002114:	33333537          	lui	a0,0x33333
90002118:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
9000211c:	33354593          	xori	a1,a0,819
90002120:	06b1a023          	sw	a1,96(gp)

90002124 <inst_559>:

inst_559:
// rs1_val==858993460 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x33333552, 0x33333334, 0x666, x3, 100, x4)
90002124:	33333537          	lui	a0,0x33333
90002128:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
9000212c:	66654593          	xori	a1,a0,1638
90002130:	06b1a223          	sw	a1,100(gp)

90002134 <inst_560>:

inst_560:
// rs1_val==858993460 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xcccccce7, 0x33333334, -0x2d, x3, 104, x4)
90002134:	33333537          	lui	a0,0x33333
90002138:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
9000213c:	fd354593          	xori	a1,a0,-45
90002140:	06b1a423          	sw	a1,104(gp)

90002144 <inst_561>:

inst_561:
// rs1_val==858993460 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x33333319, 0x33333334, 0x2d, x3, 108, x4)
90002144:	33333537          	lui	a0,0x33333
90002148:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
9000214c:	02d54593          	xori	a1,a0,45
90002150:	06b1a623          	sw	a1,108(gp)

90002154 <inst_562>:

inst_562:
// rs1_val==858993460 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x33333336, 0x33333334, 0x2, x3, 112, x4)
90002154:	33333537          	lui	a0,0x33333
90002158:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
9000215c:	00254593          	xori	a1,a0,2
90002160:	06b1a823          	sw	a1,112(gp)

90002164 <inst_563>:

inst_563:
// rs1_val==858993460 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x33333660, 0x33333334, 0x554, x3, 116, x4)
90002164:	33333537          	lui	a0,0x33333
90002168:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
9000216c:	55454593          	xori	a1,a0,1364
90002170:	06b1aa23          	sw	a1,116(gp)

90002174 <inst_564>:

inst_564:
// rs1_val==858993460 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x33333334, 0x33333334, 0x0, x3, 120, x4)
90002174:	33333537          	lui	a0,0x33333
90002178:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
9000217c:	00054593          	xori	a1,a0,0
90002180:	06b1ac23          	sw	a1,120(gp)

90002184 <inst_565>:

inst_565:
// rs1_val==858993460 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x33333330, 0x33333334, 0x4, x3, 124, x4)
90002184:	33333537          	lui	a0,0x33333
90002188:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b4>
9000218c:	00454593          	xori	a1,a0,4
90002190:	06b1ae23          	sw	a1,124(gp)
90002194:	00000013          	nop
90002198:	00000013          	nop
9000219c:	00000013          	nop

900021a0 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
900021a0:	00408093          	addi	ra,ra,4
900021a4:	00100093          	li	ra,1

900021a8 <write_tohost>:
900021a8:	00001f17          	auipc	t5,0x1
900021ac:	e41f2c23          	sw	ra,-424(t5) # 90003000 <tohost>

900021b0 <self_loop>:
900021b0:	0000006f          	j	900021b0 <self_loop>
	...
