
/home/taka/RISCV/mmRISC/simulation/modelsim/riscv-arch-test/riscv-arch-test/work/rv32i_m/I/andi-01.elf:     file format elf32-littleriscv


Disassembly of section .text.init:

90000000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
90000000:	feedc0b7          	lui	ra,0xfeedc
90000004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0x6eed74a9>
90000008:	ff76e137          	lui	sp,0xff76e
9000000c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0x6f769552>
90000010:	7fbb71b7          	lui	gp,0x7fbb7
90000014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <offset+0x7fbb6f2f>
90000018:	bfddb237          	lui	tp,0xbfddb
9000001c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0x2fdd6dd1>
90000020:	00000297          	auipc	t0,0x0
90000024:	0d828293          	addi	t0,t0,216 # 900000f8 <rvtest_code_begin>
90000028:	00004317          	auipc	t1,0x4
9000002c:	fd830313          	addi	t1,t1,-40 # 90004000 <rvtest_data_begin>
90000030:	b7fbb3b7          	lui	t2,0xb7fbb
90000034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0x27fb6cf6>
90000038:	5bfde437          	lui	s0,0x5bfde
9000003c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <offset+0x5bfddb01>
90000040:	adfef4b7          	lui	s1,0xadfef
90000044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0x1dfea3ba>
90000048:	56ff7537          	lui	a0,0x56ff7
9000004c:	6df50513          	addi	a0,a0,1759 # 56ff76df <offset+0x56ff7663>
90000050:	ab7fc5b7          	lui	a1,0xab7fc
90000054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0x1b7f716b>
90000058:	d5bfe637          	lui	a2,0xd5bfe
9000005c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0x45bf93b3>
90000060:	eadff6b7          	lui	a3,0xeadff
90000064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0x5adfa4d7>
90000068:	f56ff737          	lui	a4,0xf56ff
9000006c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0x656fad69>
90000070:	fab807b7          	lui	a5,0xfab80
90000074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0x6ab7b1b2>
90000078:	7d5c0837          	lui	a6,0x7d5c0
9000007c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <offset+0x7d5bfd5f>
90000080:	beae08b7          	lui	a7,0xbeae0
90000084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0x2eadb4e9>
90000088:	df570937          	lui	s2,0xdf570
9000008c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0x4f56b572>
90000090:	6fab89b7          	lui	s3,0x6fab8
90000094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <offset+0x6fab7f3f>
90000098:	b7d5ca37          	lui	s4,0xb7d5c
9000009c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0x27d575d9>
900000a0:	dbeaeab7          	lui	s5,0xdbeae
900000a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0x4bea95ea>
900000a8:	6df57b37          	lui	s6,0x6df57
900000ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <offset+0x6df56f7b>
900000b0:	b6fabbb7          	lui	s7,0xb6fab
900000b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0x26fa6df7>
900000b8:	db7d6c37          	lui	s8,0xdb7d6
900000bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0x4b7d11f9>
900000c0:	edbebcb7          	lui	s9,0xedbeb
900000c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0x5dbe63fa>
900000c8:	76df5d37          	lui	s10,0x76df5
900000cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <offset+0x76df5683>
900000d0:	bb6fbdb7          	lui	s11,0xbb6fb
900000d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0x2b6f617b>
900000d8:	ddb7de37          	lui	t3,0xddb7d
900000dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0x4db78bbb>
900000e0:	eedbfeb7          	lui	t4,0xeedbf
900000e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0x5edba0db>
900000e8:	f76dff37          	lui	t5,0xf76df
900000ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0x676dab6b>
900000f0:	fbb70fb7          	lui	t6,0xfbb70
900000f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0x6bb6b0b3>

900000f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",andi)

RVTEST_SIGBASE( x18,signature_x18_1)
900000f8:	00004917          	auipc	s2,0x4
900000fc:	f1890913          	addi	s2,s2,-232 # 90004010 <begin_signature>

90000100 <inst_0>:

inst_0:
// rs1 != rd, rs1==x22, rd==x10, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val != imm_val, rs1_val < 0 and imm_val < 0, rs1_val == -2
// opcode: andi ; op1:x22; dest:x10; op1val:-0x2;  immval:-0x800
TEST_IMM_OP( andi, x10, x22, 0xfffff800, -0x2, -0x800, x18, 0, x24)
90000100:	ffe00b13          	li	s6,-2
90000104:	800b7513          	andi	a0,s6,-2048
90000108:	00a92023          	sw	a0,0(s2)

9000010c <inst_1>:

inst_1:
// rs1 == rd, rs1==x25, rd==x25, imm_val == 0, rs1_val == -4097
// opcode: andi ; op1:x25; dest:x25; op1val:-0x1001;  immval:0x0
TEST_IMM_OP( andi, x25, x25, 0x0, -0x1001, 0x0, x18, 4, x24)
9000010c:	fffffcb7          	lui	s9,0xfffff
90000110:	fffc8c93          	addi	s9,s9,-1 # ffffefff <_end+0x6fffa5fb>
90000114:	000cfc93          	andi	s9,s9,0
90000118:	01992223          	sw	s9,4(s2)

9000011c <inst_2>:

inst_2:
// rs1==x16, rd==x17, imm_val == (2**(12-1)-1), rs1_val < 0 and imm_val > 0, imm_val == 2047, rs1_val == -33554433
// opcode: andi ; op1:x16; dest:x17; op1val:-0x2000001;  immval:0x7ff
TEST_IMM_OP( andi, x17, x16, 0x7ff, -0x2000001, 0x7ff, x18, 8, x24)
9000011c:	fe000837          	lui	a6,0xfe000
90000120:	fff80813          	addi	a6,a6,-1 # fdffffff <_end+0x6dffb5fb>
90000124:	7ff87893          	andi	a7,a6,2047
90000128:	01192423          	sw	a7,8(s2)

9000012c <inst_3>:

inst_3:
// rs1==x2, rd==x8, imm_val == 1, rs1_val == -131073
// opcode: andi ; op1:x2; dest:x8; op1val:-0x20001;  immval:0x1
TEST_IMM_OP( andi, x8, x2, 0x1, -0x20001, 0x1, x18, 12, x24)
9000012c:	fffe0137          	lui	sp,0xfffe0
90000130:	fff10113          	addi	sp,sp,-1 # fffdffff <_end+0x6ffdb5fb>
90000134:	00117413          	andi	s0,sp,1
90000138:	00892623          	sw	s0,12(s2)

9000013c <inst_4>:

inst_4:
// rs1==x28, rd==x30, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648, imm_val == 4
// opcode: andi ; op1:x28; dest:x30; op1val:-0x80000000;  immval:0x4
TEST_IMM_OP( andi, x30, x28, 0x0, -0x80000000, 0x4, x18, 16, x24)
9000013c:	80000e37          	lui	t3,0x80000
90000140:	004e7f13          	andi	t5,t3,4
90000144:	01e92823          	sw	t5,16(s2)

90000148 <inst_5>:

inst_5:
// rs1==x4, rd==x19, rs1_val == 0, 
// opcode: andi ; op1:x4; dest:x19; op1val:0x0;  immval:-0x800
TEST_IMM_OP( andi, x19, x4, 0x0, 0x0, -0x800, x18, 20, x24)
90000148:	00000213          	li	tp,0
9000014c:	80027993          	andi	s3,tp,-2048
90000150:	01392a23          	sw	s3,20(s2)

90000154 <inst_6>:

inst_6:
// rs1==x10, rd==x2, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and imm_val > 0, rs1_val == 2147483647
// opcode: andi ; op1:x10; dest:x2; op1val:0x7fffffff;  immval:0x6
TEST_IMM_OP( andi, x2, x10, 0x6, 0x7fffffff, 0x6, x18, 24, x24)
90000154:	80000537          	lui	a0,0x80000
90000158:	fff50513          	addi	a0,a0,-1 # 7fffffff <_end+0xefffb5fb>
9000015c:	00657113          	andi	sp,a0,6
90000160:	00292c23          	sw	sp,24(s2)

90000164 <inst_7>:

inst_7:
// rs1==x7, rd==x13, rs1_val == 1, 
// opcode: andi ; op1:x7; dest:x13; op1val:0x1;  immval:0x554
TEST_IMM_OP( andi, x13, x7, 0x0, 0x1, 0x554, x18, 28, x24)
90000164:	00100393          	li	t2,1
90000168:	5543f693          	andi	a3,t2,1364
9000016c:	00d92e23          	sw	a3,28(s2)

90000170 <inst_8>:

inst_8:
// rs1==x27, rd==x9, rs1_val == imm_val, imm_val == 128, rs1_val == 128
// opcode: andi ; op1:x27; dest:x9; op1val:0x80;  immval:0x80
TEST_IMM_OP( andi, x9, x27, 0x80, 0x80, 0x80, x18, 32, x24)
90000170:	08000d93          	li	s11,128
90000174:	080df493          	andi	s1,s11,128
90000178:	02992023          	sw	s1,32(s2)

9000017c <inst_9>:

inst_9:
// rs1==x17, rd==x3, rs1_val > 0 and imm_val < 0, 
// opcode: andi ; op1:x17; dest:x3; op1val:0x7fffffff;  immval:-0x2c
TEST_IMM_OP( andi, x3, x17, 0x7fffffd4, 0x7fffffff, -0x2c, x18, 36, x24)
9000017c:	800008b7          	lui	a7,0x80000
90000180:	fff88893          	addi	a7,a7,-1 # 7fffffff <_end+0xefffb5fb>
90000184:	fd48f193          	andi	gp,a7,-44
90000188:	02392223          	sw	gp,36(s2)

9000018c <inst_10>:

inst_10:
// rs1==x0, rd==x26, imm_val == 2, rs1_val == 16777216
// opcode: andi ; op1:x0; dest:x26; op1val:0x0;  immval:0x2
TEST_IMM_OP( andi, x26, x0, 0x0, 0x0, 0x2, x18, 40, x24)
9000018c:	00000013          	nop
90000190:	00207d13          	andi	s10,zero,2
90000194:	03a92423          	sw	s10,40(s2)

90000198 <inst_11>:

inst_11:
// rs1==x23, rd==x21, imm_val == 8, 
// opcode: andi ; op1:x23; dest:x21; op1val:0x66666666;  immval:0x8
TEST_IMM_OP( andi, x21, x23, 0x0, 0x66666666, 0x8, x18, 44, x24)
90000198:	66666bb7          	lui	s7,0x66666
9000019c:	666b8b93          	addi	s7,s7,1638 # 66666666 <offset+0x666665ea>
900001a0:	008bfa93          	andi	s5,s7,8
900001a4:	03592623          	sw	s5,44(s2)

900001a8 <inst_12>:

inst_12:
// rs1==x6, rd==x14, imm_val == 16, 
// opcode: andi ; op1:x6; dest:x14; op1val:0x0;  immval:0x10
TEST_IMM_OP( andi, x14, x6, 0x0, 0x0, 0x10, x18, 48, x24)
900001a8:	00000313          	li	t1,0
900001ac:	01037713          	andi	a4,t1,16
900001b0:	02e92823          	sw	a4,48(s2)

900001b4 <inst_13>:

inst_13:
// rs1==x5, rd==x22, imm_val == 32, rs1_val == 256
// opcode: andi ; op1:x5; dest:x22; op1val:0x100;  immval:0x20
TEST_IMM_OP( andi, x22, x5, 0x0, 0x100, 0x20, x18, 52, x24)
900001b4:	10000293          	li	t0,256
900001b8:	0202fb13          	andi	s6,t0,32
900001bc:	03692a23          	sw	s6,52(s2)

900001c0 <inst_14>:

inst_14:
// rs1==x8, rd==x29, imm_val == 64, rs1_val == -5
// opcode: andi ; op1:x8; dest:x29; op1val:-0x5;  immval:0x40
TEST_IMM_OP( andi, x29, x8, 0x40, -0x5, 0x40, x18, 56, x24)
900001c0:	ffb00413          	li	s0,-5
900001c4:	04047e93          	andi	t4,s0,64
900001c8:	03d92c23          	sw	t4,56(s2)

900001cc <inst_15>:

inst_15:
// rs1==x12, rd==x23, imm_val == 256, 
// opcode: andi ; op1:x12; dest:x23; op1val:0x1;  immval:0x100
TEST_IMM_OP( andi, x23, x12, 0x0, 0x1, 0x100, x18, 60, x24)
900001cc:	00100613          	li	a2,1
900001d0:	10067b93          	andi	s7,a2,256
900001d4:	03792e23          	sw	s7,60(s2)

900001d8 <inst_16>:

inst_16:
// rs1==x15, rd==x6, imm_val == 512, 
// opcode: andi ; op1:x15; dest:x6; op1val:-0x55555555;  immval:0x200
TEST_IMM_OP( andi, x6, x15, 0x200, -0x55555555, 0x200, x18, 64, x24)
900001d8:	aaaab7b7          	lui	a5,0xaaaab
900001dc:	aab78793          	addi	a5,a5,-1365 # aaaaaaab <_end+0x1aaa60a7>
900001e0:	2007f313          	andi	t1,a5,512
900001e4:	04692023          	sw	t1,64(s2)

900001e8 <inst_17>:

inst_17:
// rs1==x29, rd==x11, imm_val == 1024, 
// opcode: andi ; op1:x29; dest:x11; op1val:0x0;  immval:0x400
TEST_IMM_OP( andi, x11, x29, 0x0, 0x0, 0x400, x18, 68, x24)
900001e8:	00000e93          	li	t4,0
900001ec:	400ef593          	andi	a1,t4,1024
900001f0:	04b92223          	sw	a1,68(s2)

900001f4 <inst_18>:

inst_18:
// rs1==x20, rd==x1, imm_val == -2, 
// opcode: andi ; op1:x20; dest:x1; op1val:0x66666667;  immval:-0x2
TEST_IMM_OP( andi, x1, x20, 0x66666666, 0x66666667, -0x2, x18, 72, x24)
900001f4:	66666a37          	lui	s4,0x66666
900001f8:	667a0a13          	addi	s4,s4,1639 # 66666667 <offset+0x666665eb>
900001fc:	ffea7093          	andi	ra,s4,-2
90000200:	04192423          	sw	ra,72(s2)
RVTEST_SIGBASE( x2,signature_x2_0)
90000204:	00004117          	auipc	sp,0x4
90000208:	e5810113          	addi	sp,sp,-424 # 9000405c <signature_x2_0>

9000020c <inst_19>:

inst_19:
// rs1==x31, rd==x5, imm_val == -3, rs1_val == -1048577
// opcode: andi ; op1:x31; dest:x5; op1val:-0x100001;  immval:-0x3
TEST_IMM_OP( andi, x5, x31, 0xffeffffd, -0x100001, -0x3, x2, 0, x6)
9000020c:	fff00fb7          	lui	t6,0xfff00
90000210:	ffff8f93          	addi	t6,t6,-1 # ffefffff <_end+0x6fefb5fb>
90000214:	ffdff293          	andi	t0,t6,-3
90000218:	00512023          	sw	t0,0(sp)

9000021c <inst_20>:

inst_20:
// rs1==x3, rd==x20, imm_val == -5, rs1_val == 512
// opcode: andi ; op1:x3; dest:x20; op1val:0x200;  immval:-0x5
TEST_IMM_OP( andi, x20, x3, 0x200, 0x200, -0x5, x2, 4, x6)
9000021c:	20000193          	li	gp,512
90000220:	ffb1fa13          	andi	s4,gp,-5
90000224:	01412223          	sw	s4,4(sp)

90000228 <inst_21>:

inst_21:
// rs1==x9, rd==x7, imm_val == -9, rs1_val == 16384
// opcode: andi ; op1:x9; dest:x7; op1val:0x4000;  immval:-0x9
TEST_IMM_OP( andi, x7, x9, 0x4000, 0x4000, -0x9, x2, 8, x6)
90000228:	000044b7          	lui	s1,0x4
9000022c:	ff74f393          	andi	t2,s1,-9
90000230:	00712423          	sw	t2,8(sp)

90000234 <inst_22>:

inst_22:
// rs1==x13, rd==x16, imm_val == -17, rs1_val == 2097152
// opcode: andi ; op1:x13; dest:x16; op1val:0x200000;  immval:-0x11
TEST_IMM_OP( andi, x16, x13, 0x200000, 0x200000, -0x11, x2, 12, x6)
90000234:	002006b7          	lui	a3,0x200
90000238:	fef6f813          	andi	a6,a3,-17
9000023c:	01012623          	sw	a6,12(sp)

90000240 <inst_23>:

inst_23:
// rs1==x18, rd==x24, imm_val == -33, rs1_val == -3
// opcode: andi ; op1:x18; dest:x24; op1val:-0x3;  immval:-0x21
TEST_IMM_OP( andi, x24, x18, 0xffffffdd, -0x3, -0x21, x2, 16, x6)
90000240:	ffd00913          	li	s2,-3
90000244:	fdf97c13          	andi	s8,s2,-33
90000248:	01812823          	sw	s8,16(sp)

9000024c <inst_24>:

inst_24:
// rs1==x26, rd==x4, imm_val == -65, 
// opcode: andi ; op1:x26; dest:x4; op1val:-0x6;  immval:-0x41
TEST_IMM_OP( andi, x4, x26, 0xffffffba, -0x6, -0x41, x2, 20, x6)
9000024c:	ffa00d13          	li	s10,-6
90000250:	fbfd7213          	andi	tp,s10,-65
90000254:	00412a23          	sw	tp,20(sp)

90000258 <inst_25>:

inst_25:
// rs1==x30, rd==x28, imm_val == -129, rs1_val == 64
// opcode: andi ; op1:x30; dest:x28; op1val:0x40;  immval:-0x81
TEST_IMM_OP( andi, x28, x30, 0x40, 0x40, -0x81, x2, 24, x6)
90000258:	04000f13          	li	t5,64
9000025c:	f7ff7e13          	andi	t3,t5,-129
90000260:	01c12c23          	sw	t3,24(sp)

90000264 <inst_26>:

inst_26:
// rs1==x19, rd==x0, imm_val == -257, 
// opcode: andi ; op1:x19; dest:x0; op1val:-0xb504;  immval:-0x101
TEST_IMM_OP( andi, x0, x19, 0, -0xb504, -0x101, x2, 28, x6)
90000264:	ffff59b7          	lui	s3,0xffff5
90000268:	afc98993          	addi	s3,s3,-1284 # ffff4afc <_end+0x6fff00f8>
9000026c:	eff9f013          	andi	zero,s3,-257
90000270:	00012e23          	sw	zero,28(sp)

90000274 <inst_27>:

inst_27:
// rs1==x21, rd==x18, imm_val == -513, rs1_val == -32769
// opcode: andi ; op1:x21; dest:x18; op1val:-0x8001;  immval:-0x201
TEST_IMM_OP( andi, x18, x21, 0xffff7dff, -0x8001, -0x201, x2, 32, x6)
90000274:	ffff8ab7          	lui	s5,0xffff8
90000278:	fffa8a93          	addi	s5,s5,-1 # ffff7fff <_end+0x6fff35fb>
9000027c:	dffaf913          	andi	s2,s5,-513
90000280:	03212023          	sw	s2,32(sp)

90000284 <inst_28>:

inst_28:
// rs1==x1, rd==x12, imm_val == -1025, 
// opcode: andi ; op1:x1; dest:x12; op1val:0x40;  immval:-0x401
TEST_IMM_OP( andi, x12, x1, 0x40, 0x40, -0x401, x2, 36, x6)
90000284:	04000093          	li	ra,64
90000288:	bff0f613          	andi	a2,ra,-1025
9000028c:	02c12223          	sw	a2,36(sp)

90000290 <inst_29>:

inst_29:
// rs1==x24, rd==x27, imm_val == 1365, rs1_val == -16385
// opcode: andi ; op1:x24; dest:x27; op1val:-0x4001;  immval:0x555
TEST_IMM_OP( andi, x27, x24, 0x555, -0x4001, 0x555, x2, 40, x6)
90000290:	ffffcc37          	lui	s8,0xffffc
90000294:	fffc0c13          	addi	s8,s8,-1 # ffffbfff <_end+0x6fff75fb>
90000298:	555c7d93          	andi	s11,s8,1365
9000029c:	03b12423          	sw	s11,40(sp)

900002a0 <inst_30>:

inst_30:
// rs1==x11, rd==x31, imm_val == -1366, rs1_val == 1073741824
// opcode: andi ; op1:x11; dest:x31; op1val:0x40000000;  immval:-0x556
TEST_IMM_OP( andi, x31, x11, 0x40000000, 0x40000000, -0x556, x2, 44, x6)
900002a0:	400005b7          	lui	a1,0x40000
900002a4:	aaa5ff93          	andi	t6,a1,-1366
900002a8:	03f12623          	sw	t6,44(sp)

900002ac <inst_31>:

inst_31:
// rs1==x14, rd==x15, rs1_val == 2, 
// opcode: andi ; op1:x14; dest:x15; op1val:0x2;  immval:0x8
TEST_IMM_OP( andi, x15, x14, 0x0, 0x2, 0x8, x2, 48, x6)
900002ac:	00200713          	li	a4,2
900002b0:	00877793          	andi	a5,a4,8
900002b4:	02f12823          	sw	a5,48(sp)

900002b8 <inst_32>:

inst_32:
// rs1_val == 4, rs1_val==4 and imm_val==1639
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x667, x2, 52, x6)
900002b8:	00400513          	li	a0,4
900002bc:	66757593          	andi	a1,a0,1639
900002c0:	02b12a23          	sw	a1,52(sp)

900002c4 <inst_33>:

inst_33:
// rs1_val == 8, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x8, 0x334, x2, 56, x6)
900002c4:	00800513          	li	a0,8
900002c8:	33457593          	andi	a1,a0,820
900002cc:	02b12c23          	sw	a1,56(sp)

900002d0 <inst_34>:

inst_34:
// rs1_val == 16, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x0, 0x10, 0x2e, x2, 60, x6)
900002d0:	01000513          	li	a0,16
900002d4:	02e57593          	andi	a1,a0,46
900002d8:	02b12e23          	sw	a1,60(sp)

900002dc <inst_35>:

inst_35:
// rs1_val == 32, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20;  immval:0x10
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20, 0x10, x2, 64, x6)
900002dc:	02000513          	li	a0,32
900002e0:	01057593          	andi	a1,a0,16
900002e4:	04b12023          	sw	a1,64(sp)

900002e8 <inst_36>:

inst_36:
// rs1_val == 1024, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x400;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x400, 0x400, -0x2c, x2, 68, x6)
900002e8:	40000513          	li	a0,1024
900002ec:	fd457593          	andi	a1,a0,-44
900002f0:	04b12223          	sw	a1,68(sp)

900002f4 <inst_37>:

inst_37:
// rs1_val == 2048, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x800;  immval:-0x41
TEST_IMM_OP( andi, x11, x10, 0x800, 0x800, -0x41, x2, 72, x6)
900002f4:	00001537          	lui	a0,0x1
900002f8:	80050513          	addi	a0,a0,-2048 # 800 <offset+0x784>
900002fc:	fbf57593          	andi	a1,a0,-65
90000300:	04b12423          	sw	a1,72(sp)

90000304 <inst_38>:

inst_38:
// rs1_val == 4096, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000;  immval:0x40
TEST_IMM_OP( andi, x11, x10, 0x0, 0x1000, 0x40, x2, 76, x6)
90000304:	00001537          	lui	a0,0x1
90000308:	04057593          	andi	a1,a0,64
9000030c:	04b12623          	sw	a1,76(sp)

90000310 <inst_39>:

inst_39:
// rs1_val == 8192, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x2000, 0x2000, -0x2d, x2, 80, x6)
90000310:	00002537          	lui	a0,0x2
90000314:	fd357593          	andi	a1,a0,-45
90000318:	04b12823          	sw	a1,80(sp)

9000031c <inst_40>:

inst_40:
// rs1_val == 32768, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8000;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x8000, 0x8000, -0x556, x2, 84, x6)
9000031c:	00008537          	lui	a0,0x8
90000320:	aaa57593          	andi	a1,a0,-1366
90000324:	04b12a23          	sw	a1,84(sp)

90000328 <inst_41>:

inst_41:
// rs1_val == 65536, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10000;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x0, 0x10000, 0x333, x2, 88, x6)
90000328:	00010537          	lui	a0,0x10
9000032c:	33357593          	andi	a1,a0,819
90000330:	04b12c23          	sw	a1,88(sp)

90000334 <inst_42>:

inst_42:
// rs1_val == 131072, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20000;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20000, 0x332, x2, 92, x6)
90000334:	00020537          	lui	a0,0x20
90000338:	33257593          	andi	a1,a0,818
9000033c:	04b12e23          	sw	a1,92(sp)

90000340 <inst_43>:

inst_43:
// rs1_val == 262144, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x40000;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x40000, 0x556, x2, 96, x6)
90000340:	00040537          	lui	a0,0x40
90000344:	55657593          	andi	a1,a0,1366
90000348:	06b12023          	sw	a1,96(sp)

9000034c <inst_44>:

inst_44:
// rs1_val == 524288, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x80000;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x80000, 0x4, x2, 100, x6)
9000034c:	00080537          	lui	a0,0x80
90000350:	00457593          	andi	a1,a0,4
90000354:	06b12223          	sw	a1,100(sp)

90000358 <inst_45>:

inst_45:
// rs1_val == 1048576, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x100000;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x100000, 0x5, x2, 104, x6)
90000358:	00100537          	lui	a0,0x100
9000035c:	00557593          	andi	a1,a0,5
90000360:	06b12423          	sw	a1,104(sp)

90000364 <inst_46>:

inst_46:
// rs1_val == 4194304, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x400000;  immval:-0x1
TEST_IMM_OP( andi, x11, x10, 0x400000, 0x400000, -0x1, x2, 108, x6)
90000364:	00400537          	lui	a0,0x400
90000368:	fff57593          	andi	a1,a0,-1
9000036c:	06b12623          	sw	a1,108(sp)

90000370 <inst_47>:

inst_47:
// rs1_val == 8388608, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x800000;  immval:-0x6
TEST_IMM_OP( andi, x11, x10, 0x800000, 0x800000, -0x6, x2, 112, x6)
90000370:	00800537          	lui	a0,0x800
90000374:	ffa57593          	andi	a1,a0,-6
90000378:	06b12823          	sw	a1,112(sp)

9000037c <inst_48>:

inst_48:
// rs1_val == 33554432, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000000;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x2000000, 0x2000000, -0x2c, x2, 116, x6)
9000037c:	02000537          	lui	a0,0x2000
90000380:	fd457593          	andi	a1,a0,-44
90000384:	06b12a23          	sw	a1,116(sp)

90000388 <inst_49>:

inst_49:
// rs1_val == 67108864, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4000000;  immval:-0x81
TEST_IMM_OP( andi, x11, x10, 0x4000000, 0x4000000, -0x81, x2, 120, x6)
90000388:	04000537          	lui	a0,0x4000
9000038c:	f7f57593          	andi	a1,a0,-129
90000390:	06b12c23          	sw	a1,120(sp)

90000394 <inst_50>:

inst_50:
// rs1_val == 134217728, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x8000000, 0x0, x2, 124, x6)
90000394:	08000537          	lui	a0,0x8000
90000398:	00057593          	andi	a1,a0,0
9000039c:	06b12e23          	sw	a1,124(sp)

900003a0 <inst_51>:

inst_51:
// rs1_val == 268435456, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x10000000, 0x0, x2, 128, x6)
900003a0:	10000537          	lui	a0,0x10000
900003a4:	00057593          	andi	a1,a0,0
900003a8:	08b12023          	sw	a1,128(sp)

900003ac <inst_52>:

inst_52:
// rs1_val == 536870912, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20000000;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20000000, 0x4, x2, 132, x6)
900003ac:	20000537          	lui	a0,0x20000
900003b0:	00457593          	andi	a1,a0,4
900003b4:	08b12223          	sw	a1,132(sp)

900003b8 <inst_53>:

inst_53:
// rs1_val == -9, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x9;  immval:-0x3
TEST_IMM_OP( andi, x11, x10, 0xfffffff5, -0x9, -0x3, x2, 136, x6)
900003b8:	ff700513          	li	a0,-9
900003bc:	ffd57593          	andi	a1,a0,-3
900003c0:	08b12423          	sw	a1,136(sp)

900003c4 <inst_54>:

inst_54:
// rs1_val == -17, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x11;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x546, -0x11, 0x556, x2, 140, x6)
900003c4:	fef00513          	li	a0,-17
900003c8:	55657593          	andi	a1,a0,1366
900003cc:	08b12623          	sw	a1,140(sp)

900003d0 <inst_55>:

inst_55:
// rs1_val == -33, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x21;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, -0x21, 0x4, x2, 144, x6)
900003d0:	fdf00513          	li	a0,-33
900003d4:	00457593          	andi	a1,a0,4
900003d8:	08b12823          	sw	a1,144(sp)

900003dc <inst_56>:

inst_56:
// rs1_val == -65, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x41;  immval:0x9
TEST_IMM_OP( andi, x11, x10, 0x9, -0x41, 0x9, x2, 148, x6)
900003dc:	fbf00513          	li	a0,-65
900003e0:	00957593          	andi	a1,a0,9
900003e4:	08b12a23          	sw	a1,148(sp)

900003e8 <inst_57>:

inst_57:
// rs1_val == -129, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x81;  immval:-0x3
TEST_IMM_OP( andi, x11, x10, 0xffffff7d, -0x81, -0x3, x2, 152, x6)
900003e8:	f7f00513          	li	a0,-129
900003ec:	ffd57593          	andi	a1,a0,-3
900003f0:	08b12c23          	sw	a1,152(sp)

900003f4 <inst_58>:

inst_58:
// rs1_val == -257, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x101;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x234, -0x101, 0x334, x2, 156, x6)
900003f4:	eff00513          	li	a0,-257
900003f8:	33457593          	andi	a1,a0,820
900003fc:	08b12e23          	sw	a1,156(sp)

90000400 <inst_59>:

inst_59:
// rs1_val == -513, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x201;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x201, 0x0, x2, 160, x6)
90000400:	dff00513          	li	a0,-513
90000404:	00057593          	andi	a1,a0,0
90000408:	0ab12023          	sw	a1,160(sp)

9000040c <inst_60>:

inst_60:
// rs1_val == -1025, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x401;  immval:0x40
TEST_IMM_OP( andi, x11, x10, 0x40, -0x401, 0x40, x2, 164, x6)
9000040c:	bff00513          	li	a0,-1025
90000410:	04057593          	andi	a1,a0,64
90000414:	0ab12223          	sw	a1,164(sp)

90000418 <inst_61>:

inst_61:
// rs1_val == -2049, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x801;  immval:0x9
TEST_IMM_OP( andi, x11, x10, 0x9, -0x801, 0x9, x2, 168, x6)
90000418:	fffff537          	lui	a0,0xfffff
9000041c:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0x6fffadfb>
90000420:	00957593          	andi	a1,a0,9
90000424:	0ab12423          	sw	a1,168(sp)

90000428 <inst_62>:

inst_62:
// rs1_val == -8193, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x2001;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x667, -0x2001, 0x667, x2, 172, x6)
90000428:	ffffe537          	lui	a0,0xffffe
9000042c:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0x6fff95fb>
90000430:	66757593          	andi	a1,a0,1639
90000434:	0ab12623          	sw	a1,172(sp)

90000438 <inst_63>:

inst_63:
// rs1_val == -65537, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x10001;  immval:0x7ff
TEST_IMM_OP( andi, x11, x10, 0x7ff, -0x10001, 0x7ff, x2, 176, x6)
90000438:	ffff0537          	lui	a0,0xffff0
9000043c:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0x6ffeb5fb>
90000440:	7ff57593          	andi	a1,a0,2047
90000444:	0ab12823          	sw	a1,176(sp)

90000448 <inst_64>:

inst_64:
// rs1_val == -262145, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x40001;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xfffbffd3, -0x40001, -0x2d, x2, 180, x6)
90000448:	fffc0537          	lui	a0,0xfffc0
9000044c:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0x6ffbb5fb>
90000450:	fd357593          	andi	a1,a0,-45
90000454:	0ab12a23          	sw	a1,180(sp)

90000458 <inst_65>:

inst_65:
// rs1_val == -524289, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x80001;  immval:0x200
TEST_IMM_OP( andi, x11, x10, 0x200, -0x80001, 0x200, x2, 184, x6)
90000458:	fff80537          	lui	a0,0xfff80
9000045c:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0x6ff7b5fb>
90000460:	20057593          	andi	a1,a0,512
90000464:	0ab12c23          	sw	a1,184(sp)

90000468 <inst_66>:

inst_66:
// rs1_val == -2097153, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x200001;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xffdfffd4, -0x200001, -0x2c, x2, 188, x6)
90000468:	ffe00537          	lui	a0,0xffe00
9000046c:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0x6fdfb5fb>
90000470:	fd457593          	andi	a1,a0,-44
90000474:	0ab12e23          	sw	a1,188(sp)

90000478 <inst_67>:

inst_67:
// rs1_val == -4194305, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x400001;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, -0x400001, 0x5, x2, 192, x6)
90000478:	ffc00537          	lui	a0,0xffc00
9000047c:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0x6fbfb5fb>
90000480:	00557593          	andi	a1,a0,5
90000484:	0cb12023          	sw	a1,192(sp)

90000488 <inst_68>:

inst_68:
// rs1_val == -8388609, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x800001;  immval:0x7
TEST_IMM_OP( andi, x11, x10, 0x7, -0x800001, 0x7, x2, 196, x6)
90000488:	ff800537          	lui	a0,0xff800
9000048c:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0x6f7fb5fb>
90000490:	00757593          	andi	a1,a0,7
90000494:	0cb12223          	sw	a1,196(sp)

90000498 <inst_69>:

inst_69:
// rs1_val == -16777217, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x1000001;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, -0x1000001, 0x6, x2, 200, x6)
90000498:	ff000537          	lui	a0,0xff000
9000049c:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0x6effb5fb>
900004a0:	00657593          	andi	a1,a0,6
900004a4:	0cb12423          	sw	a1,200(sp)

900004a8 <inst_70>:

inst_70:
// rs1_val == -67108865, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x4000001;  immval:0x8
TEST_IMM_OP( andi, x11, x10, 0x8, -0x4000001, 0x8, x2, 204, x6)
900004a8:	fc000537          	lui	a0,0xfc000
900004ac:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0x6bffb5fb>
900004b0:	00857593          	andi	a1,a0,8
900004b4:	0cb12623          	sw	a1,204(sp)

900004b8 <inst_71>:

inst_71:
// rs1_val == -134217729, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x8000001;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2e, -0x8000001, 0x2e, x2, 208, x6)
900004b8:	f8000537          	lui	a0,0xf8000
900004bc:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0x67ffb5fb>
900004c0:	02e57593          	andi	a1,a0,46
900004c4:	0cb12823          	sw	a1,208(sp)

900004c8 <inst_72>:

inst_72:
// rs1_val == -268435457, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x10000001;  immval:0x1
TEST_IMM_OP( andi, x11, x10, 0x1, -0x10000001, 0x1, x2, 212, x6)
900004c8:	f0000537          	lui	a0,0xf0000
900004cc:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0x5fffb5fb>
900004d0:	00157593          	andi	a1,a0,1
900004d4:	0cb12a23          	sw	a1,212(sp)

900004d8 <inst_73>:

inst_73:
// rs1_val == -536870913, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x20000001;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xdfffffd4, -0x20000001, -0x2c, x2, 216, x6)
900004d8:	e0000537          	lui	a0,0xe0000
900004dc:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0x4fffb5fb>
900004e0:	fd457593          	andi	a1,a0,-44
900004e4:	0cb12c23          	sw	a1,216(sp)

900004e8 <inst_74>:

inst_74:
// rs1_val == -1073741825, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x40000001;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x556, -0x40000001, 0x556, x2, 220, x6)
900004e8:	c0000537          	lui	a0,0xc0000
900004ec:	fff50513          	addi	a0,a0,-1 # bfffffff <_end+0x2fffb5fb>
900004f0:	55657593          	andi	a1,a0,1366
900004f4:	0cb12e23          	sw	a1,220(sp)

900004f8 <inst_75>:

inst_75:
// rs1_val == 1431655765, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x5
TEST_IMM_OP( andi, x11, x10, 0x55555551, 0x55555555, -0x5, x2, 224, x6)
900004f8:	55555537          	lui	a0,0x55555
900004fc:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000500:	ffb57593          	andi	a1,a0,-5
90000504:	0eb12023          	sw	a1,224(sp)

90000508 <inst_76>:

inst_76:
// rs1_val == -1431655766, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x80
TEST_IMM_OP( andi, x11, x10, 0x80, -0x55555556, 0x80, x2, 228, x6)
90000508:	aaaab537          	lui	a0,0xaaaab
9000050c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000510:	08057593          	andi	a1,a0,128
90000514:	0eb12223          	sw	a1,228(sp)

90000518 <inst_77>:

inst_77:
// rs1_val==3 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, 0x3, x2, 232, x6)
90000518:	00300513          	li	a0,3
9000051c:	00357593          	andi	a1,a0,3
90000520:	0eb12423          	sw	a1,232(sp)

90000524 <inst_78>:

inst_78:
// rs1_val==3 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x555, x2, 236, x6)
90000524:	00300513          	li	a0,3
90000528:	55557593          	andi	a1,a0,1365
9000052c:	0eb12623          	sw	a1,236(sp)

90000530 <inst_79>:

inst_79:
// rs1_val==3 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, -0x556, x2, 240, x6)
90000530:	00300513          	li	a0,3
90000534:	aaa57593          	andi	a1,a0,-1366
90000538:	0eb12823          	sw	a1,240(sp)

9000053c <inst_80>:

inst_80:
// rs1_val==3 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x5, x2, 244, x6)
9000053c:	00300513          	li	a0,3
90000540:	00557593          	andi	a1,a0,5
90000544:	0eb12a23          	sw	a1,244(sp)

90000548 <inst_81>:

inst_81:
// rs1_val==3 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, 0x333, x2, 248, x6)
90000548:	00300513          	li	a0,3
9000054c:	33357593          	andi	a1,a0,819
90000550:	0eb12c23          	sw	a1,248(sp)

90000554 <inst_82>:

inst_82:
// rs1_val==3 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x666, x2, 252, x6)
90000554:	00300513          	li	a0,3
90000558:	66657593          	andi	a1,a0,1638
9000055c:	0eb12e23          	sw	a1,252(sp)

90000560 <inst_83>:

inst_83:
// rs1_val==3 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, -0x2d, x2, 256, x6)
90000560:	00300513          	li	a0,3
90000564:	fd357593          	andi	a1,a0,-45
90000568:	10b12023          	sw	a1,256(sp)

9000056c <inst_84>:

inst_84:
// rs1_val==3 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x2d, x2, 260, x6)
9000056c:	00300513          	li	a0,3
90000570:	02d57593          	andi	a1,a0,45
90000574:	10b12223          	sw	a1,260(sp)

90000578 <inst_85>:

inst_85:
// rs1_val==3 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x2, x2, 264, x6)
90000578:	00300513          	li	a0,3
9000057c:	00257593          	andi	a1,a0,2
90000580:	10b12423          	sw	a1,264(sp)

90000584 <inst_86>:

inst_86:
// rs1_val==3 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x554, x2, 268, x6)
90000584:	00300513          	li	a0,3
90000588:	55457593          	andi	a1,a0,1364
9000058c:	10b12623          	sw	a1,268(sp)

90000590 <inst_87>:

inst_87:
// rs1_val==3 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x0, x2, 272, x6)
90000590:	00300513          	li	a0,3
90000594:	00057593          	andi	a1,a0,0
90000598:	10b12823          	sw	a1,272(sp)

9000059c <inst_88>:

inst_88:
// rs1_val==3 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x4, x2, 276, x6)
9000059c:	00300513          	li	a0,3
900005a0:	00457593          	andi	a1,a0,4
900005a4:	10b12a23          	sw	a1,276(sp)

900005a8 <inst_89>:

inst_89:
// rs1_val==3 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x332, x2, 280, x6)
900005a8:	00300513          	li	a0,3
900005ac:	33257593          	andi	a1,a0,818
900005b0:	10b12c23          	sw	a1,280(sp)

900005b4 <inst_90>:

inst_90:
// rs1_val==3 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x665, x2, 284, x6)
900005b4:	00300513          	li	a0,3
900005b8:	66557593          	andi	a1,a0,1637
900005bc:	10b12e23          	sw	a1,284(sp)

900005c0 <inst_91>:

inst_91:
// rs1_val==3 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x2c, x2, 288, x6)
900005c0:	00300513          	li	a0,3
900005c4:	02c57593          	andi	a1,a0,44
900005c8:	12b12023          	sw	a1,288(sp)

900005cc <inst_92>:

inst_92:
// rs1_val==3 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x556, x2, 292, x6)
900005cc:	00300513          	li	a0,3
900005d0:	55657593          	andi	a1,a0,1366
900005d4:	12b12223          	sw	a1,292(sp)

900005d8 <inst_93>:

inst_93:
// rs1_val==3 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, -0x555, x2, 296, x6)
900005d8:	00300513          	li	a0,3
900005dc:	aab57593          	andi	a1,a0,-1365
900005e0:	12b12423          	sw	a1,296(sp)

900005e4 <inst_94>:

inst_94:
// rs1_val==3 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x6, x2, 300, x6)
900005e4:	00300513          	li	a0,3
900005e8:	00657593          	andi	a1,a0,6
900005ec:	12b12623          	sw	a1,300(sp)

900005f0 <inst_95>:

inst_95:
// rs1_val==3 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x334, x2, 304, x6)
900005f0:	00300513          	li	a0,3
900005f4:	33457593          	andi	a1,a0,820
900005f8:	12b12823          	sw	a1,304(sp)

900005fc <inst_96>:

inst_96:
// rs1_val==3 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, 0x667, x2, 308, x6)
900005fc:	00300513          	li	a0,3
90000600:	66757593          	andi	a1,a0,1639
90000604:	12b12a23          	sw	a1,308(sp)

90000608 <inst_97>:

inst_97:
// rs1_val==3 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, -0x2c, x2, 312, x6)
90000608:	00300513          	li	a0,3
9000060c:	fd457593          	andi	a1,a0,-44
90000610:	12b12c23          	sw	a1,312(sp)

90000614 <inst_98>:

inst_98:
// rs1_val==3 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x2e, x2, 316, x6)
90000614:	00300513          	li	a0,3
90000618:	02e57593          	andi	a1,a0,46
9000061c:	12b12e23          	sw	a1,316(sp)

90000620 <inst_99>:

inst_99:
// rs1_val==1431655765 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0x55555555, 0x3, x2, 320, x6)
90000620:	55555537          	lui	a0,0x55555
90000624:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000628:	00357593          	andi	a1,a0,3
9000062c:	14b12023          	sw	a1,320(sp)

90000630 <inst_100>:

inst_100:
// rs1_val==1431655765 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x555, 0x55555555, 0x555, x2, 324, x6)
90000630:	55555537          	lui	a0,0x55555
90000634:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000638:	55557593          	andi	a1,a0,1365
9000063c:	14b12223          	sw	a1,324(sp)

90000640 <inst_101>:

inst_101:
// rs1_val==1431655765 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x55555000, 0x55555555, -0x556, x2, 328, x6)
90000640:	55555537          	lui	a0,0x55555
90000644:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000648:	aaa57593          	andi	a1,a0,-1366
9000064c:	14b12423          	sw	a1,328(sp)

90000650 <inst_102>:

inst_102:
// rs1_val==1431655765 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x55555555, 0x5, x2, 332, x6)
90000650:	55555537          	lui	a0,0x55555
90000654:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000658:	00557593          	andi	a1,a0,5
9000065c:	14b12623          	sw	a1,332(sp)

90000660 <inst_103>:

inst_103:
// rs1_val==1431655765 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x111, 0x55555555, 0x333, x2, 336, x6)
90000660:	55555537          	lui	a0,0x55555
90000664:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000668:	33357593          	andi	a1,a0,819
9000066c:	14b12823          	sw	a1,336(sp)

90000670 <inst_104>:

inst_104:
// rs1_val==1431655765 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555555, 0x666, x2, 340, x6)
90000670:	55555537          	lui	a0,0x55555
90000674:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000678:	66657593          	andi	a1,a0,1638
9000067c:	14b12a23          	sw	a1,340(sp)

90000680 <inst_105>:

inst_105:
// rs1_val==1431655765 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x55555551, 0x55555555, -0x2d, x2, 344, x6)
90000680:	55555537          	lui	a0,0x55555
90000684:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000688:	fd357593          	andi	a1,a0,-45
9000068c:	14b12c23          	sw	a1,344(sp)

90000690 <inst_106>:

inst_106:
// rs1_val==1431655765 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x5, 0x55555555, 0x2d, x2, 348, x6)
90000690:	55555537          	lui	a0,0x55555
90000694:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000698:	02d57593          	andi	a1,a0,45
9000069c:	14b12e23          	sw	a1,348(sp)

900006a0 <inst_107>:

inst_107:
// rs1_val==1431655765 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555555, 0x2, x2, 352, x6)
900006a0:	55555537          	lui	a0,0x55555
900006a4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
900006a8:	00257593          	andi	a1,a0,2
900006ac:	16b12023          	sw	a1,352(sp)

900006b0 <inst_108>:

inst_108:
// rs1_val==1431655765 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555555, 0x554, x2, 356, x6)
900006b0:	55555537          	lui	a0,0x55555
900006b4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
900006b8:	55457593          	andi	a1,a0,1364
900006bc:	16b12223          	sw	a1,356(sp)

900006c0 <inst_109>:

inst_109:
// rs1_val==1431655765 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555555, 0x0, x2, 360, x6)
900006c0:	55555537          	lui	a0,0x55555
900006c4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
900006c8:	00057593          	andi	a1,a0,0
900006cc:	16b12423          	sw	a1,360(sp)

900006d0 <inst_110>:

inst_110:
// rs1_val==1431655765 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555555, 0x4, x2, 364, x6)
900006d0:	55555537          	lui	a0,0x55555
900006d4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
900006d8:	00457593          	andi	a1,a0,4
900006dc:	16b12623          	sw	a1,364(sp)

900006e0 <inst_111>:

inst_111:
// rs1_val==1431655765 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x110, 0x55555555, 0x332, x2, 368, x6)
900006e0:	55555537          	lui	a0,0x55555
900006e4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
900006e8:	33257593          	andi	a1,a0,818
900006ec:	16b12823          	sw	a1,368(sp)

900006f0 <inst_112>:

inst_112:
// rs1_val==1431655765 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x445, 0x55555555, 0x665, x2, 372, x6)
900006f0:	55555537          	lui	a0,0x55555
900006f4:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
900006f8:	66557593          	andi	a1,a0,1637
900006fc:	16b12a23          	sw	a1,372(sp)

90000700 <inst_113>:

inst_113:
// rs1_val==1431655765 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555555, 0x2c, x2, 376, x6)
90000700:	55555537          	lui	a0,0x55555
90000704:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000708:	02c57593          	andi	a1,a0,44
9000070c:	16b12c23          	sw	a1,376(sp)

90000710 <inst_114>:

inst_114:
// rs1_val==1431655765 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555555, 0x556, x2, 380, x6)
90000710:	55555537          	lui	a0,0x55555
90000714:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000718:	55657593          	andi	a1,a0,1366
9000071c:	16b12e23          	sw	a1,380(sp)

90000720 <inst_115>:

inst_115:
// rs1_val==1431655765 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x55555001, 0x55555555, -0x555, x2, 384, x6)
90000720:	55555537          	lui	a0,0x55555
90000724:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000728:	aab57593          	andi	a1,a0,-1365
9000072c:	18b12023          	sw	a1,384(sp)

90000730 <inst_116>:

inst_116:
// rs1_val==1431655765 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555555, 0x6, x2, 388, x6)
90000730:	55555537          	lui	a0,0x55555
90000734:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000738:	00657593          	andi	a1,a0,6
9000073c:	18b12223          	sw	a1,388(sp)

90000740 <inst_117>:

inst_117:
// rs1_val==1431655765 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x114, 0x55555555, 0x334, x2, 392, x6)
90000740:	55555537          	lui	a0,0x55555
90000744:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000748:	33457593          	andi	a1,a0,820
9000074c:	18b12423          	sw	a1,392(sp)

90000750 <inst_118>:

inst_118:
// rs1_val==1431655765 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x445, 0x55555555, 0x667, x2, 396, x6)
90000750:	55555537          	lui	a0,0x55555
90000754:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000758:	66757593          	andi	a1,a0,1639
9000075c:	18b12623          	sw	a1,396(sp)

90000760 <inst_119>:

inst_119:
// rs1_val==1431655765 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x55555554, 0x55555555, -0x2c, x2, 400, x6)
90000760:	55555537          	lui	a0,0x55555
90000764:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000768:	fd457593          	andi	a1,a0,-44
9000076c:	18b12823          	sw	a1,400(sp)

90000770 <inst_120>:

inst_120:
// rs1_val==1431655765 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555555, 0x2e, x2, 404, x6)
90000770:	55555537          	lui	a0,0x55555
90000774:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x555554d9>
90000778:	02e57593          	andi	a1,a0,46
9000077c:	18b12a23          	sw	a1,404(sp)

90000780 <inst_121>:

inst_121:
// rs1_val==-1431655766 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555556, 0x3, x2, 408, x6)
90000780:	aaaab537          	lui	a0,0xaaaab
90000784:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000788:	00357593          	andi	a1,a0,3
9000078c:	18b12c23          	sw	a1,408(sp)

90000790 <inst_122>:

inst_122:
// rs1_val==-1431655766 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x555, x2, 412, x6)
90000790:	aaaab537          	lui	a0,0xaaaab
90000794:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000798:	55557593          	andi	a1,a0,1365
9000079c:	18b12e23          	sw	a1,412(sp)

900007a0 <inst_123>:

inst_123:
// rs1_val==-1431655766 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaa, -0x55555556, -0x556, x2, 416, x6)
900007a0:	aaaab537          	lui	a0,0xaaaab
900007a4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900007a8:	aaa57593          	andi	a1,a0,-1366
900007ac:	1ab12023          	sw	a1,416(sp)

900007b0 <inst_124>:

inst_124:
// rs1_val==-1431655766 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x5, x2, 420, x6)
900007b0:	aaaab537          	lui	a0,0xaaaab
900007b4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900007b8:	00557593          	andi	a1,a0,5
900007bc:	1ab12223          	sw	a1,420(sp)

900007c0 <inst_125>:

inst_125:
// rs1_val==-1431655766 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555556, 0x333, x2, 424, x6)
900007c0:	aaaab537          	lui	a0,0xaaaab
900007c4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900007c8:	33357593          	andi	a1,a0,819
900007cc:	1ab12423          	sw	a1,424(sp)

900007d0 <inst_126>:

inst_126:
// rs1_val==-1431655766 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555556, 0x666, x2, 428, x6)
900007d0:	aaaab537          	lui	a0,0xaaaab
900007d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900007d8:	66657593          	andi	a1,a0,1638
900007dc:	1ab12623          	sw	a1,428(sp)

900007e0 <inst_127>:

inst_127:
// rs1_val==-1431655766 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xaaaaaa82, -0x55555556, -0x2d, x2, 432, x6)
900007e0:	aaaab537          	lui	a0,0xaaaab
900007e4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900007e8:	fd357593          	andi	a1,a0,-45
900007ec:	1ab12823          	sw	a1,432(sp)

900007f0 <inst_128>:

inst_128:
// rs1_val==-1431655766 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x28, -0x55555556, 0x2d, x2, 436, x6)
900007f0:	aaaab537          	lui	a0,0xaaaab
900007f4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900007f8:	02d57593          	andi	a1,a0,45
900007fc:	1ab12a23          	sw	a1,436(sp)

90000800 <inst_129>:

inst_129:
// rs1_val==-1431655766 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555556, 0x2, x2, 440, x6)
90000800:	aaaab537          	lui	a0,0xaaaab
90000804:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000808:	00257593          	andi	a1,a0,2
9000080c:	1ab12c23          	sw	a1,440(sp)

90000810 <inst_130>:

inst_130:
// rs1_val==-1431655766 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x554, x2, 444, x6)
90000810:	aaaab537          	lui	a0,0xaaaab
90000814:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000818:	55457593          	andi	a1,a0,1364
9000081c:	1ab12e23          	sw	a1,444(sp)

90000820 <inst_131>:

inst_131:
// rs1_val==-1431655766 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x0, x2, 448, x6)
90000820:	aaaab537          	lui	a0,0xaaaab
90000824:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000828:	00057593          	andi	a1,a0,0
9000082c:	1cb12023          	sw	a1,448(sp)

90000830 <inst_132>:

inst_132:
// rs1_val==-1431655766 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x4, x2, 452, x6)
90000830:	aaaab537          	lui	a0,0xaaaab
90000834:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000838:	00457593          	andi	a1,a0,4
9000083c:	1cb12223          	sw	a1,452(sp)

90000840 <inst_133>:

inst_133:
// rs1_val==-1431655766 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555556, 0x332, x2, 456, x6)
90000840:	aaaab537          	lui	a0,0xaaaab
90000844:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000848:	33257593          	andi	a1,a0,818
9000084c:	1cb12423          	sw	a1,456(sp)

90000850 <inst_134>:

inst_134:
// rs1_val==-1431655766 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x220, -0x55555556, 0x665, x2, 460, x6)
90000850:	aaaab537          	lui	a0,0xaaaab
90000854:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000858:	66557593          	andi	a1,a0,1637
9000085c:	1cb12623          	sw	a1,460(sp)

90000860 <inst_135>:

inst_135:
// rs1_val==-1431655766 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x28, -0x55555556, 0x2c, x2, 464, x6)
90000860:	aaaab537          	lui	a0,0xaaaab
90000864:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000868:	02c57593          	andi	a1,a0,44
9000086c:	1cb12823          	sw	a1,464(sp)

90000870 <inst_136>:

inst_136:
// rs1_val==-1431655766 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555556, 0x556, x2, 468, x6)
90000870:	aaaab537          	lui	a0,0xaaaab
90000874:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000878:	55657593          	andi	a1,a0,1366
9000087c:	1cb12a23          	sw	a1,468(sp)

90000880 <inst_137>:

inst_137:
// rs1_val==-1431655766 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaa, -0x55555556, -0x555, x2, 472, x6)
90000880:	aaaab537          	lui	a0,0xaaaab
90000884:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000888:	aab57593          	andi	a1,a0,-1365
9000088c:	1cb12c23          	sw	a1,472(sp)

90000890 <inst_138>:

inst_138:
// rs1_val==-1431655766 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555556, 0x6, x2, 476, x6)
90000890:	aaaab537          	lui	a0,0xaaaab
90000894:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
90000898:	00657593          	andi	a1,a0,6
9000089c:	1cb12e23          	sw	a1,476(sp)

900008a0 <inst_139>:

inst_139:
// rs1_val==-1431655766 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x220, -0x55555556, 0x334, x2, 480, x6)
900008a0:	aaaab537          	lui	a0,0xaaaab
900008a4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008a8:	33457593          	andi	a1,a0,820
900008ac:	1eb12023          	sw	a1,480(sp)

900008b0 <inst_140>:

inst_140:
// rs1_val==-1431655766 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555556, 0x667, x2, 484, x6)
900008b0:	aaaab537          	lui	a0,0xaaaab
900008b4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008b8:	66757593          	andi	a1,a0,1639
900008bc:	1eb12223          	sw	a1,484(sp)

900008c0 <inst_141>:

inst_141:
// rs1_val==-1431655766 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xaaaaaa80, -0x55555556, -0x2c, x2, 488, x6)
900008c0:	aaaab537          	lui	a0,0xaaaab
900008c4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008c8:	fd457593          	andi	a1,a0,-44
900008cc:	1eb12423          	sw	a1,488(sp)

900008d0 <inst_142>:

inst_142:
// rs1_val==-1431655766 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2a, -0x55555556, 0x2e, x2, 492, x6)
900008d0:	aaaab537          	lui	a0,0xaaaab
900008d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa60a6>
900008d8:	02e57593          	andi	a1,a0,46
900008dc:	1eb12623          	sw	a1,492(sp)

900008e0 <inst_143>:

inst_143:
// rs1_val==5 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, 0x3, x2, 496, x6)
900008e0:	00500513          	li	a0,5
900008e4:	00357593          	andi	a1,a0,3
900008e8:	1eb12823          	sw	a1,496(sp)

900008ec <inst_144>:

inst_144:
// rs1_val==5 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x555, x2, 500, x6)
900008ec:	00500513          	li	a0,5
900008f0:	55557593          	andi	a1,a0,1365
900008f4:	1eb12a23          	sw	a1,500(sp)

900008f8 <inst_145>:

inst_145:
// rs1_val==5 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, -0x556, x2, 504, x6)
900008f8:	00500513          	li	a0,5
900008fc:	aaa57593          	andi	a1,a0,-1366
90000900:	1eb12c23          	sw	a1,504(sp)

90000904 <inst_146>:

inst_146:
// rs1_val==5 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x5, x2, 508, x6)
90000904:	00500513          	li	a0,5
90000908:	00557593          	andi	a1,a0,5
9000090c:	1eb12e23          	sw	a1,508(sp)

90000910 <inst_147>:

inst_147:
// rs1_val==5 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, 0x333, x2, 512, x6)
90000910:	00500513          	li	a0,5
90000914:	33357593          	andi	a1,a0,819
90000918:	20b12023          	sw	a1,512(sp)

9000091c <inst_148>:

inst_148:
// rs1_val==5 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x666, x2, 516, x6)
9000091c:	00500513          	li	a0,5
90000920:	66657593          	andi	a1,a0,1638
90000924:	20b12223          	sw	a1,516(sp)

90000928 <inst_149>:

inst_149:
// rs1_val==5 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, -0x2d, x2, 520, x6)
90000928:	00500513          	li	a0,5
9000092c:	fd357593          	andi	a1,a0,-45
90000930:	20b12423          	sw	a1,520(sp)

90000934 <inst_150>:

inst_150:
// rs1_val==5 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x2d, x2, 524, x6)
90000934:	00500513          	li	a0,5
90000938:	02d57593          	andi	a1,a0,45
9000093c:	20b12623          	sw	a1,524(sp)

90000940 <inst_151>:

inst_151:
// rs1_val==5 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, 0x2, x2, 528, x6)
90000940:	00500513          	li	a0,5
90000944:	00257593          	andi	a1,a0,2
90000948:	20b12823          	sw	a1,528(sp)

9000094c <inst_152>:

inst_152:
// rs1_val==5 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x554, x2, 532, x6)
9000094c:	00500513          	li	a0,5
90000950:	55457593          	andi	a1,a0,1364
90000954:	20b12a23          	sw	a1,532(sp)

90000958 <inst_153>:

inst_153:
// rs1_val==5 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, 0x0, x2, 536, x6)
90000958:	00500513          	li	a0,5
9000095c:	00057593          	andi	a1,a0,0
90000960:	20b12c23          	sw	a1,536(sp)

90000964 <inst_154>:

inst_154:
// rs1_val==5 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x4, x2, 540, x6)
90000964:	00500513          	li	a0,5
90000968:	00457593          	andi	a1,a0,4
9000096c:	20b12e23          	sw	a1,540(sp)

90000970 <inst_155>:

inst_155:
// rs1_val==5 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, 0x332, x2, 544, x6)
90000970:	00500513          	li	a0,5
90000974:	33257593          	andi	a1,a0,818
90000978:	22b12023          	sw	a1,544(sp)

9000097c <inst_156>:

inst_156:
// rs1_val==5 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x665, x2, 548, x6)
9000097c:	00500513          	li	a0,5
90000980:	66557593          	andi	a1,a0,1637
90000984:	22b12223          	sw	a1,548(sp)

90000988 <inst_157>:

inst_157:
// rs1_val==5 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x2c, x2, 552, x6)
90000988:	00500513          	li	a0,5
9000098c:	02c57593          	andi	a1,a0,44
90000990:	22b12423          	sw	a1,552(sp)

90000994 <inst_158>:

inst_158:
// rs1_val==5 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x556, x2, 556, x6)
90000994:	00500513          	li	a0,5
90000998:	55657593          	andi	a1,a0,1366
9000099c:	22b12623          	sw	a1,556(sp)

900009a0 <inst_159>:

inst_159:
// rs1_val==5 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, -0x555, x2, 560, x6)
900009a0:	00500513          	li	a0,5
900009a4:	aab57593          	andi	a1,a0,-1365
900009a8:	22b12823          	sw	a1,560(sp)

900009ac <inst_160>:

inst_160:
// rs1_val==5 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x6, x2, 564, x6)
900009ac:	00500513          	li	a0,5
900009b0:	00657593          	andi	a1,a0,6
900009b4:	22b12a23          	sw	a1,564(sp)

900009b8 <inst_161>:

inst_161:
// rs1_val==5 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x334, x2, 568, x6)
900009b8:	00500513          	li	a0,5
900009bc:	33457593          	andi	a1,a0,820
900009c0:	22b12c23          	sw	a1,568(sp)

900009c4 <inst_162>:

inst_162:
// rs1_val==5 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x667, x2, 572, x6)
900009c4:	00500513          	li	a0,5
900009c8:	66757593          	andi	a1,a0,1639
900009cc:	22b12e23          	sw	a1,572(sp)

900009d0 <inst_163>:

inst_163:
// rs1_val==5 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, -0x2c, x2, 576, x6)
900009d0:	00500513          	li	a0,5
900009d4:	fd457593          	andi	a1,a0,-44
900009d8:	24b12023          	sw	a1,576(sp)

900009dc <inst_164>:

inst_164:
// rs1_val==5 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x2e, x2, 580, x6)
900009dc:	00500513          	li	a0,5
900009e0:	02e57593          	andi	a1,a0,46
900009e4:	24b12223          	sw	a1,580(sp)

900009e8 <inst_165>:

inst_165:
// rs1_val==858993459 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0x33333333, 0x3, x2, 584, x6)
900009e8:	33333537          	lui	a0,0x33333
900009ec:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
900009f0:	00357593          	andi	a1,a0,3
900009f4:	24b12423          	sw	a1,584(sp)

900009f8 <inst_166>:

inst_166:
// rs1_val==858993459 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x111, 0x33333333, 0x555, x2, 588, x6)
900009f8:	33333537          	lui	a0,0x33333
900009fc:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a00:	55557593          	andi	a1,a0,1365
90000a04:	24b12623          	sw	a1,588(sp)

90000a08 <inst_167>:

inst_167:
// rs1_val==858993459 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x33333222, 0x33333333, -0x556, x2, 592, x6)
90000a08:	33333537          	lui	a0,0x33333
90000a0c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a10:	aaa57593          	andi	a1,a0,-1366
90000a14:	24b12823          	sw	a1,592(sp)

90000a18 <inst_168>:

inst_168:
// rs1_val==858993459 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, 0x33333333, 0x5, x2, 596, x6)
90000a18:	33333537          	lui	a0,0x33333
90000a1c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a20:	00557593          	andi	a1,a0,5
90000a24:	24b12a23          	sw	a1,596(sp)

90000a28 <inst_169>:

inst_169:
// rs1_val==858993459 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x333, 0x33333333, 0x333, x2, 600, x6)
90000a28:	33333537          	lui	a0,0x33333
90000a2c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a30:	33357593          	andi	a1,a0,819
90000a34:	24b12c23          	sw	a1,600(sp)

90000a38 <inst_170>:

inst_170:
// rs1_val==858993459 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, 0x33333333, 0x666, x2, 604, x6)
90000a38:	33333537          	lui	a0,0x33333
90000a3c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a40:	66657593          	andi	a1,a0,1638
90000a44:	24b12e23          	sw	a1,604(sp)

90000a48 <inst_171>:

inst_171:
// rs1_val==858993459 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x33333313, 0x33333333, -0x2d, x2, 608, x6)
90000a48:	33333537          	lui	a0,0x33333
90000a4c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a50:	fd357593          	andi	a1,a0,-45
90000a54:	26b12023          	sw	a1,608(sp)

90000a58 <inst_172>:

inst_172:
// rs1_val==858993459 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x21, 0x33333333, 0x2d, x2, 612, x6)
90000a58:	33333537          	lui	a0,0x33333
90000a5c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a60:	02d57593          	andi	a1,a0,45
90000a64:	26b12223          	sw	a1,612(sp)

90000a68 <inst_173>:

inst_173:
// rs1_val==858993459 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333333, 0x2, x2, 616, x6)
90000a68:	33333537          	lui	a0,0x33333
90000a6c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a70:	00257593          	andi	a1,a0,2
90000a74:	26b12423          	sw	a1,616(sp)

90000a78 <inst_174>:

inst_174:
// rs1_val==858993459 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x110, 0x33333333, 0x554, x2, 620, x6)
90000a78:	33333537          	lui	a0,0x33333
90000a7c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a80:	55457593          	andi	a1,a0,1364
90000a84:	26b12623          	sw	a1,620(sp)

90000a88 <inst_175>:

inst_175:
// rs1_val==858993459 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333333, 0x0, x2, 624, x6)
90000a88:	33333537          	lui	a0,0x33333
90000a8c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000a90:	00057593          	andi	a1,a0,0
90000a94:	26b12823          	sw	a1,624(sp)

90000a98 <inst_176>:

inst_176:
// rs1_val==858993459 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333333, 0x4, x2, 628, x6)
90000a98:	33333537          	lui	a0,0x33333
90000a9c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000aa0:	00457593          	andi	a1,a0,4
90000aa4:	26b12a23          	sw	a1,628(sp)

90000aa8 <inst_177>:

inst_177:
// rs1_val==858993459 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x332, 0x33333333, 0x332, x2, 632, x6)
90000aa8:	33333537          	lui	a0,0x33333
90000aac:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000ab0:	33257593          	andi	a1,a0,818
90000ab4:	26b12c23          	sw	a1,632(sp)

90000ab8 <inst_178>:

inst_178:
// rs1_val==858993459 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x221, 0x33333333, 0x665, x2, 636, x6)
90000ab8:	33333537          	lui	a0,0x33333
90000abc:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000ac0:	66557593          	andi	a1,a0,1637
90000ac4:	26b12e23          	sw	a1,636(sp)

90000ac8 <inst_179>:

inst_179:
// rs1_val==858993459 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x20, 0x33333333, 0x2c, x2, 640, x6)
90000ac8:	33333537          	lui	a0,0x33333
90000acc:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000ad0:	02c57593          	andi	a1,a0,44
90000ad4:	28b12023          	sw	a1,640(sp)

90000ad8 <inst_180>:

inst_180:
// rs1_val==858993459 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x112, 0x33333333, 0x556, x2, 644, x6)
90000ad8:	33333537          	lui	a0,0x33333
90000adc:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000ae0:	55657593          	andi	a1,a0,1366
90000ae4:	28b12223          	sw	a1,644(sp)

90000ae8 <inst_181>:

inst_181:
// rs1_val==858993459 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x33333223, 0x33333333, -0x555, x2, 648, x6)
90000ae8:	33333537          	lui	a0,0x33333
90000aec:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000af0:	aab57593          	andi	a1,a0,-1365
90000af4:	28b12423          	sw	a1,648(sp)

90000af8 <inst_182>:

inst_182:
// rs1_val==858993459 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333333, 0x6, x2, 652, x6)
90000af8:	33333537          	lui	a0,0x33333
90000afc:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000b00:	00657593          	andi	a1,a0,6
90000b04:	28b12623          	sw	a1,652(sp)

90000b08 <inst_183>:

inst_183:
// rs1_val==858993459 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x330, 0x33333333, 0x334, x2, 656, x6)
90000b08:	33333537          	lui	a0,0x33333
90000b0c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000b10:	33457593          	andi	a1,a0,820
90000b14:	28b12823          	sw	a1,656(sp)

90000b18 <inst_184>:

inst_184:
// rs1_val==858993459 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x223, 0x33333333, 0x667, x2, 660, x6)
90000b18:	33333537          	lui	a0,0x33333
90000b1c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000b20:	66757593          	andi	a1,a0,1639
90000b24:	28b12a23          	sw	a1,660(sp)

90000b28 <inst_185>:

inst_185:
// rs1_val==858993459 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x33333310, 0x33333333, -0x2c, x2, 664, x6)
90000b28:	33333537          	lui	a0,0x33333
90000b2c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000b30:	fd457593          	andi	a1,a0,-44
90000b34:	28b12c23          	sw	a1,664(sp)

90000b38 <inst_186>:

inst_186:
// rs1_val==858993459 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x22, 0x33333333, 0x2e, x2, 668, x6)
90000b38:	33333537          	lui	a0,0x33333
90000b3c:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x333332b7>
90000b40:	02e57593          	andi	a1,a0,46
90000b44:	28b12e23          	sw	a1,668(sp)

90000b48 <inst_187>:

inst_187:
// rs1_val==1717986918 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x66666666, 0x3, x2, 672, x6)
90000b48:	66666537          	lui	a0,0x66666
90000b4c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000b50:	00357593          	andi	a1,a0,3
90000b54:	2ab12023          	sw	a1,672(sp)

90000b58 <inst_188>:

inst_188:
// rs1_val==1717986918 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666666, 0x555, x2, 676, x6)
90000b58:	66666537          	lui	a0,0x66666
90000b5c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000b60:	55557593          	andi	a1,a0,1365
90000b64:	2ab12223          	sw	a1,676(sp)

90000b68 <inst_189>:

inst_189:
// rs1_val==1717986918 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x66666222, 0x66666666, -0x556, x2, 680, x6)
90000b68:	66666537          	lui	a0,0x66666
90000b6c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000b70:	aaa57593          	andi	a1,a0,-1366
90000b74:	2ab12423          	sw	a1,680(sp)

90000b78 <inst_190>:

inst_190:
// rs1_val==1717986918 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666666, 0x5, x2, 684, x6)
90000b78:	66666537          	lui	a0,0x66666
90000b7c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000b80:	00557593          	andi	a1,a0,5
90000b84:	2ab12623          	sw	a1,684(sp)

90000b88 <inst_191>:

inst_191:
// rs1_val==1717986918 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x222, 0x66666666, 0x333, x2, 688, x6)
90000b88:	66666537          	lui	a0,0x66666
90000b8c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000b90:	33357593          	andi	a1,a0,819
90000b94:	2ab12823          	sw	a1,688(sp)

90000b98 <inst_192>:

inst_192:
// rs1_val==1717986918 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x666, 0x66666666, 0x666, x2, 692, x6)
90000b98:	66666537          	lui	a0,0x66666
90000b9c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000ba0:	66657593          	andi	a1,a0,1638
90000ba4:	2ab12a23          	sw	a1,692(sp)

90000ba8 <inst_193>:

inst_193:
// rs1_val==1717986918 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x66666642, 0x66666666, -0x2d, x2, 696, x6)
90000ba8:	66666537          	lui	a0,0x66666
90000bac:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000bb0:	fd357593          	andi	a1,a0,-45
90000bb4:	2ab12c23          	sw	a1,696(sp)

90000bb8 <inst_194>:

inst_194:
// rs1_val==1717986918 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666666, 0x2d, x2, 700, x6)
90000bb8:	66666537          	lui	a0,0x66666
90000bbc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000bc0:	02d57593          	andi	a1,a0,45
90000bc4:	2ab12e23          	sw	a1,700(sp)

90000bc8 <inst_195>:

inst_195:
// rs1_val==1717986918 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x66666666, 0x2, x2, 704, x6)
90000bc8:	66666537          	lui	a0,0x66666
90000bcc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000bd0:	00257593          	andi	a1,a0,2
90000bd4:	2cb12023          	sw	a1,704(sp)

90000bd8 <inst_196>:

inst_196:
// rs1_val==1717986918 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666666, 0x554, x2, 708, x6)
90000bd8:	66666537          	lui	a0,0x66666
90000bdc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000be0:	55457593          	andi	a1,a0,1364
90000be4:	2cb12223          	sw	a1,708(sp)

90000be8 <inst_197>:

inst_197:
// rs1_val==1717986918 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x66666666, 0x0, x2, 712, x6)
90000be8:	66666537          	lui	a0,0x66666
90000bec:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000bf0:	00057593          	andi	a1,a0,0
90000bf4:	2cb12423          	sw	a1,712(sp)

90000bf8 <inst_198>:

inst_198:
// rs1_val==1717986918 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666666, 0x4, x2, 716, x6)
90000bf8:	66666537          	lui	a0,0x66666
90000bfc:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c00:	00457593          	andi	a1,a0,4
90000c04:	2cb12623          	sw	a1,716(sp)

90000c08 <inst_199>:

inst_199:
// rs1_val==1717986918 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, 0x66666666, 0x332, x2, 720, x6)
90000c08:	66666537          	lui	a0,0x66666
90000c0c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c10:	33257593          	andi	a1,a0,818
90000c14:	2cb12823          	sw	a1,720(sp)

90000c18 <inst_200>:

inst_200:
// rs1_val==1717986918 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x664, 0x66666666, 0x665, x2, 724, x6)
90000c18:	66666537          	lui	a0,0x66666
90000c1c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c20:	66557593          	andi	a1,a0,1637
90000c24:	2cb12a23          	sw	a1,724(sp)

90000c28 <inst_201>:

inst_201:
// rs1_val==1717986918 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666666, 0x2c, x2, 728, x6)
90000c28:	66666537          	lui	a0,0x66666
90000c2c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c30:	02c57593          	andi	a1,a0,44
90000c34:	2cb12c23          	sw	a1,728(sp)

90000c38 <inst_202>:

inst_202:
// rs1_val==1717986918 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x446, 0x66666666, 0x556, x2, 732, x6)
90000c38:	66666537          	lui	a0,0x66666
90000c3c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c40:	55657593          	andi	a1,a0,1366
90000c44:	2cb12e23          	sw	a1,732(sp)

90000c48 <inst_203>:

inst_203:
// rs1_val==1717986918 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x66666222, 0x66666666, -0x555, x2, 736, x6)
90000c48:	66666537          	lui	a0,0x66666
90000c4c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c50:	aab57593          	andi	a1,a0,-1365
90000c54:	2eb12023          	sw	a1,736(sp)

90000c58 <inst_204>:

inst_204:
// rs1_val==1717986918 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x66666666, 0x6, x2, 740, x6)
90000c58:	66666537          	lui	a0,0x66666
90000c5c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c60:	00657593          	andi	a1,a0,6
90000c64:	2eb12223          	sw	a1,740(sp)

90000c68 <inst_205>:

inst_205:
// rs1_val==1717986918 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x224, 0x66666666, 0x334, x2, 744, x6)
90000c68:	66666537          	lui	a0,0x66666
90000c6c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c70:	33457593          	andi	a1,a0,820
90000c74:	2eb12423          	sw	a1,744(sp)

90000c78 <inst_206>:

inst_206:
// rs1_val==1717986918 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x666, 0x66666666, 0x667, x2, 748, x6)
90000c78:	66666537          	lui	a0,0x66666
90000c7c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c80:	66757593          	andi	a1,a0,1639
90000c84:	2eb12623          	sw	a1,748(sp)

90000c88 <inst_207>:

inst_207:
// rs1_val==1717986918 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x66666644, 0x66666666, -0x2c, x2, 752, x6)
90000c88:	66666537          	lui	a0,0x66666
90000c8c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000c90:	fd457593          	andi	a1,a0,-44
90000c94:	2eb12823          	sw	a1,752(sp)

90000c98 <inst_208>:

inst_208:
// rs1_val==1717986918 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x26, 0x66666666, 0x2e, x2, 756, x6)
90000c98:	66666537          	lui	a0,0x66666
90000c9c:	66650513          	addi	a0,a0,1638 # 66666666 <offset+0x666665ea>
90000ca0:	02e57593          	andi	a1,a0,46
90000ca4:	2eb12a23          	sw	a1,756(sp)

90000ca8 <inst_209>:

inst_209:
// rs1_val==-46340 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504, 0x3, x2, 760, x6)
90000ca8:	ffff5537          	lui	a0,0xffff5
90000cac:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000cb0:	00357593          	andi	a1,a0,3
90000cb4:	2eb12c23          	sw	a1,760(sp)

90000cb8 <inst_210>:

inst_210:
// rs1_val==-46340 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb504, 0x555, x2, 764, x6)
90000cb8:	ffff5537          	lui	a0,0xffff5
90000cbc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000cc0:	55557593          	andi	a1,a0,1365
90000cc4:	2eb12e23          	sw	a1,764(sp)

90000cc8 <inst_211>:

inst_211:
// rs1_val==-46340 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xffff4aa8, -0xb504, -0x556, x2, 768, x6)
90000cc8:	ffff5537          	lui	a0,0xffff5
90000ccc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000cd0:	aaa57593          	andi	a1,a0,-1366
90000cd4:	30b12023          	sw	a1,768(sp)

90000cd8 <inst_212>:

inst_212:
// rs1_val==-46340 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504, 0x5, x2, 772, x6)
90000cd8:	ffff5537          	lui	a0,0xffff5
90000cdc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000ce0:	00557593          	andi	a1,a0,5
90000ce4:	30b12223          	sw	a1,772(sp)

90000ce8 <inst_213>:

inst_213:
// rs1_val==-46340 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x230, -0xb504, 0x333, x2, 776, x6)
90000ce8:	ffff5537          	lui	a0,0xffff5
90000cec:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000cf0:	33357593          	andi	a1,a0,819
90000cf4:	30b12423          	sw	a1,776(sp)

90000cf8 <inst_214>:

inst_214:
// rs1_val==-46340 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x264, -0xb504, 0x666, x2, 780, x6)
90000cf8:	ffff5537          	lui	a0,0xffff5
90000cfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d00:	66657593          	andi	a1,a0,1638
90000d04:	30b12623          	sw	a1,780(sp)

90000d08 <inst_215>:

inst_215:
// rs1_val==-46340 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xffff4ad0, -0xb504, -0x2d, x2, 784, x6)
90000d08:	ffff5537          	lui	a0,0xffff5
90000d0c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d10:	fd357593          	andi	a1,a0,-45
90000d14:	30b12823          	sw	a1,784(sp)

90000d18 <inst_216>:

inst_216:
// rs1_val==-46340 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb504, 0x2d, x2, 788, x6)
90000d18:	ffff5537          	lui	a0,0xffff5
90000d1c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d20:	02d57593          	andi	a1,a0,45
90000d24:	30b12a23          	sw	a1,788(sp)

90000d28 <inst_217>:

inst_217:
// rs1_val==-46340 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504, 0x2, x2, 792, x6)
90000d28:	ffff5537          	lui	a0,0xffff5
90000d2c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d30:	00257593          	andi	a1,a0,2
90000d34:	30b12c23          	sw	a1,792(sp)

90000d38 <inst_218>:

inst_218:
// rs1_val==-46340 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb504, 0x554, x2, 796, x6)
90000d38:	ffff5537          	lui	a0,0xffff5
90000d3c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d40:	55457593          	andi	a1,a0,1364
90000d44:	30b12e23          	sw	a1,796(sp)

90000d48 <inst_219>:

inst_219:
// rs1_val==-46340 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504, 0x0, x2, 800, x6)
90000d48:	ffff5537          	lui	a0,0xffff5
90000d4c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d50:	00057593          	andi	a1,a0,0
90000d54:	32b12023          	sw	a1,800(sp)

90000d58 <inst_220>:

inst_220:
// rs1_val==-46340 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504, 0x4, x2, 804, x6)
90000d58:	ffff5537          	lui	a0,0xffff5
90000d5c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d60:	00457593          	andi	a1,a0,4
90000d64:	32b12223          	sw	a1,804(sp)

90000d68 <inst_221>:

inst_221:
// rs1_val==-46340 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x230, -0xb504, 0x332, x2, 808, x6)
90000d68:	ffff5537          	lui	a0,0xffff5
90000d6c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d70:	33257593          	andi	a1,a0,818
90000d74:	32b12423          	sw	a1,808(sp)

90000d78 <inst_222>:

inst_222:
// rs1_val==-46340 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x264, -0xb504, 0x665, x2, 812, x6)
90000d78:	ffff5537          	lui	a0,0xffff5
90000d7c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d80:	66557593          	andi	a1,a0,1637
90000d84:	32b12623          	sw	a1,812(sp)

90000d88 <inst_223>:

inst_223:
// rs1_val==-46340 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb504, 0x2c, x2, 816, x6)
90000d88:	ffff5537          	lui	a0,0xffff5
90000d8c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000d90:	02c57593          	andi	a1,a0,44
90000d94:	32b12823          	sw	a1,816(sp)

90000d98 <inst_224>:

inst_224:
// rs1_val==-46340 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb504, 0x556, x2, 820, x6)
90000d98:	ffff5537          	lui	a0,0xffff5
90000d9c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000da0:	55657593          	andi	a1,a0,1366
90000da4:	32b12a23          	sw	a1,820(sp)

90000da8 <inst_225>:

inst_225:
// rs1_val==-46340 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xffff4aa8, -0xb504, -0x555, x2, 824, x6)
90000da8:	ffff5537          	lui	a0,0xffff5
90000dac:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000db0:	aab57593          	andi	a1,a0,-1365
90000db4:	32b12c23          	sw	a1,824(sp)

90000db8 <inst_226>:

inst_226:
// rs1_val==-46340 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504, 0x6, x2, 828, x6)
90000db8:	ffff5537          	lui	a0,0xffff5
90000dbc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000dc0:	00657593          	andi	a1,a0,6
90000dc4:	32b12e23          	sw	a1,828(sp)

90000dc8 <inst_227>:

inst_227:
// rs1_val==-46340 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x234, -0xb504, 0x334, x2, 832, x6)
90000dc8:	ffff5537          	lui	a0,0xffff5
90000dcc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000dd0:	33457593          	andi	a1,a0,820
90000dd4:	34b12023          	sw	a1,832(sp)

90000dd8 <inst_228>:

inst_228:
// rs1_val==-46340 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x264, -0xb504, 0x667, x2, 836, x6)
90000dd8:	ffff5537          	lui	a0,0xffff5
90000ddc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000de0:	66757593          	andi	a1,a0,1639
90000de4:	34b12223          	sw	a1,836(sp)

90000de8 <inst_229>:

inst_229:
// rs1_val==-46340 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xffff4ad4, -0xb504, -0x2c, x2, 840, x6)
90000de8:	ffff5537          	lui	a0,0xffff5
90000dec:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000df0:	fd457593          	andi	a1,a0,-44
90000df4:	34b12423          	sw	a1,840(sp)

90000df8 <inst_230>:

inst_230:
// rs1_val==-46340 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb504, 0x2e, x2, 844, x6)
90000df8:	ffff5537          	lui	a0,0xffff5
90000dfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90000e00:	02e57593          	andi	a1,a0,46
90000e04:	34b12623          	sw	a1,844(sp)

90000e08 <inst_231>:

inst_231:
// rs1_val==46340 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504, 0x3, x2, 848, x6)
90000e08:	0000b537          	lui	a0,0xb
90000e0c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000e10:	00357593          	andi	a1,a0,3
90000e14:	34b12823          	sw	a1,848(sp)

90000e18 <inst_232>:

inst_232:
// rs1_val==46340 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb504, 0x555, x2, 852, x6)
90000e18:	0000b537          	lui	a0,0xb
90000e1c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000e20:	55557593          	andi	a1,a0,1365
90000e24:	34b12a23          	sw	a1,852(sp)

90000e28 <inst_233>:

inst_233:
// rs1_val==46340 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xb000, 0xb504, -0x556, x2, 856, x6)
90000e28:	0000b537          	lui	a0,0xb
90000e2c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000e30:	aaa57593          	andi	a1,a0,-1366
90000e34:	34b12c23          	sw	a1,856(sp)

90000e38 <inst_234>:

inst_234:
// rs1_val==46340 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x5, x2, 860, x6)
90000e38:	0000b537          	lui	a0,0xb
90000e3c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000e40:	00557593          	andi	a1,a0,5
90000e44:	34b12e23          	sw	a1,860(sp)

90000e48 <inst_235>:

inst_235:
// rs1_val==46340 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x100, 0xb504, 0x333, x2, 864, x6)
90000e48:	0000b537          	lui	a0,0xb
90000e4c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000e50:	33357593          	andi	a1,a0,819
90000e54:	36b12023          	sw	a1,864(sp)

90000e58 <inst_236>:

inst_236:
// rs1_val==46340 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x404, 0xb504, 0x666, x2, 868, x6)
90000e58:	0000b537          	lui	a0,0xb
90000e5c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000e60:	66657593          	andi	a1,a0,1638
90000e64:	36b12223          	sw	a1,868(sp)

90000e68 <inst_237>:

inst_237:
// rs1_val==46340 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xb500, 0xb504, -0x2d, x2, 872, x6)
90000e68:	0000b537          	lui	a0,0xb
90000e6c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000e70:	fd357593          	andi	a1,a0,-45
90000e74:	36b12423          	sw	a1,872(sp)

90000e78 <inst_238>:

inst_238:
// rs1_val==46340 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x2d, x2, 876, x6)
90000e78:	0000b537          	lui	a0,0xb
90000e7c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000e80:	02d57593          	andi	a1,a0,45
90000e84:	36b12623          	sw	a1,876(sp)

90000e88 <inst_239>:

inst_239:
// rs1_val==46340 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504, 0x2, x2, 880, x6)
90000e88:	0000b537          	lui	a0,0xb
90000e8c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000e90:	00257593          	andi	a1,a0,2
90000e94:	36b12823          	sw	a1,880(sp)

90000e98 <inst_240>:

inst_240:
// rs1_val==46340 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb504, 0x554, x2, 884, x6)
90000e98:	0000b537          	lui	a0,0xb
90000e9c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000ea0:	55457593          	andi	a1,a0,1364
90000ea4:	36b12a23          	sw	a1,884(sp)

90000ea8 <inst_241>:

inst_241:
// rs1_val==46340 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504, 0x0, x2, 888, x6)
90000ea8:	0000b537          	lui	a0,0xb
90000eac:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000eb0:	00057593          	andi	a1,a0,0
90000eb4:	36b12c23          	sw	a1,888(sp)

90000eb8 <inst_242>:

inst_242:
// rs1_val==46340 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x4, x2, 892, x6)
90000eb8:	0000b537          	lui	a0,0xb
90000ebc:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000ec0:	00457593          	andi	a1,a0,4
90000ec4:	36b12e23          	sw	a1,892(sp)

90000ec8 <inst_243>:

inst_243:
// rs1_val==46340 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x100, 0xb504, 0x332, x2, 896, x6)
90000ec8:	0000b537          	lui	a0,0xb
90000ecc:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000ed0:	33257593          	andi	a1,a0,818
90000ed4:	38b12023          	sw	a1,896(sp)

90000ed8 <inst_244>:

inst_244:
// rs1_val==46340 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x404, 0xb504, 0x665, x2, 900, x6)
90000ed8:	0000b537          	lui	a0,0xb
90000edc:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000ee0:	66557593          	andi	a1,a0,1637
90000ee4:	38b12223          	sw	a1,900(sp)

90000ee8 <inst_245>:

inst_245:
// rs1_val==46340 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x2c, x2, 904, x6)
90000ee8:	0000b537          	lui	a0,0xb
90000eec:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000ef0:	02c57593          	andi	a1,a0,44
90000ef4:	38b12423          	sw	a1,904(sp)

90000ef8 <inst_246>:

inst_246:
// rs1_val==46340 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb504, 0x556, x2, 908, x6)
90000ef8:	0000b537          	lui	a0,0xb
90000efc:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000f00:	55657593          	andi	a1,a0,1366
90000f04:	38b12623          	sw	a1,908(sp)

90000f08 <inst_247>:

inst_247:
// rs1_val==46340 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xb000, 0xb504, -0x555, x2, 912, x6)
90000f08:	0000b537          	lui	a0,0xb
90000f0c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000f10:	aab57593          	andi	a1,a0,-1365
90000f14:	38b12823          	sw	a1,912(sp)

90000f18 <inst_248>:

inst_248:
// rs1_val==46340 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x6, x2, 916, x6)
90000f18:	0000b537          	lui	a0,0xb
90000f1c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000f20:	00657593          	andi	a1,a0,6
90000f24:	38b12a23          	sw	a1,916(sp)

90000f28 <inst_249>:

inst_249:
// rs1_val==46340 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x104, 0xb504, 0x334, x2, 920, x6)
90000f28:	0000b537          	lui	a0,0xb
90000f2c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000f30:	33457593          	andi	a1,a0,820
90000f34:	38b12c23          	sw	a1,920(sp)

90000f38 <inst_250>:

inst_250:
// rs1_val==46340 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x404, 0xb504, 0x667, x2, 924, x6)
90000f38:	0000b537          	lui	a0,0xb
90000f3c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000f40:	66757593          	andi	a1,a0,1639
90000f44:	38b12e23          	sw	a1,924(sp)

90000f48 <inst_251>:

inst_251:
// rs1_val==46340 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xb504, 0xb504, -0x2c, x2, 928, x6)
90000f48:	0000b537          	lui	a0,0xb
90000f4c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000f50:	fd457593          	andi	a1,a0,-44
90000f54:	3ab12023          	sw	a1,928(sp)

90000f58 <inst_252>:

inst_252:
// rs1_val==46340 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x2e, x2, 932, x6)
90000f58:	0000b537          	lui	a0,0xb
90000f5c:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb488>
90000f60:	02e57593          	andi	a1,a0,46
90000f64:	3ab12223          	sw	a1,932(sp)

90000f68 <inst_253>:

inst_253:
// rs1_val==2 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x3, x2, 936, x6)
90000f68:	00200513          	li	a0,2
90000f6c:	00357593          	andi	a1,a0,3
90000f70:	3ab12423          	sw	a1,936(sp)

90000f74 <inst_254>:

inst_254:
// rs1_val==2 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x555, x2, 940, x6)
90000f74:	00200513          	li	a0,2
90000f78:	55557593          	andi	a1,a0,1365
90000f7c:	3ab12623          	sw	a1,940(sp)

90000f80 <inst_255>:

inst_255:
// rs1_val==2 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, -0x556, x2, 944, x6)
90000f80:	00200513          	li	a0,2
90000f84:	aaa57593          	andi	a1,a0,-1366
90000f88:	3ab12823          	sw	a1,944(sp)

90000f8c <inst_256>:

inst_256:
// rs1_val==2 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x5, x2, 948, x6)
90000f8c:	00200513          	li	a0,2
90000f90:	00557593          	andi	a1,a0,5
90000f94:	3ab12a23          	sw	a1,948(sp)

90000f98 <inst_257>:

inst_257:
// rs1_val==2 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x333, x2, 952, x6)
90000f98:	00200513          	li	a0,2
90000f9c:	33357593          	andi	a1,a0,819
90000fa0:	3ab12c23          	sw	a1,952(sp)

90000fa4 <inst_258>:

inst_258:
// rs1_val==2 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x666, x2, 956, x6)
90000fa4:	00200513          	li	a0,2
90000fa8:	66657593          	andi	a1,a0,1638
90000fac:	3ab12e23          	sw	a1,956(sp)

90000fb0 <inst_259>:

inst_259:
// rs1_val==2 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, -0x2d, x2, 960, x6)
90000fb0:	00200513          	li	a0,2
90000fb4:	fd357593          	andi	a1,a0,-45
90000fb8:	3cb12023          	sw	a1,960(sp)

90000fbc <inst_260>:

inst_260:
// rs1_val==2 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x2d, x2, 964, x6)
90000fbc:	00200513          	li	a0,2
90000fc0:	02d57593          	andi	a1,a0,45
90000fc4:	3cb12223          	sw	a1,964(sp)

90000fc8 <inst_261>:

inst_261:
// rs1_val==2 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x2, x2, 968, x6)
90000fc8:	00200513          	li	a0,2
90000fcc:	00257593          	andi	a1,a0,2
90000fd0:	3cb12423          	sw	a1,968(sp)

90000fd4 <inst_262>:

inst_262:
// rs1_val==2 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x554, x2, 972, x6)
90000fd4:	00200513          	li	a0,2
90000fd8:	55457593          	andi	a1,a0,1364
90000fdc:	3cb12623          	sw	a1,972(sp)

90000fe0 <inst_263>:

inst_263:
// rs1_val==2 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x0, x2, 976, x6)
90000fe0:	00200513          	li	a0,2
90000fe4:	00057593          	andi	a1,a0,0
90000fe8:	3cb12823          	sw	a1,976(sp)

90000fec <inst_264>:

inst_264:
// rs1_val==2 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x4, x2, 980, x6)
90000fec:	00200513          	li	a0,2
90000ff0:	00457593          	andi	a1,a0,4
90000ff4:	3cb12a23          	sw	a1,980(sp)

90000ff8 <inst_265>:

inst_265:
// rs1_val==2 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x332, x2, 984, x6)
90000ff8:	00200513          	li	a0,2
90000ffc:	33257593          	andi	a1,a0,818
90001000:	3cb12c23          	sw	a1,984(sp)

90001004 <inst_266>:

inst_266:
// rs1_val==2 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x665, x2, 988, x6)
90001004:	00200513          	li	a0,2
90001008:	66557593          	andi	a1,a0,1637
9000100c:	3cb12e23          	sw	a1,988(sp)

90001010 <inst_267>:

inst_267:
// rs1_val==2 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x2c, x2, 992, x6)
90001010:	00200513          	li	a0,2
90001014:	02c57593          	andi	a1,a0,44
90001018:	3eb12023          	sw	a1,992(sp)

9000101c <inst_268>:

inst_268:
// rs1_val==2 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x556, x2, 996, x6)
9000101c:	00200513          	li	a0,2
90001020:	55657593          	andi	a1,a0,1366
90001024:	3eb12223          	sw	a1,996(sp)

90001028 <inst_269>:

inst_269:
// rs1_val==2 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, -0x555, x2, 1000, x6)
90001028:	00200513          	li	a0,2
9000102c:	aab57593          	andi	a1,a0,-1365
90001030:	3eb12423          	sw	a1,1000(sp)

90001034 <inst_270>:

inst_270:
// rs1_val==2 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x6, x2, 1004, x6)
90001034:	00200513          	li	a0,2
90001038:	00657593          	andi	a1,a0,6
9000103c:	3eb12623          	sw	a1,1004(sp)

90001040 <inst_271>:

inst_271:
// rs1_val==2 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x334, x2, 1008, x6)
90001040:	00200513          	li	a0,2
90001044:	33457593          	andi	a1,a0,820
90001048:	3eb12823          	sw	a1,1008(sp)

9000104c <inst_272>:

inst_272:
// rs1_val==2 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x667, x2, 1012, x6)
9000104c:	00200513          	li	a0,2
90001050:	66757593          	andi	a1,a0,1639
90001054:	3eb12a23          	sw	a1,1012(sp)

90001058 <inst_273>:

inst_273:
// rs1_val==2 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, -0x2c, x2, 1016, x6)
90001058:	00200513          	li	a0,2
9000105c:	fd457593          	andi	a1,a0,-44
90001060:	3eb12c23          	sw	a1,1016(sp)

90001064 <inst_274>:

inst_274:
// rs1_val==2 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x2e, x2, 1020, x6)
90001064:	00200513          	li	a0,2
90001068:	02e57593          	andi	a1,a0,46
9000106c:	3eb12e23          	sw	a1,1020(sp)

90001070 <inst_275>:

inst_275:
// rs1_val==1431655764 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555554, 0x3, x2, 1024, x6)
90001070:	55555537          	lui	a0,0x55555
90001074:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001078:	00357593          	andi	a1,a0,3
9000107c:	40b12023          	sw	a1,1024(sp)

90001080 <inst_276>:

inst_276:
// rs1_val==1431655764 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555554, 0x555, x2, 1028, x6)
90001080:	55555537          	lui	a0,0x55555
90001084:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001088:	55557593          	andi	a1,a0,1365
9000108c:	40b12223          	sw	a1,1028(sp)

90001090 <inst_277>:

inst_277:
// rs1_val==1431655764 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x55555000, 0x55555554, -0x556, x2, 1032, x6)
90001090:	55555537          	lui	a0,0x55555
90001094:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001098:	aaa57593          	andi	a1,a0,-1366
9000109c:	40b12423          	sw	a1,1032(sp)

900010a0 <inst_278>:

inst_278:
// rs1_val==1431655764 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x5, x2, 1036, x6)
900010a0:	55555537          	lui	a0,0x55555
900010a4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
900010a8:	00557593          	andi	a1,a0,5
900010ac:	40b12623          	sw	a1,1036(sp)

900010b0 <inst_279>:

inst_279:
// rs1_val==1431655764 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x110, 0x55555554, 0x333, x2, 1040, x6)
900010b0:	55555537          	lui	a0,0x55555
900010b4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
900010b8:	33357593          	andi	a1,a0,819
900010bc:	40b12823          	sw	a1,1040(sp)

900010c0 <inst_280>:

inst_280:
// rs1_val==1431655764 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555554, 0x666, x2, 1044, x6)
900010c0:	55555537          	lui	a0,0x55555
900010c4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
900010c8:	66657593          	andi	a1,a0,1638
900010cc:	40b12a23          	sw	a1,1044(sp)

900010d0 <inst_281>:

inst_281:
// rs1_val==1431655764 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x55555550, 0x55555554, -0x2d, x2, 1048, x6)
900010d0:	55555537          	lui	a0,0x55555
900010d4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
900010d8:	fd357593          	andi	a1,a0,-45
900010dc:	40b12c23          	sw	a1,1048(sp)

900010e0 <inst_282>:

inst_282:
// rs1_val==1431655764 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x2d, x2, 1052, x6)
900010e0:	55555537          	lui	a0,0x55555
900010e4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
900010e8:	02d57593          	andi	a1,a0,45
900010ec:	40b12e23          	sw	a1,1052(sp)

900010f0 <inst_283>:

inst_283:
// rs1_val==1431655764 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555554, 0x2, x2, 1056, x6)
900010f0:	55555537          	lui	a0,0x55555
900010f4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
900010f8:	00257593          	andi	a1,a0,2
900010fc:	42b12023          	sw	a1,1056(sp)

90001100 <inst_284>:

inst_284:
// rs1_val==1431655764 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555554, 0x554, x2, 1060, x6)
90001100:	55555537          	lui	a0,0x55555
90001104:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001108:	55457593          	andi	a1,a0,1364
9000110c:	42b12223          	sw	a1,1060(sp)

90001110 <inst_285>:

inst_285:
// rs1_val==1431655764 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555554, 0x0, x2, 1064, x6)
90001110:	55555537          	lui	a0,0x55555
90001114:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001118:	00057593          	andi	a1,a0,0
9000111c:	42b12423          	sw	a1,1064(sp)

90001120 <inst_286>:

inst_286:
// rs1_val==1431655764 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x4, x2, 1068, x6)
90001120:	55555537          	lui	a0,0x55555
90001124:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001128:	00457593          	andi	a1,a0,4
9000112c:	42b12623          	sw	a1,1068(sp)

90001130 <inst_287>:

inst_287:
// rs1_val==1431655764 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x110, 0x55555554, 0x332, x2, 1072, x6)
90001130:	55555537          	lui	a0,0x55555
90001134:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001138:	33257593          	andi	a1,a0,818
9000113c:	42b12823          	sw	a1,1072(sp)

90001140 <inst_288>:

inst_288:
// rs1_val==1431655764 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555554, 0x665, x2, 1076, x6)
90001140:	55555537          	lui	a0,0x55555
90001144:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001148:	66557593          	andi	a1,a0,1637
9000114c:	42b12a23          	sw	a1,1076(sp)

90001150 <inst_289>:

inst_289:
// rs1_val==1431655764 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x2c, x2, 1080, x6)
90001150:	55555537          	lui	a0,0x55555
90001154:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001158:	02c57593          	andi	a1,a0,44
9000115c:	42b12c23          	sw	a1,1080(sp)

90001160 <inst_290>:

inst_290:
// rs1_val==1431655764 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555554, 0x556, x2, 1084, x6)
90001160:	55555537          	lui	a0,0x55555
90001164:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001168:	55657593          	andi	a1,a0,1366
9000116c:	42b12e23          	sw	a1,1084(sp)

90001170 <inst_291>:

inst_291:
// rs1_val==1431655764 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x55555000, 0x55555554, -0x555, x2, 1088, x6)
90001170:	55555537          	lui	a0,0x55555
90001174:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001178:	aab57593          	andi	a1,a0,-1365
9000117c:	44b12023          	sw	a1,1088(sp)

90001180 <inst_292>:

inst_292:
// rs1_val==1431655764 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x6, x2, 1092, x6)
90001180:	55555537          	lui	a0,0x55555
90001184:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001188:	00657593          	andi	a1,a0,6
9000118c:	44b12223          	sw	a1,1092(sp)

90001190 <inst_293>:

inst_293:
// rs1_val==1431655764 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x114, 0x55555554, 0x334, x2, 1096, x6)
90001190:	55555537          	lui	a0,0x55555
90001194:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
90001198:	33457593          	andi	a1,a0,820
9000119c:	44b12423          	sw	a1,1096(sp)

900011a0 <inst_294>:

inst_294:
// rs1_val==1431655764 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555554, 0x667, x2, 1100, x6)
900011a0:	55555537          	lui	a0,0x55555
900011a4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
900011a8:	66757593          	andi	a1,a0,1639
900011ac:	44b12623          	sw	a1,1100(sp)

900011b0 <inst_295>:

inst_295:
// rs1_val==1431655764 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x55555554, 0x55555554, -0x2c, x2, 1104, x6)
900011b0:	55555537          	lui	a0,0x55555
900011b4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
900011b8:	fd457593          	andi	a1,a0,-44
900011bc:	44b12823          	sw	a1,1104(sp)

900011c0 <inst_296>:

inst_296:
// rs1_val==1431655764 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x2e, x2, 1108, x6)
900011c0:	55555537          	lui	a0,0x55555
900011c4:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x555554d8>
900011c8:	02e57593          	andi	a1,a0,46
900011cc:	44b12a23          	sw	a1,1108(sp)

900011d0 <inst_297>:

inst_297:
// rs1_val==0 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x3, x2, 1112, x6)
900011d0:	00000513          	li	a0,0
900011d4:	00357593          	andi	a1,a0,3
900011d8:	44b12c23          	sw	a1,1112(sp)

900011dc <inst_298>:

inst_298:
// rs1_val==0 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x555, x2, 1116, x6)
900011dc:	00000513          	li	a0,0
900011e0:	55557593          	andi	a1,a0,1365
900011e4:	44b12e23          	sw	a1,1116(sp)

900011e8 <inst_299>:

inst_299:
// rs1_val==0 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x556, x2, 1120, x6)
900011e8:	00000513          	li	a0,0
900011ec:	aaa57593          	andi	a1,a0,-1366
900011f0:	46b12023          	sw	a1,1120(sp)

900011f4 <inst_300>:

inst_300:
// rs1_val==0 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x5, x2, 1124, x6)
900011f4:	00000513          	li	a0,0
900011f8:	00557593          	andi	a1,a0,5
900011fc:	46b12223          	sw	a1,1124(sp)

90001200 <inst_301>:

inst_301:
// rs1_val==0 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x333, x2, 1128, x6)
90001200:	00000513          	li	a0,0
90001204:	33357593          	andi	a1,a0,819
90001208:	46b12423          	sw	a1,1128(sp)

9000120c <inst_302>:

inst_302:
// rs1_val==0 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x666, x2, 1132, x6)
9000120c:	00000513          	li	a0,0
90001210:	66657593          	andi	a1,a0,1638
90001214:	46b12623          	sw	a1,1132(sp)

90001218 <inst_303>:

inst_303:
// rs1_val==0 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x2d, x2, 1136, x6)
90001218:	00000513          	li	a0,0
9000121c:	fd357593          	andi	a1,a0,-45
90001220:	46b12823          	sw	a1,1136(sp)

90001224 <inst_304>:

inst_304:
// rs1_val==0 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2d, x2, 1140, x6)
90001224:	00000513          	li	a0,0
90001228:	02d57593          	andi	a1,a0,45
9000122c:	46b12a23          	sw	a1,1140(sp)

90001230 <inst_305>:

inst_305:
// rs1_val==858993460 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x330, 0x33333334, 0x332, x2, 1144, x6)
90001230:	33333537          	lui	a0,0x33333
90001234:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
90001238:	33257593          	andi	a1,a0,818
9000123c:	46b12c23          	sw	a1,1144(sp)

90001240 <inst_306>:

inst_306:
// rs1_val==858993460 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x224, 0x33333334, 0x665, x2, 1148, x6)
90001240:	33333537          	lui	a0,0x33333
90001244:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
90001248:	66557593          	andi	a1,a0,1637
9000124c:	46b12e23          	sw	a1,1148(sp)

90001250 <inst_307>:

inst_307:
// rs1_val==858993460 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x33333334, 0x2c, x2, 1152, x6)
90001250:	33333537          	lui	a0,0x33333
90001254:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
90001258:	02c57593          	andi	a1,a0,44
9000125c:	48b12023          	sw	a1,1152(sp)

90001260 <inst_308>:

inst_308:
// rs1_val==858993460 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x114, 0x33333334, 0x556, x2, 1156, x6)
90001260:	33333537          	lui	a0,0x33333
90001264:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
90001268:	55657593          	andi	a1,a0,1366
9000126c:	48b12223          	sw	a1,1156(sp)

90001270 <inst_309>:

inst_309:
// rs1_val==858993460 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x33333220, 0x33333334, -0x555, x2, 1160, x6)
90001270:	33333537          	lui	a0,0x33333
90001274:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
90001278:	aab57593          	andi	a1,a0,-1365
9000127c:	48b12423          	sw	a1,1160(sp)

90001280 <inst_310>:

inst_310:
// rs1_val==858993460 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x33333334, 0x6, x2, 1164, x6)
90001280:	33333537          	lui	a0,0x33333
90001284:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
90001288:	00657593          	andi	a1,a0,6
9000128c:	48b12623          	sw	a1,1164(sp)

90001290 <inst_311>:

inst_311:
// rs1_val==858993460 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x334, 0x33333334, 0x334, x2, 1168, x6)
90001290:	33333537          	lui	a0,0x33333
90001294:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
90001298:	33457593          	andi	a1,a0,820
9000129c:	48b12823          	sw	a1,1168(sp)

900012a0 <inst_312>:

inst_312:
// rs1_val==858993460 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x224, 0x33333334, 0x667, x2, 1172, x6)
900012a0:	33333537          	lui	a0,0x33333
900012a4:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
900012a8:	66757593          	andi	a1,a0,1639
900012ac:	48b12a23          	sw	a1,1172(sp)

900012b0 <inst_313>:

inst_313:
// rs1_val==858993460 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x33333314, 0x33333334, -0x2c, x2, 1176, x6)
900012b0:	33333537          	lui	a0,0x33333
900012b4:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
900012b8:	fd457593          	andi	a1,a0,-44
900012bc:	48b12c23          	sw	a1,1176(sp)

900012c0 <inst_314>:

inst_314:
// rs1_val==858993460 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x24, 0x33333334, 0x2e, x2, 1180, x6)
900012c0:	33333537          	lui	a0,0x33333
900012c4:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
900012c8:	02e57593          	andi	a1,a0,46
900012cc:	48b12e23          	sw	a1,1180(sp)

900012d0 <inst_315>:

inst_315:
// rs1_val==1717986919 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0x66666667, 0x3, x2, 1184, x6)
900012d0:	66666537          	lui	a0,0x66666
900012d4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
900012d8:	00357593          	andi	a1,a0,3
900012dc:	4ab12023          	sw	a1,1184(sp)

900012e0 <inst_316>:

inst_316:
// rs1_val==1717986919 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x445, 0x66666667, 0x555, x2, 1188, x6)
900012e0:	66666537          	lui	a0,0x66666
900012e4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
900012e8:	55557593          	andi	a1,a0,1365
900012ec:	4ab12223          	sw	a1,1188(sp)

900012f0 <inst_317>:

inst_317:
// rs1_val==1717986919 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x66666222, 0x66666667, -0x556, x2, 1192, x6)
900012f0:	66666537          	lui	a0,0x66666
900012f4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
900012f8:	aaa57593          	andi	a1,a0,-1366
900012fc:	4ab12423          	sw	a1,1192(sp)

90001300 <inst_318>:

inst_318:
// rs1_val==1717986919 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x66666667, 0x5, x2, 1196, x6)
90001300:	66666537          	lui	a0,0x66666
90001304:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001308:	00557593          	andi	a1,a0,5
9000130c:	4ab12623          	sw	a1,1196(sp)

90001310 <inst_319>:

inst_319:
// rs1_val==1717986919 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x223, 0x66666667, 0x333, x2, 1200, x6)
90001310:	66666537          	lui	a0,0x66666
90001314:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001318:	33357593          	andi	a1,a0,819
9000131c:	4ab12823          	sw	a1,1200(sp)

90001320 <inst_320>:

inst_320:
// rs1_val==1717986919 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x666, 0x66666667, 0x666, x2, 1204, x6)
90001320:	66666537          	lui	a0,0x66666
90001324:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001328:	66657593          	andi	a1,a0,1638
9000132c:	4ab12a23          	sw	a1,1204(sp)

90001330 <inst_321>:

inst_321:
// rs1_val==1717986919 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x66666643, 0x66666667, -0x2d, x2, 1208, x6)
90001330:	66666537          	lui	a0,0x66666
90001334:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001338:	fd357593          	andi	a1,a0,-45
9000133c:	4ab12c23          	sw	a1,1208(sp)

90001340 <inst_322>:

inst_322:
// rs1_val==1717986919 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x25, 0x66666667, 0x2d, x2, 1212, x6)
90001340:	66666537          	lui	a0,0x66666
90001344:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001348:	02d57593          	andi	a1,a0,45
9000134c:	4ab12e23          	sw	a1,1212(sp)

90001350 <inst_323>:

inst_323:
// rs1_val==1717986919 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x66666667, 0x2, x2, 1216, x6)
90001350:	66666537          	lui	a0,0x66666
90001354:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001358:	00257593          	andi	a1,a0,2
9000135c:	4cb12023          	sw	a1,1216(sp)

90001360 <inst_324>:

inst_324:
// rs1_val==1717986919 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666667, 0x554, x2, 1220, x6)
90001360:	66666537          	lui	a0,0x66666
90001364:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001368:	55457593          	andi	a1,a0,1364
9000136c:	4cb12223          	sw	a1,1220(sp)

90001370 <inst_325>:

inst_325:
// rs1_val==1717986919 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x66666667, 0x0, x2, 1224, x6)
90001370:	66666537          	lui	a0,0x66666
90001374:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001378:	00057593          	andi	a1,a0,0
9000137c:	4cb12423          	sw	a1,1224(sp)

90001380 <inst_326>:

inst_326:
// rs1_val==1717986919 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666667, 0x4, x2, 1228, x6)
90001380:	66666537          	lui	a0,0x66666
90001384:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001388:	00457593          	andi	a1,a0,4
9000138c:	4cb12623          	sw	a1,1228(sp)

90001390 <inst_327>:

inst_327:
// rs1_val==1717986919 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, 0x66666667, 0x332, x2, 1232, x6)
90001390:	66666537          	lui	a0,0x66666
90001394:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001398:	33257593          	andi	a1,a0,818
9000139c:	4cb12823          	sw	a1,1232(sp)

900013a0 <inst_328>:

inst_328:
// rs1_val==1717986919 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x665, 0x66666667, 0x665, x2, 1236, x6)
900013a0:	66666537          	lui	a0,0x66666
900013a4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
900013a8:	66557593          	andi	a1,a0,1637
900013ac:	4cb12a23          	sw	a1,1236(sp)

900013b0 <inst_329>:

inst_329:
// rs1_val==1717986919 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666667, 0x2c, x2, 1240, x6)
900013b0:	66666537          	lui	a0,0x66666
900013b4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
900013b8:	02c57593          	andi	a1,a0,44
900013bc:	4cb12c23          	sw	a1,1240(sp)

900013c0 <inst_330>:

inst_330:
// rs1_val==1717986919 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x446, 0x66666667, 0x556, x2, 1244, x6)
900013c0:	66666537          	lui	a0,0x66666
900013c4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
900013c8:	55657593          	andi	a1,a0,1366
900013cc:	4cb12e23          	sw	a1,1244(sp)

900013d0 <inst_331>:

inst_331:
// rs1_val==1717986919 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x66666223, 0x66666667, -0x555, x2, 1248, x6)
900013d0:	66666537          	lui	a0,0x66666
900013d4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
900013d8:	aab57593          	andi	a1,a0,-1365
900013dc:	4eb12023          	sw	a1,1248(sp)

900013e0 <inst_332>:

inst_332:
// rs1_val==1717986919 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x66666667, 0x6, x2, 1252, x6)
900013e0:	66666537          	lui	a0,0x66666
900013e4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
900013e8:	00657593          	andi	a1,a0,6
900013ec:	4eb12223          	sw	a1,1252(sp)

900013f0 <inst_333>:

inst_333:
// rs1_val==1717986919 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x224, 0x66666667, 0x334, x2, 1256, x6)
900013f0:	66666537          	lui	a0,0x66666
900013f4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
900013f8:	33457593          	andi	a1,a0,820
900013fc:	4eb12423          	sw	a1,1256(sp)

90001400 <inst_334>:

inst_334:
// rs1_val==1717986919 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x667, 0x66666667, 0x667, x2, 1260, x6)
90001400:	66666537          	lui	a0,0x66666
90001404:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001408:	66757593          	andi	a1,a0,1639
9000140c:	4eb12623          	sw	a1,1260(sp)

90001410 <inst_335>:

inst_335:
// rs1_val==1717986919 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x66666644, 0x66666667, -0x2c, x2, 1264, x6)
90001410:	66666537          	lui	a0,0x66666
90001414:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001418:	fd457593          	andi	a1,a0,-44
9000141c:	4eb12823          	sw	a1,1264(sp)

90001420 <inst_336>:

inst_336:
// rs1_val==1717986919 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x26, 0x66666667, 0x2e, x2, 1268, x6)
90001420:	66666537          	lui	a0,0x66666
90001424:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x666665eb>
90001428:	02e57593          	andi	a1,a0,46
9000142c:	4eb12a23          	sw	a1,1268(sp)

90001430 <inst_337>:

inst_337:
// rs1_val==-46339 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, -0xb503, 0x3, x2, 1272, x6)
90001430:	ffff5537          	lui	a0,0xffff5
90001434:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001438:	00357593          	andi	a1,a0,3
9000143c:	4eb12c23          	sw	a1,1272(sp)

90001440 <inst_338>:

inst_338:
// rs1_val==-46339 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x55, -0xb503, 0x555, x2, 1276, x6)
90001440:	ffff5537          	lui	a0,0xffff5
90001444:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001448:	55557593          	andi	a1,a0,1365
9000144c:	4eb12e23          	sw	a1,1276(sp)

90001450 <inst_339>:

inst_339:
// rs1_val==-46339 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xffff4aa8, -0xb503, -0x556, x2, 1280, x6)
90001450:	ffff5537          	lui	a0,0xffff5
90001454:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001458:	aaa57593          	andi	a1,a0,-1366
9000145c:	50b12023          	sw	a1,1280(sp)

90001460 <inst_340>:

inst_340:
// rs1_val==-46339 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, -0xb503, 0x5, x2, 1284, x6)
90001460:	ffff5537          	lui	a0,0xffff5
90001464:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001468:	00557593          	andi	a1,a0,5
9000146c:	50b12223          	sw	a1,1284(sp)

90001470 <inst_341>:

inst_341:
// rs1_val==-46339 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x231, -0xb503, 0x333, x2, 1288, x6)
90001470:	ffff5537          	lui	a0,0xffff5
90001474:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001478:	33357593          	andi	a1,a0,819
9000147c:	50b12423          	sw	a1,1288(sp)

90001480 <inst_342>:

inst_342:
// rs1_val==-46339 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x264, -0xb503, 0x666, x2, 1292, x6)
90001480:	ffff5537          	lui	a0,0xffff5
90001484:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001488:	66657593          	andi	a1,a0,1638
9000148c:	50b12623          	sw	a1,1292(sp)

90001490 <inst_343>:

inst_343:
// rs1_val==-46339 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xffff4ad1, -0xb503, -0x2d, x2, 1296, x6)
90001490:	ffff5537          	lui	a0,0xffff5
90001494:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001498:	fd357593          	andi	a1,a0,-45
9000149c:	50b12823          	sw	a1,1296(sp)

900014a0 <inst_344>:

inst_344:
// rs1_val==-46339 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x2d, -0xb503, 0x2d, x2, 1300, x6)
900014a0:	ffff5537          	lui	a0,0xffff5
900014a4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014a8:	02d57593          	andi	a1,a0,45
900014ac:	50b12a23          	sw	a1,1300(sp)

900014b0 <inst_345>:

inst_345:
// rs1_val==-46339 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb503, 0x2, x2, 1304, x6)
900014b0:	ffff5537          	lui	a0,0xffff5
900014b4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014b8:	00257593          	andi	a1,a0,2
900014bc:	50b12c23          	sw	a1,1304(sp)

900014c0 <inst_346>:

inst_346:
// rs1_val==-46339 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb503, 0x554, x2, 1308, x6)
900014c0:	ffff5537          	lui	a0,0xffff5
900014c4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014c8:	55457593          	andi	a1,a0,1364
900014cc:	50b12e23          	sw	a1,1308(sp)

900014d0 <inst_347>:

inst_347:
// rs1_val==-46339 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb503, 0x0, x2, 1312, x6)
900014d0:	ffff5537          	lui	a0,0xffff5
900014d4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014d8:	00057593          	andi	a1,a0,0
900014dc:	52b12023          	sw	a1,1312(sp)

900014e0 <inst_348>:

inst_348:
// rs1_val==-46339 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb503, 0x4, x2, 1316, x6)
900014e0:	ffff5537          	lui	a0,0xffff5
900014e4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014e8:	00457593          	andi	a1,a0,4
900014ec:	52b12223          	sw	a1,1316(sp)

900014f0 <inst_349>:

inst_349:
// rs1_val==-46339 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x230, -0xb503, 0x332, x2, 1320, x6)
900014f0:	ffff5537          	lui	a0,0xffff5
900014f4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
900014f8:	33257593          	andi	a1,a0,818
900014fc:	52b12423          	sw	a1,1320(sp)

90001500 <inst_350>:

inst_350:
// rs1_val==-46339 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x265, -0xb503, 0x665, x2, 1324, x6)
90001500:	ffff5537          	lui	a0,0xffff5
90001504:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001508:	66557593          	andi	a1,a0,1637
9000150c:	52b12623          	sw	a1,1324(sp)

90001510 <inst_351>:

inst_351:
// rs1_val==-46339 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb503, 0x2c, x2, 1328, x6)
90001510:	ffff5537          	lui	a0,0xffff5
90001514:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001518:	02c57593          	andi	a1,a0,44
9000151c:	52b12823          	sw	a1,1328(sp)

90001520 <inst_352>:

inst_352:
// rs1_val==-46339 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb503, 0x556, x2, 1332, x6)
90001520:	ffff5537          	lui	a0,0xffff5
90001524:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001528:	55657593          	andi	a1,a0,1366
9000152c:	52b12a23          	sw	a1,1332(sp)

90001530 <inst_353>:

inst_353:
// rs1_val==-46339 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xffff4aa9, -0xb503, -0x555, x2, 1336, x6)
90001530:	ffff5537          	lui	a0,0xffff5
90001534:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001538:	aab57593          	andi	a1,a0,-1365
9000153c:	52b12c23          	sw	a1,1336(sp)

90001540 <inst_354>:

inst_354:
// rs1_val==-46339 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb503, 0x6, x2, 1340, x6)
90001540:	ffff5537          	lui	a0,0xffff5
90001544:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001548:	00657593          	andi	a1,a0,6
9000154c:	52b12e23          	sw	a1,1340(sp)

90001550 <inst_355>:

inst_355:
// rs1_val==-46339 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x234, -0xb503, 0x334, x2, 1344, x6)
90001550:	ffff5537          	lui	a0,0xffff5
90001554:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001558:	33457593          	andi	a1,a0,820
9000155c:	54b12023          	sw	a1,1344(sp)

90001560 <inst_356>:

inst_356:
// rs1_val==-46339 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x265, -0xb503, 0x667, x2, 1348, x6)
90001560:	ffff5537          	lui	a0,0xffff5
90001564:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001568:	66757593          	andi	a1,a0,1639
9000156c:	54b12223          	sw	a1,1348(sp)

90001570 <inst_357>:

inst_357:
// rs1_val==-46339 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xffff4ad4, -0xb503, -0x2c, x2, 1352, x6)
90001570:	ffff5537          	lui	a0,0xffff5
90001574:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001578:	fd457593          	andi	a1,a0,-44
9000157c:	54b12423          	sw	a1,1352(sp)

90001580 <inst_358>:

inst_358:
// rs1_val==-46339 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb503, 0x2e, x2, 1356, x6)
90001580:	ffff5537          	lui	a0,0xffff5
90001584:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff00f9>
90001588:	02e57593          	andi	a1,a0,46
9000158c:	54b12623          	sw	a1,1356(sp)

90001590 <inst_359>:

inst_359:
// rs1_val==46341 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0xb505, 0x3, x2, 1360, x6)
90001590:	0000b537          	lui	a0,0xb
90001594:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001598:	00357593          	andi	a1,a0,3
9000159c:	54b12823          	sw	a1,1360(sp)

900015a0 <inst_360>:

inst_360:
// rs1_val==46341 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x505, 0xb505, 0x555, x2, 1364, x6)
900015a0:	0000b537          	lui	a0,0xb
900015a4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900015a8:	55557593          	andi	a1,a0,1365
900015ac:	54b12a23          	sw	a1,1364(sp)

900015b0 <inst_361>:

inst_361:
// rs1_val==46341 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xb000, 0xb505, -0x556, x2, 1368, x6)
900015b0:	0000b537          	lui	a0,0xb
900015b4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900015b8:	aaa57593          	andi	a1,a0,-1366
900015bc:	54b12c23          	sw	a1,1368(sp)

900015c0 <inst_362>:

inst_362:
// rs1_val==46341 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0xb505, 0x5, x2, 1372, x6)
900015c0:	0000b537          	lui	a0,0xb
900015c4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900015c8:	00557593          	andi	a1,a0,5
900015cc:	54b12e23          	sw	a1,1372(sp)

900015d0 <inst_363>:

inst_363:
// rs1_val==46341 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x101, 0xb505, 0x333, x2, 1376, x6)
900015d0:	0000b537          	lui	a0,0xb
900015d4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900015d8:	33357593          	andi	a1,a0,819
900015dc:	56b12023          	sw	a1,1376(sp)

900015e0 <inst_364>:

inst_364:
// rs1_val==46341 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x404, 0xb505, 0x666, x2, 1380, x6)
900015e0:	0000b537          	lui	a0,0xb
900015e4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900015e8:	66657593          	andi	a1,a0,1638
900015ec:	56b12223          	sw	a1,1380(sp)

900015f0 <inst_365>:

inst_365:
// rs1_val==46341 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xb501, 0xb505, -0x2d, x2, 1384, x6)
900015f0:	0000b537          	lui	a0,0xb
900015f4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900015f8:	fd357593          	andi	a1,a0,-45
900015fc:	56b12423          	sw	a1,1384(sp)

90001600 <inst_366>:

inst_366:
// rs1_val==46341 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x5, 0xb505, 0x2d, x2, 1388, x6)
90001600:	0000b537          	lui	a0,0xb
90001604:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001608:	02d57593          	andi	a1,a0,45
9000160c:	56b12623          	sw	a1,1388(sp)

90001610 <inst_367>:

inst_367:
// rs1_val==46341 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb505, 0x2, x2, 1392, x6)
90001610:	0000b537          	lui	a0,0xb
90001614:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001618:	00257593          	andi	a1,a0,2
9000161c:	56b12823          	sw	a1,1392(sp)

90001620 <inst_368>:

inst_368:
// rs1_val==46341 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb505, 0x554, x2, 1396, x6)
90001620:	0000b537          	lui	a0,0xb
90001624:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001628:	55457593          	andi	a1,a0,1364
9000162c:	56b12a23          	sw	a1,1396(sp)

90001630 <inst_369>:

inst_369:
// rs1_val==46341 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb505, 0x0, x2, 1400, x6)
90001630:	0000b537          	lui	a0,0xb
90001634:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001638:	00057593          	andi	a1,a0,0
9000163c:	56b12c23          	sw	a1,1400(sp)

90001640 <inst_370>:

inst_370:
// rs1_val==46341 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb505, 0x4, x2, 1404, x6)
90001640:	0000b537          	lui	a0,0xb
90001644:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001648:	00457593          	andi	a1,a0,4
9000164c:	56b12e23          	sw	a1,1404(sp)

90001650 <inst_371>:

inst_371:
// rs1_val==46341 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x100, 0xb505, 0x332, x2, 1408, x6)
90001650:	0000b537          	lui	a0,0xb
90001654:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001658:	33257593          	andi	a1,a0,818
9000165c:	58b12023          	sw	a1,1408(sp)

90001660 <inst_372>:

inst_372:
// rs1_val==46341 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x405, 0xb505, 0x665, x2, 1412, x6)
90001660:	0000b537          	lui	a0,0xb
90001664:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001668:	66557593          	andi	a1,a0,1637
9000166c:	58b12223          	sw	a1,1412(sp)

90001670 <inst_373>:

inst_373:
// rs1_val==46341 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb505, 0x2c, x2, 1416, x6)
90001670:	0000b537          	lui	a0,0xb
90001674:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001678:	02c57593          	andi	a1,a0,44
9000167c:	58b12423          	sw	a1,1416(sp)

90001680 <inst_374>:

inst_374:
// rs1_val==46341 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb505, 0x556, x2, 1420, x6)
90001680:	0000b537          	lui	a0,0xb
90001684:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001688:	55657593          	andi	a1,a0,1366
9000168c:	58b12623          	sw	a1,1420(sp)

90001690 <inst_375>:

inst_375:
// rs1_val==46341 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xb001, 0xb505, -0x555, x2, 1424, x6)
90001690:	0000b537          	lui	a0,0xb
90001694:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
90001698:	aab57593          	andi	a1,a0,-1365
9000169c:	58b12823          	sw	a1,1424(sp)

900016a0 <inst_376>:

inst_376:
// rs1_val==46341 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb505, 0x6, x2, 1428, x6)
900016a0:	0000b537          	lui	a0,0xb
900016a4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900016a8:	00657593          	andi	a1,a0,6
900016ac:	58b12a23          	sw	a1,1428(sp)

900016b0 <inst_377>:

inst_377:
// rs1_val==46341 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x104, 0xb505, 0x334, x2, 1432, x6)
900016b0:	0000b537          	lui	a0,0xb
900016b4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900016b8:	33457593          	andi	a1,a0,820
900016bc:	58b12c23          	sw	a1,1432(sp)

900016c0 <inst_378>:

inst_378:
// rs1_val==46341 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x405, 0xb505, 0x667, x2, 1436, x6)
900016c0:	0000b537          	lui	a0,0xb
900016c4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900016c8:	66757593          	andi	a1,a0,1639
900016cc:	58b12e23          	sw	a1,1436(sp)

900016d0 <inst_379>:

inst_379:
// rs1_val==46341 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xb504, 0xb505, -0x2c, x2, 1440, x6)
900016d0:	0000b537          	lui	a0,0xb
900016d4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900016d8:	fd457593          	andi	a1,a0,-44
900016dc:	5ab12023          	sw	a1,1440(sp)

900016e0 <inst_380>:

inst_380:
// rs1_val==46341 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb505, 0x2e, x2, 1444, x6)
900016e0:	0000b537          	lui	a0,0xb
900016e4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb489>
900016e8:	02e57593          	andi	a1,a0,46
900016ec:	5ab12223          	sw	a1,1444(sp)

900016f0 <inst_381>:

inst_381:
// rs1_val==0 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2, x2, 1448, x6)
900016f0:	00000513          	li	a0,0
900016f4:	00257593          	andi	a1,a0,2
900016f8:	5ab12423          	sw	a1,1448(sp)

900016fc <inst_382>:

inst_382:
// rs1_val==0 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x554, x2, 1452, x6)
900016fc:	00000513          	li	a0,0
90001700:	55457593          	andi	a1,a0,1364
90001704:	5ab12623          	sw	a1,1452(sp)

90001708 <inst_383>:

inst_383:
// rs1_val==0 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x0, x2, 1456, x6)
90001708:	00000513          	li	a0,0
9000170c:	00057593          	andi	a1,a0,0
90001710:	5ab12823          	sw	a1,1456(sp)

90001714 <inst_384>:

inst_384:
// rs1_val==0 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x4, x2, 1460, x6)
90001714:	00000513          	li	a0,0
90001718:	00457593          	andi	a1,a0,4
9000171c:	5ab12a23          	sw	a1,1460(sp)

90001720 <inst_385>:

inst_385:
// rs1_val==0 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x332, x2, 1464, x6)
90001720:	00000513          	li	a0,0
90001724:	33257593          	andi	a1,a0,818
90001728:	5ab12c23          	sw	a1,1464(sp)

9000172c <inst_386>:

inst_386:
// rs1_val==0 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x665, x2, 1468, x6)
9000172c:	00000513          	li	a0,0
90001730:	66557593          	andi	a1,a0,1637
90001734:	5ab12e23          	sw	a1,1468(sp)

90001738 <inst_387>:

inst_387:
// rs1_val==0 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2c, x2, 1472, x6)
90001738:	00000513          	li	a0,0
9000173c:	02c57593          	andi	a1,a0,44
90001740:	5cb12023          	sw	a1,1472(sp)

90001744 <inst_388>:

inst_388:
// rs1_val==0 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x556, x2, 1476, x6)
90001744:	00000513          	li	a0,0
90001748:	55657593          	andi	a1,a0,1366
9000174c:	5cb12223          	sw	a1,1476(sp)

90001750 <inst_389>:

inst_389:
// rs1_val==0 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x555, x2, 1480, x6)
90001750:	00000513          	li	a0,0
90001754:	aab57593          	andi	a1,a0,-1365
90001758:	5cb12423          	sw	a1,1480(sp)

9000175c <inst_390>:

inst_390:
// rs1_val==0 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x6, x2, 1484, x6)
9000175c:	00000513          	li	a0,0
90001760:	00657593          	andi	a1,a0,6
90001764:	5cb12623          	sw	a1,1484(sp)

90001768 <inst_391>:

inst_391:
// rs1_val==0 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x334, x2, 1488, x6)
90001768:	00000513          	li	a0,0
9000176c:	33457593          	andi	a1,a0,820
90001770:	5cb12823          	sw	a1,1488(sp)

90001774 <inst_392>:

inst_392:
// rs1_val==0 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x667, x2, 1492, x6)
90001774:	00000513          	li	a0,0
90001778:	66757593          	andi	a1,a0,1639
9000177c:	5cb12a23          	sw	a1,1492(sp)

90001780 <inst_393>:

inst_393:
// rs1_val==0 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x2c, x2, 1496, x6)
90001780:	00000513          	li	a0,0
90001784:	fd457593          	andi	a1,a0,-44
90001788:	5cb12c23          	sw	a1,1496(sp)

9000178c <inst_394>:

inst_394:
// rs1_val==0 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2e, x2, 1500, x6)
9000178c:	00000513          	li	a0,0
90001790:	02e57593          	andi	a1,a0,46
90001794:	5cb12e23          	sw	a1,1500(sp)

90001798 <inst_395>:

inst_395:
// rs1_val==4 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x3, x2, 1504, x6)
90001798:	00400513          	li	a0,4
9000179c:	00357593          	andi	a1,a0,3
900017a0:	5eb12023          	sw	a1,1504(sp)

900017a4 <inst_396>:

inst_396:
// rs1_val==4 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x555, x2, 1508, x6)
900017a4:	00400513          	li	a0,4
900017a8:	55557593          	andi	a1,a0,1365
900017ac:	5eb12223          	sw	a1,1508(sp)

900017b0 <inst_397>:

inst_397:
// rs1_val==4 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, -0x556, x2, 1512, x6)
900017b0:	00400513          	li	a0,4
900017b4:	aaa57593          	andi	a1,a0,-1366
900017b8:	5eb12423          	sw	a1,1512(sp)

900017bc <inst_398>:

inst_398:
// rs1_val==4 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x5, x2, 1516, x6)
900017bc:	00400513          	li	a0,4
900017c0:	00557593          	andi	a1,a0,5
900017c4:	5eb12623          	sw	a1,1516(sp)

900017c8 <inst_399>:

inst_399:
// rs1_val==4 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x333, x2, 1520, x6)
900017c8:	00400513          	li	a0,4
900017cc:	33357593          	andi	a1,a0,819
900017d0:	5eb12823          	sw	a1,1520(sp)

900017d4 <inst_400>:

inst_400:
// rs1_val==4 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x666, x2, 1524, x6)
900017d4:	00400513          	li	a0,4
900017d8:	66657593          	andi	a1,a0,1638
900017dc:	5eb12a23          	sw	a1,1524(sp)

900017e0 <inst_401>:

inst_401:
// rs1_val==4 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, -0x2d, x2, 1528, x6)
900017e0:	00400513          	li	a0,4
900017e4:	fd357593          	andi	a1,a0,-45
900017e8:	5eb12c23          	sw	a1,1528(sp)

900017ec <inst_402>:

inst_402:
// rs1_val==4 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x2d, x2, 1532, x6)
900017ec:	00400513          	li	a0,4
900017f0:	02d57593          	andi	a1,a0,45
900017f4:	5eb12e23          	sw	a1,1532(sp)

900017f8 <inst_403>:

inst_403:
// rs1_val==4 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x2, x2, 1536, x6)
900017f8:	00400513          	li	a0,4
900017fc:	00257593          	andi	a1,a0,2
90001800:	60b12023          	sw	a1,1536(sp)

90001804 <inst_404>:

inst_404:
// rs1_val==4 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x554, x2, 1540, x6)
90001804:	00400513          	li	a0,4
90001808:	55457593          	andi	a1,a0,1364
9000180c:	60b12223          	sw	a1,1540(sp)

90001810 <inst_405>:

inst_405:
// rs1_val==4 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x0, x2, 1544, x6)
90001810:	00400513          	li	a0,4
90001814:	00057593          	andi	a1,a0,0
90001818:	60b12423          	sw	a1,1544(sp)

9000181c <inst_406>:

inst_406:
// rs1_val==4 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x4, x2, 1548, x6)
9000181c:	00400513          	li	a0,4
90001820:	00457593          	andi	a1,a0,4
90001824:	60b12623          	sw	a1,1548(sp)

90001828 <inst_407>:

inst_407:
// rs1_val==4 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x332, x2, 1552, x6)
90001828:	00400513          	li	a0,4
9000182c:	33257593          	andi	a1,a0,818
90001830:	60b12823          	sw	a1,1552(sp)

90001834 <inst_408>:

inst_408:
// rs1_val==4 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x665, x2, 1556, x6)
90001834:	00400513          	li	a0,4
90001838:	66557593          	andi	a1,a0,1637
9000183c:	60b12a23          	sw	a1,1556(sp)

90001840 <inst_409>:

inst_409:
// rs1_val==4 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x2c, x2, 1560, x6)
90001840:	00400513          	li	a0,4
90001844:	02c57593          	andi	a1,a0,44
90001848:	60b12c23          	sw	a1,1560(sp)

9000184c <inst_410>:

inst_410:
// rs1_val==4 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x556, x2, 1564, x6)
9000184c:	00400513          	li	a0,4
90001850:	55657593          	andi	a1,a0,1366
90001854:	60b12e23          	sw	a1,1564(sp)

90001858 <inst_411>:

inst_411:
// rs1_val==4 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, -0x555, x2, 1568, x6)
90001858:	00400513          	li	a0,4
9000185c:	aab57593          	andi	a1,a0,-1365
90001860:	62b12023          	sw	a1,1568(sp)

90001864 <inst_412>:

inst_412:
// rs1_val==4 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x6, x2, 1572, x6)
90001864:	00400513          	li	a0,4
90001868:	00657593          	andi	a1,a0,6
9000186c:	62b12223          	sw	a1,1572(sp)

90001870 <inst_413>:

inst_413:
// rs1_val==4 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x334, x2, 1576, x6)
90001870:	00400513          	li	a0,4
90001874:	33457593          	andi	a1,a0,820
90001878:	62b12423          	sw	a1,1576(sp)

9000187c <inst_414>:

inst_414:
// rs1_val==4 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, -0x2c, x2, 1580, x6)
9000187c:	00400513          	li	a0,4
90001880:	fd457593          	andi	a1,a0,-44
90001884:	62b12623          	sw	a1,1580(sp)

90001888 <inst_415>:

inst_415:
// rs1_val==4 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x2e, x2, 1584, x6)
90001888:	00400513          	li	a0,4
9000188c:	02e57593          	andi	a1,a0,46
90001890:	62b12823          	sw	a1,1584(sp)

90001894 <inst_416>:

inst_416:
// rs1_val==858993458 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333332, 0x3, x2, 1588, x6)
90001894:	33333537          	lui	a0,0x33333
90001898:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000189c:	00357593          	andi	a1,a0,3
900018a0:	62b12a23          	sw	a1,1588(sp)

900018a4 <inst_417>:

inst_417:
// rs1_val==858993458 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x110, 0x33333332, 0x555, x2, 1592, x6)
900018a4:	33333537          	lui	a0,0x33333
900018a8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900018ac:	55557593          	andi	a1,a0,1365
900018b0:	62b12c23          	sw	a1,1592(sp)

900018b4 <inst_418>:

inst_418:
// rs1_val==858993458 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x33333222, 0x33333332, -0x556, x2, 1596, x6)
900018b4:	33333537          	lui	a0,0x33333
900018b8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900018bc:	aaa57593          	andi	a1,a0,-1366
900018c0:	62b12e23          	sw	a1,1596(sp)

900018c4 <inst_419>:

inst_419:
// rs1_val==858993458 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333332, 0x5, x2, 1600, x6)
900018c4:	33333537          	lui	a0,0x33333
900018c8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900018cc:	00557593          	andi	a1,a0,5
900018d0:	64b12023          	sw	a1,1600(sp)

900018d4 <inst_420>:

inst_420:
// rs1_val==858993458 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x332, 0x33333332, 0x333, x2, 1604, x6)
900018d4:	33333537          	lui	a0,0x33333
900018d8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900018dc:	33357593          	andi	a1,a0,819
900018e0:	64b12223          	sw	a1,1604(sp)

900018e4 <inst_421>:

inst_421:
// rs1_val==858993458 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, 0x33333332, 0x666, x2, 1608, x6)
900018e4:	33333537          	lui	a0,0x33333
900018e8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900018ec:	66657593          	andi	a1,a0,1638
900018f0:	64b12423          	sw	a1,1608(sp)

900018f4 <inst_422>:

inst_422:
// rs1_val==858993458 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x33333312, 0x33333332, -0x2d, x2, 1612, x6)
900018f4:	33333537          	lui	a0,0x33333
900018f8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900018fc:	fd357593          	andi	a1,a0,-45
90001900:	64b12623          	sw	a1,1612(sp)

90001904 <inst_423>:

inst_423:
// rs1_val==858993458 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x20, 0x33333332, 0x2d, x2, 1616, x6)
90001904:	33333537          	lui	a0,0x33333
90001908:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000190c:	02d57593          	andi	a1,a0,45
90001910:	64b12823          	sw	a1,1616(sp)

90001914 <inst_424>:

inst_424:
// rs1_val==858993458 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333332, 0x2, x2, 1620, x6)
90001914:	33333537          	lui	a0,0x33333
90001918:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000191c:	00257593          	andi	a1,a0,2
90001920:	64b12a23          	sw	a1,1620(sp)

90001924 <inst_425>:

inst_425:
// rs1_val==858993458 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x110, 0x33333332, 0x554, x2, 1624, x6)
90001924:	33333537          	lui	a0,0x33333
90001928:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000192c:	55457593          	andi	a1,a0,1364
90001930:	64b12c23          	sw	a1,1624(sp)

90001934 <inst_426>:

inst_426:
// rs1_val==858993458 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333332, 0x0, x2, 1628, x6)
90001934:	33333537          	lui	a0,0x33333
90001938:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000193c:	00057593          	andi	a1,a0,0
90001940:	64b12e23          	sw	a1,1628(sp)

90001944 <inst_427>:

inst_427:
// rs1_val==858993458 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333332, 0x4, x2, 1632, x6)
90001944:	33333537          	lui	a0,0x33333
90001948:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000194c:	00457593          	andi	a1,a0,4
90001950:	66b12023          	sw	a1,1632(sp)

90001954 <inst_428>:

inst_428:
// rs1_val==858993458 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x332, 0x33333332, 0x332, x2, 1636, x6)
90001954:	33333537          	lui	a0,0x33333
90001958:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000195c:	33257593          	andi	a1,a0,818
90001960:	66b12223          	sw	a1,1636(sp)

90001964 <inst_429>:

inst_429:
// rs1_val==858993458 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x220, 0x33333332, 0x665, x2, 1640, x6)
90001964:	33333537          	lui	a0,0x33333
90001968:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000196c:	66557593          	andi	a1,a0,1637
90001970:	66b12423          	sw	a1,1640(sp)

90001974 <inst_430>:

inst_430:
// rs1_val==858993458 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x20, 0x33333332, 0x2c, x2, 1644, x6)
90001974:	33333537          	lui	a0,0x33333
90001978:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000197c:	02c57593          	andi	a1,a0,44
90001980:	66b12623          	sw	a1,1644(sp)

90001984 <inst_431>:

inst_431:
// rs1_val==858993458 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x112, 0x33333332, 0x556, x2, 1648, x6)
90001984:	33333537          	lui	a0,0x33333
90001988:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000198c:	55657593          	andi	a1,a0,1366
90001990:	66b12823          	sw	a1,1648(sp)

90001994 <inst_432>:

inst_432:
// rs1_val==858993458 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x33333222, 0x33333332, -0x555, x2, 1652, x6)
90001994:	33333537          	lui	a0,0x33333
90001998:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
9000199c:	aab57593          	andi	a1,a0,-1365
900019a0:	66b12a23          	sw	a1,1652(sp)

900019a4 <inst_433>:

inst_433:
// rs1_val==858993458 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333332, 0x6, x2, 1656, x6)
900019a4:	33333537          	lui	a0,0x33333
900019a8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900019ac:	00657593          	andi	a1,a0,6
900019b0:	66b12c23          	sw	a1,1656(sp)

900019b4 <inst_434>:

inst_434:
// rs1_val==858993458 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x330, 0x33333332, 0x334, x2, 1660, x6)
900019b4:	33333537          	lui	a0,0x33333
900019b8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900019bc:	33457593          	andi	a1,a0,820
900019c0:	66b12e23          	sw	a1,1660(sp)

900019c4 <inst_435>:

inst_435:
// rs1_val==858993458 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x222, 0x33333332, 0x667, x2, 1664, x6)
900019c4:	33333537          	lui	a0,0x33333
900019c8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900019cc:	66757593          	andi	a1,a0,1639
900019d0:	68b12023          	sw	a1,1664(sp)

900019d4 <inst_436>:

inst_436:
// rs1_val==858993458 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x33333310, 0x33333332, -0x2c, x2, 1668, x6)
900019d4:	33333537          	lui	a0,0x33333
900019d8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900019dc:	fd457593          	andi	a1,a0,-44
900019e0:	68b12223          	sw	a1,1668(sp)

900019e4 <inst_437>:

inst_437:
// rs1_val==858993458 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x22, 0x33333332, 0x2e, x2, 1672, x6)
900019e4:	33333537          	lui	a0,0x33333
900019e8:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x333332b6>
900019ec:	02e57593          	andi	a1,a0,46
900019f0:	68b12423          	sw	a1,1672(sp)

900019f4 <inst_438>:

inst_438:
// rs1_val==1717986917 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0x66666665, 0x3, x2, 1676, x6)
900019f4:	66666537          	lui	a0,0x66666
900019f8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
900019fc:	00357593          	andi	a1,a0,3
90001a00:	68b12623          	sw	a1,1676(sp)

90001a04 <inst_439>:

inst_439:
// rs1_val==1717986917 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x445, 0x66666665, 0x555, x2, 1680, x6)
90001a04:	66666537          	lui	a0,0x66666
90001a08:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a0c:	55557593          	andi	a1,a0,1365
90001a10:	68b12823          	sw	a1,1680(sp)

90001a14 <inst_440>:

inst_440:
// rs1_val==1717986917 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x66666220, 0x66666665, -0x556, x2, 1684, x6)
90001a14:	66666537          	lui	a0,0x66666
90001a18:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a1c:	aaa57593          	andi	a1,a0,-1366
90001a20:	68b12a23          	sw	a1,1684(sp)

90001a24 <inst_441>:

inst_441:
// rs1_val==1717986917 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x66666665, 0x5, x2, 1688, x6)
90001a24:	66666537          	lui	a0,0x66666
90001a28:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a2c:	00557593          	andi	a1,a0,5
90001a30:	68b12c23          	sw	a1,1688(sp)

90001a34 <inst_442>:

inst_442:
// rs1_val==1717986917 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x221, 0x66666665, 0x333, x2, 1692, x6)
90001a34:	66666537          	lui	a0,0x66666
90001a38:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a3c:	33357593          	andi	a1,a0,819
90001a40:	68b12e23          	sw	a1,1692(sp)

90001a44 <inst_443>:

inst_443:
// rs1_val==1717986917 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x664, 0x66666665, 0x666, x2, 1696, x6)
90001a44:	66666537          	lui	a0,0x66666
90001a48:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a4c:	66657593          	andi	a1,a0,1638
90001a50:	6ab12023          	sw	a1,1696(sp)

90001a54 <inst_444>:

inst_444:
// rs1_val==1717986917 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x66666641, 0x66666665, -0x2d, x2, 1700, x6)
90001a54:	66666537          	lui	a0,0x66666
90001a58:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a5c:	fd357593          	andi	a1,a0,-45
90001a60:	6ab12223          	sw	a1,1700(sp)

90001a64 <inst_445>:

inst_445:
// rs1_val==1717986917 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x25, 0x66666665, 0x2d, x2, 1704, x6)
90001a64:	66666537          	lui	a0,0x66666
90001a68:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a6c:	02d57593          	andi	a1,a0,45
90001a70:	6ab12423          	sw	a1,1704(sp)

90001a74 <inst_446>:

inst_446:
// rs1_val==1717986917 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x66666665, 0x2, x2, 1708, x6)
90001a74:	66666537          	lui	a0,0x66666
90001a78:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a7c:	00257593          	andi	a1,a0,2
90001a80:	6ab12623          	sw	a1,1708(sp)

90001a84 <inst_447>:

inst_447:
// rs1_val==1717986917 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666665, 0x554, x2, 1712, x6)
90001a84:	66666537          	lui	a0,0x66666
90001a88:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a8c:	55457593          	andi	a1,a0,1364
90001a90:	6ab12823          	sw	a1,1712(sp)

90001a94 <inst_448>:

inst_448:
// rs1_val==1717986917 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x66666665, 0x0, x2, 1716, x6)
90001a94:	66666537          	lui	a0,0x66666
90001a98:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001a9c:	00057593          	andi	a1,a0,0
90001aa0:	6ab12a23          	sw	a1,1716(sp)

90001aa4 <inst_449>:

inst_449:
// rs1_val==1717986917 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666665, 0x4, x2, 1720, x6)
90001aa4:	66666537          	lui	a0,0x66666
90001aa8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001aac:	00457593          	andi	a1,a0,4
90001ab0:	6ab12c23          	sw	a1,1720(sp)

90001ab4 <inst_450>:

inst_450:
// rs1_val==1717986917 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x220, 0x66666665, 0x332, x2, 1724, x6)
90001ab4:	66666537          	lui	a0,0x66666
90001ab8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001abc:	33257593          	andi	a1,a0,818
90001ac0:	6ab12e23          	sw	a1,1724(sp)

90001ac4 <inst_451>:

inst_451:
// rs1_val==1717986917 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x665, 0x66666665, 0x665, x2, 1728, x6)
90001ac4:	66666537          	lui	a0,0x66666
90001ac8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001acc:	66557593          	andi	a1,a0,1637
90001ad0:	6cb12023          	sw	a1,1728(sp)

90001ad4 <inst_452>:

inst_452:
// rs1_val==1717986917 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666665, 0x2c, x2, 1732, x6)
90001ad4:	66666537          	lui	a0,0x66666
90001ad8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001adc:	02c57593          	andi	a1,a0,44
90001ae0:	6cb12223          	sw	a1,1732(sp)

90001ae4 <inst_453>:

inst_453:
// rs1_val==1717986917 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666665, 0x556, x2, 1736, x6)
90001ae4:	66666537          	lui	a0,0x66666
90001ae8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001aec:	55657593          	andi	a1,a0,1366
90001af0:	6cb12423          	sw	a1,1736(sp)

90001af4 <inst_454>:

inst_454:
// rs1_val==1717986917 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x66666221, 0x66666665, -0x555, x2, 1740, x6)
90001af4:	66666537          	lui	a0,0x66666
90001af8:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001afc:	aab57593          	andi	a1,a0,-1365
90001b00:	6cb12623          	sw	a1,1740(sp)

90001b04 <inst_455>:

inst_455:
// rs1_val==1717986917 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666665, 0x6, x2, 1744, x6)
90001b04:	66666537          	lui	a0,0x66666
90001b08:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001b0c:	00657593          	andi	a1,a0,6
90001b10:	6cb12823          	sw	a1,1744(sp)

90001b14 <inst_456>:

inst_456:
// rs1_val==1717986917 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x224, 0x66666665, 0x334, x2, 1748, x6)
90001b14:	66666537          	lui	a0,0x66666
90001b18:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001b1c:	33457593          	andi	a1,a0,820
90001b20:	6cb12a23          	sw	a1,1748(sp)

90001b24 <inst_457>:

inst_457:
// rs1_val==1717986917 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x665, 0x66666665, 0x667, x2, 1752, x6)
90001b24:	66666537          	lui	a0,0x66666
90001b28:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001b2c:	66757593          	andi	a1,a0,1639
90001b30:	6cb12c23          	sw	a1,1752(sp)

90001b34 <inst_458>:

inst_458:
// rs1_val==1717986917 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x66666644, 0x66666665, -0x2c, x2, 1756, x6)
90001b34:	66666537          	lui	a0,0x66666
90001b38:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001b3c:	fd457593          	andi	a1,a0,-44
90001b40:	6cb12e23          	sw	a1,1756(sp)

90001b44 <inst_459>:

inst_459:
// rs1_val==1717986917 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666665, 0x2e, x2, 1760, x6)
90001b44:	66666537          	lui	a0,0x66666
90001b48:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x666665e9>
90001b4c:	02e57593          	andi	a1,a0,46
90001b50:	6eb12023          	sw	a1,1760(sp)

90001b54 <inst_460>:

inst_460:
// rs1_val==46339 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0xb503, 0x3, x2, 1764, x6)
90001b54:	0000b537          	lui	a0,0xb
90001b58:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001b5c:	00357593          	andi	a1,a0,3
90001b60:	6eb12223          	sw	a1,1764(sp)

90001b64 <inst_461>:

inst_461:
// rs1_val==46339 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x501, 0xb503, 0x555, x2, 1768, x6)
90001b64:	0000b537          	lui	a0,0xb
90001b68:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001b6c:	55557593          	andi	a1,a0,1365
90001b70:	6eb12423          	sw	a1,1768(sp)

90001b74 <inst_462>:

inst_462:
// rs1_val==46339 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xb002, 0xb503, -0x556, x2, 1772, x6)
90001b74:	0000b537          	lui	a0,0xb
90001b78:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001b7c:	aaa57593          	andi	a1,a0,-1366
90001b80:	6eb12623          	sw	a1,1772(sp)

90001b84 <inst_463>:

inst_463:
// rs1_val==46339 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, 0xb503, 0x5, x2, 1776, x6)
90001b84:	0000b537          	lui	a0,0xb
90001b88:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001b8c:	00557593          	andi	a1,a0,5
90001b90:	6eb12823          	sw	a1,1776(sp)

90001b94 <inst_464>:

inst_464:
// rs1_val==46339 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x103, 0xb503, 0x333, x2, 1780, x6)
90001b94:	0000b537          	lui	a0,0xb
90001b98:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001b9c:	33357593          	andi	a1,a0,819
90001ba0:	6eb12a23          	sw	a1,1780(sp)

90001ba4 <inst_465>:

inst_465:
// rs1_val==46339 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x402, 0xb503, 0x666, x2, 1784, x6)
90001ba4:	0000b537          	lui	a0,0xb
90001ba8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001bac:	66657593          	andi	a1,a0,1638
90001bb0:	6eb12c23          	sw	a1,1784(sp)

90001bb4 <inst_466>:

inst_466:
// rs1_val==46339 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xb503, 0xb503, -0x2d, x2, 1788, x6)
90001bb4:	0000b537          	lui	a0,0xb
90001bb8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001bbc:	fd357593          	andi	a1,a0,-45
90001bc0:	6eb12e23          	sw	a1,1788(sp)

90001bc4 <inst_467>:

inst_467:
// rs1_val==46339 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x1, 0xb503, 0x2d, x2, 1792, x6)
90001bc4:	0000b537          	lui	a0,0xb
90001bc8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001bcc:	02d57593          	andi	a1,a0,45
90001bd0:	70b12023          	sw	a1,1792(sp)

90001bd4 <inst_468>:

inst_468:
// rs1_val==46339 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb503, 0x2, x2, 1796, x6)
90001bd4:	0000b537          	lui	a0,0xb
90001bd8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001bdc:	00257593          	andi	a1,a0,2
90001be0:	70b12223          	sw	a1,1796(sp)

90001be4 <inst_469>:

inst_469:
// rs1_val==46339 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x500, 0xb503, 0x554, x2, 1800, x6)
90001be4:	0000b537          	lui	a0,0xb
90001be8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001bec:	55457593          	andi	a1,a0,1364
90001bf0:	70b12423          	sw	a1,1800(sp)

90001bf4 <inst_470>:

inst_470:
// rs1_val==46339 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb503, 0x0, x2, 1804, x6)
90001bf4:	0000b537          	lui	a0,0xb
90001bf8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001bfc:	00057593          	andi	a1,a0,0
90001c00:	70b12623          	sw	a1,1804(sp)

90001c04 <inst_471>:

inst_471:
// rs1_val==46339 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb503, 0x4, x2, 1808, x6)
90001c04:	0000b537          	lui	a0,0xb
90001c08:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c0c:	00457593          	andi	a1,a0,4
90001c10:	70b12823          	sw	a1,1808(sp)

90001c14 <inst_472>:

inst_472:
// rs1_val==46339 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x102, 0xb503, 0x332, x2, 1812, x6)
90001c14:	0000b537          	lui	a0,0xb
90001c18:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c1c:	33257593          	andi	a1,a0,818
90001c20:	70b12a23          	sw	a1,1812(sp)

90001c24 <inst_473>:

inst_473:
// rs1_val==46339 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x401, 0xb503, 0x665, x2, 1816, x6)
90001c24:	0000b537          	lui	a0,0xb
90001c28:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c2c:	66557593          	andi	a1,a0,1637
90001c30:	70b12c23          	sw	a1,1816(sp)

90001c34 <inst_474>:

inst_474:
// rs1_val==46339 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb503, 0x2c, x2, 1820, x6)
90001c34:	0000b537          	lui	a0,0xb
90001c38:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c3c:	02c57593          	andi	a1,a0,44
90001c40:	70b12e23          	sw	a1,1820(sp)

90001c44 <inst_475>:

inst_475:
// rs1_val==46339 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x502, 0xb503, 0x556, x2, 1824, x6)
90001c44:	0000b537          	lui	a0,0xb
90001c48:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c4c:	55657593          	andi	a1,a0,1366
90001c50:	72b12023          	sw	a1,1824(sp)

90001c54 <inst_476>:

inst_476:
// rs1_val==46339 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xb003, 0xb503, -0x555, x2, 1828, x6)
90001c54:	0000b537          	lui	a0,0xb
90001c58:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c5c:	aab57593          	andi	a1,a0,-1365
90001c60:	72b12223          	sw	a1,1828(sp)

90001c64 <inst_477>:

inst_477:
// rs1_val==46339 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb503, 0x6, x2, 1832, x6)
90001c64:	0000b537          	lui	a0,0xb
90001c68:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c6c:	00657593          	andi	a1,a0,6
90001c70:	72b12423          	sw	a1,1832(sp)

90001c74 <inst_478>:

inst_478:
// rs1_val==46339 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x100, 0xb503, 0x334, x2, 1836, x6)
90001c74:	0000b537          	lui	a0,0xb
90001c78:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c7c:	33457593          	andi	a1,a0,820
90001c80:	72b12623          	sw	a1,1836(sp)

90001c84 <inst_479>:

inst_479:
// rs1_val==46339 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x403, 0xb503, 0x667, x2, 1840, x6)
90001c84:	0000b537          	lui	a0,0xb
90001c88:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c8c:	66757593          	andi	a1,a0,1639
90001c90:	72b12823          	sw	a1,1840(sp)

90001c94 <inst_480>:

inst_480:
// rs1_val==46339 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xb500, 0xb503, -0x2c, x2, 1844, x6)
90001c94:	0000b537          	lui	a0,0xb
90001c98:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001c9c:	fd457593          	andi	a1,a0,-44
90001ca0:	72b12a23          	sw	a1,1844(sp)

90001ca4 <inst_481>:

inst_481:
// rs1_val==46339 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb503, 0x2e, x2, 1848, x6)
90001ca4:	0000b537          	lui	a0,0xb
90001ca8:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb487>
90001cac:	02e57593          	andi	a1,a0,46
90001cb0:	72b12c23          	sw	a1,1848(sp)

90001cb4 <inst_482>:

inst_482:
// rs1_val==1431655766 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x55555556, 0x3, x2, 1852, x6)
90001cb4:	55555537          	lui	a0,0x55555
90001cb8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001cbc:	00357593          	andi	a1,a0,3
90001cc0:	72b12e23          	sw	a1,1852(sp)

90001cc4 <inst_483>:

inst_483:
// rs1_val==1431655766 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555556, 0x555, x2, 1856, x6)
90001cc4:	55555537          	lui	a0,0x55555
90001cc8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001ccc:	55557593          	andi	a1,a0,1365
90001cd0:	74b12023          	sw	a1,1856(sp)

90001cd4 <inst_484>:

inst_484:
// rs1_val==1431655766 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x55555002, 0x55555556, -0x556, x2, 1860, x6)
90001cd4:	55555537          	lui	a0,0x55555
90001cd8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001cdc:	aaa57593          	andi	a1,a0,-1366
90001ce0:	74b12223          	sw	a1,1860(sp)

90001ce4 <inst_485>:

inst_485:
// rs1_val==1431655766 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555556, 0x5, x2, 1864, x6)
90001ce4:	55555537          	lui	a0,0x55555
90001ce8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001cec:	00557593          	andi	a1,a0,5
90001cf0:	74b12423          	sw	a1,1864(sp)

90001cf4 <inst_486>:

inst_486:
// rs1_val==1431655766 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x112, 0x55555556, 0x333, x2, 1868, x6)
90001cf4:	55555537          	lui	a0,0x55555
90001cf8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001cfc:	33357593          	andi	a1,a0,819
90001d00:	74b12623          	sw	a1,1868(sp)

90001d04 <inst_487>:

inst_487:
// rs1_val==1431655766 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x446, 0x55555556, 0x666, x2, 1872, x6)
90001d04:	55555537          	lui	a0,0x55555
90001d08:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d0c:	66657593          	andi	a1,a0,1638
90001d10:	74b12823          	sw	a1,1872(sp)

90001d14 <inst_488>:

inst_488:
// rs1_val==1431655766 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x55555552, 0x55555556, -0x2d, x2, 1876, x6)
90001d14:	55555537          	lui	a0,0x55555
90001d18:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d1c:	fd357593          	andi	a1,a0,-45
90001d20:	74b12a23          	sw	a1,1876(sp)

90001d24 <inst_489>:

inst_489:
// rs1_val==1431655766 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555556, 0x2d, x2, 1880, x6)
90001d24:	55555537          	lui	a0,0x55555
90001d28:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d2c:	02d57593          	andi	a1,a0,45
90001d30:	74b12c23          	sw	a1,1880(sp)

90001d34 <inst_490>:

inst_490:
// rs1_val==1431655766 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x55555556, 0x2, x2, 1884, x6)
90001d34:	55555537          	lui	a0,0x55555
90001d38:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d3c:	00257593          	andi	a1,a0,2
90001d40:	74b12e23          	sw	a1,1884(sp)

90001d44 <inst_491>:

inst_491:
// rs1_val==1431655766 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555556, 0x554, x2, 1888, x6)
90001d44:	55555537          	lui	a0,0x55555
90001d48:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d4c:	55457593          	andi	a1,a0,1364
90001d50:	76b12023          	sw	a1,1888(sp)

90001d54 <inst_492>:

inst_492:
// rs1_val==1431655766 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555556, 0x0, x2, 1892, x6)
90001d54:	55555537          	lui	a0,0x55555
90001d58:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d5c:	00057593          	andi	a1,a0,0
90001d60:	76b12223          	sw	a1,1892(sp)

90001d64 <inst_493>:

inst_493:
// rs1_val==1431655766 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555556, 0x4, x2, 1896, x6)
90001d64:	55555537          	lui	a0,0x55555
90001d68:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d6c:	00457593          	andi	a1,a0,4
90001d70:	76b12423          	sw	a1,1896(sp)

90001d74 <inst_494>:

inst_494:
// rs1_val==1431655766 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x112, 0x55555556, 0x332, x2, 1900, x6)
90001d74:	55555537          	lui	a0,0x55555
90001d78:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d7c:	33257593          	andi	a1,a0,818
90001d80:	76b12623          	sw	a1,1900(sp)

90001d84 <inst_495>:

inst_495:
// rs1_val==1431655766 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555556, 0x665, x2, 1904, x6)
90001d84:	55555537          	lui	a0,0x55555
90001d88:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d8c:	66557593          	andi	a1,a0,1637
90001d90:	76b12823          	sw	a1,1904(sp)

90001d94 <inst_496>:

inst_496:
// rs1_val==1431655766 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555556, 0x2c, x2, 1908, x6)
90001d94:	55555537          	lui	a0,0x55555
90001d98:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001d9c:	02c57593          	andi	a1,a0,44
90001da0:	76b12a23          	sw	a1,1908(sp)

90001da4 <inst_497>:

inst_497:
// rs1_val==1431655766 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x556, 0x55555556, 0x556, x2, 1912, x6)
90001da4:	55555537          	lui	a0,0x55555
90001da8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001dac:	55657593          	andi	a1,a0,1366
90001db0:	76b12c23          	sw	a1,1912(sp)

90001db4 <inst_498>:

inst_498:
// rs1_val==1431655766 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x55555002, 0x55555556, -0x555, x2, 1916, x6)
90001db4:	55555537          	lui	a0,0x55555
90001db8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001dbc:	aab57593          	andi	a1,a0,-1365
90001dc0:	76b12e23          	sw	a1,1916(sp)

90001dc4 <inst_499>:

inst_499:
// rs1_val==1431655766 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x55555556, 0x6, x2, 1920, x6)
90001dc4:	55555537          	lui	a0,0x55555
90001dc8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001dcc:	00657593          	andi	a1,a0,6
90001dd0:	78b12023          	sw	a1,1920(sp)

90001dd4 <inst_500>:

inst_500:
// rs1_val==1431655766 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x114, 0x55555556, 0x334, x2, 1924, x6)
90001dd4:	55555537          	lui	a0,0x55555
90001dd8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001ddc:	33457593          	andi	a1,a0,820
90001de0:	78b12223          	sw	a1,1924(sp)

90001de4 <inst_501>:

inst_501:
// rs1_val==1431655766 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x446, 0x55555556, 0x667, x2, 1928, x6)
90001de4:	55555537          	lui	a0,0x55555
90001de8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001dec:	66757593          	andi	a1,a0,1639
90001df0:	78b12423          	sw	a1,1928(sp)

90001df4 <inst_502>:

inst_502:
// rs1_val==1431655766 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x55555554, 0x55555556, -0x2c, x2, 1932, x6)
90001df4:	55555537          	lui	a0,0x55555
90001df8:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001dfc:	fd457593          	andi	a1,a0,-44
90001e00:	78b12623          	sw	a1,1932(sp)

90001e04 <inst_503>:

inst_503:
// rs1_val==1431655766 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x6, 0x55555556, 0x2e, x2, 1936, x6)
90001e04:	55555537          	lui	a0,0x55555
90001e08:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x555554da>
90001e0c:	02e57593          	andi	a1,a0,46
90001e10:	78b12823          	sw	a1,1936(sp)

90001e14 <inst_504>:

inst_504:
// rs1_val==-1431655765 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, -0x55555555, 0x3, x2, 1940, x6)
90001e14:	aaaab537          	lui	a0,0xaaaab
90001e18:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e1c:	00357593          	andi	a1,a0,3
90001e20:	78b12a23          	sw	a1,1940(sp)

90001e24 <inst_505>:

inst_505:
// rs1_val==-1431655765 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x1, -0x55555555, 0x555, x2, 1944, x6)
90001e24:	aaaab537          	lui	a0,0xaaaab
90001e28:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e2c:	55557593          	andi	a1,a0,1365
90001e30:	78b12c23          	sw	a1,1944(sp)

90001e34 <inst_506>:

inst_506:
// rs1_val==-1431655765 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaa, -0x55555555, -0x556, x2, 1948, x6)
90001e34:	aaaab537          	lui	a0,0xaaaab
90001e38:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e3c:	aaa57593          	andi	a1,a0,-1366
90001e40:	78b12e23          	sw	a1,1948(sp)

90001e44 <inst_507>:

inst_507:
// rs1_val==-1431655765 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, -0x55555555, 0x5, x2, 1952, x6)
90001e44:	aaaab537          	lui	a0,0xaaaab
90001e48:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e4c:	00557593          	andi	a1,a0,5
90001e50:	7ab12023          	sw	a1,1952(sp)

90001e54 <inst_508>:

inst_508:
// rs1_val==-1431655765 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x223, -0x55555555, 0x333, x2, 1956, x6)
90001e54:	aaaab537          	lui	a0,0xaaaab
90001e58:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e5c:	33357593          	andi	a1,a0,819
90001e60:	7ab12223          	sw	a1,1956(sp)

90001e64 <inst_509>:

inst_509:
// rs1_val==-1431655765 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555555, 0x666, x2, 1960, x6)
90001e64:	aaaab537          	lui	a0,0xaaaab
90001e68:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e6c:	66657593          	andi	a1,a0,1638
90001e70:	7ab12423          	sw	a1,1960(sp)

90001e74 <inst_510>:

inst_510:
// rs1_val==-1431655765 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xaaaaaa83, -0x55555555, -0x2d, x2, 1964, x6)
90001e74:	aaaab537          	lui	a0,0xaaaab
90001e78:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e7c:	fd357593          	andi	a1,a0,-45
90001e80:	7ab12623          	sw	a1,1964(sp)

90001e84 <inst_511>:

inst_511:
// rs1_val==-1431655765 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x29, -0x55555555, 0x2d, x2, 1968, x6)
90001e84:	aaaab537          	lui	a0,0xaaaab
90001e88:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e8c:	02d57593          	andi	a1,a0,45
90001e90:	7ab12823          	sw	a1,1968(sp)

90001e94 <inst_512>:

inst_512:
// rs1_val==-1431655765 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555555, 0x2, x2, 1972, x6)
90001e94:	aaaab537          	lui	a0,0xaaaab
90001e98:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001e9c:	00257593          	andi	a1,a0,2
90001ea0:	7ab12a23          	sw	a1,1972(sp)

90001ea4 <inst_513>:

inst_513:
// rs1_val==-1431655765 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555555, 0x554, x2, 1976, x6)
90001ea4:	aaaab537          	lui	a0,0xaaaab
90001ea8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001eac:	55457593          	andi	a1,a0,1364
90001eb0:	7ab12c23          	sw	a1,1976(sp)

90001eb4 <inst_514>:

inst_514:
// rs1_val==-1431655765 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555555, 0x0, x2, 1980, x6)
90001eb4:	aaaab537          	lui	a0,0xaaaab
90001eb8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001ebc:	00057593          	andi	a1,a0,0
90001ec0:	7ab12e23          	sw	a1,1980(sp)

90001ec4 <inst_515>:

inst_515:
// rs1_val==-1431655765 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555555, 0x4, x2, 1984, x6)
90001ec4:	aaaab537          	lui	a0,0xaaaab
90001ec8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001ecc:	00457593          	andi	a1,a0,4
90001ed0:	7cb12023          	sw	a1,1984(sp)

90001ed4 <inst_516>:

inst_516:
// rs1_val==-1431655765 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555555, 0x332, x2, 1988, x6)
90001ed4:	aaaab537          	lui	a0,0xaaaab
90001ed8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001edc:	33257593          	andi	a1,a0,818
90001ee0:	7cb12223          	sw	a1,1988(sp)

90001ee4 <inst_517>:

inst_517:
// rs1_val==-1431655765 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x221, -0x55555555, 0x665, x2, 1992, x6)
90001ee4:	aaaab537          	lui	a0,0xaaaab
90001ee8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001eec:	66557593          	andi	a1,a0,1637
90001ef0:	7cb12423          	sw	a1,1992(sp)

90001ef4 <inst_518>:

inst_518:
// rs1_val==-1431655765 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x28, -0x55555555, 0x2c, x2, 1996, x6)
90001ef4:	aaaab537          	lui	a0,0xaaaab
90001ef8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001efc:	02c57593          	andi	a1,a0,44
90001f00:	7cb12623          	sw	a1,1996(sp)

90001f04 <inst_519>:

inst_519:
// rs1_val==-1431655765 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555555, 0x556, x2, 2000, x6)
90001f04:	aaaab537          	lui	a0,0xaaaab
90001f08:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f0c:	55657593          	andi	a1,a0,1366
90001f10:	7cb12823          	sw	a1,2000(sp)

90001f14 <inst_520>:

inst_520:
// rs1_val==-1431655765 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaab, -0x55555555, -0x555, x2, 2004, x6)
90001f14:	aaaab537          	lui	a0,0xaaaab
90001f18:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f1c:	aab57593          	andi	a1,a0,-1365
90001f20:	7cb12a23          	sw	a1,2004(sp)

90001f24 <inst_521>:

inst_521:
// rs1_val==-1431655765 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555555, 0x6, x2, 2008, x6)
90001f24:	aaaab537          	lui	a0,0xaaaab
90001f28:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f2c:	00657593          	andi	a1,a0,6
90001f30:	7cb12c23          	sw	a1,2008(sp)

90001f34 <inst_522>:

inst_522:
// rs1_val==-1431655765 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x220, -0x55555555, 0x334, x2, 2012, x6)
90001f34:	aaaab537          	lui	a0,0xaaaab
90001f38:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f3c:	33457593          	andi	a1,a0,820
90001f40:	7cb12e23          	sw	a1,2012(sp)

90001f44 <inst_523>:

inst_523:
// rs1_val==-1431655765 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x223, -0x55555555, 0x667, x2, 2016, x6)
90001f44:	aaaab537          	lui	a0,0xaaaab
90001f48:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f4c:	66757593          	andi	a1,a0,1639
90001f50:	7eb12023          	sw	a1,2016(sp)

90001f54 <inst_524>:

inst_524:
// rs1_val==-1431655765 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xaaaaaa80, -0x55555555, -0x2c, x2, 2020, x6)
90001f54:	aaaab537          	lui	a0,0xaaaab
90001f58:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f5c:	fd457593          	andi	a1,a0,-44
90001f60:	7eb12223          	sw	a1,2020(sp)

90001f64 <inst_525>:

inst_525:
// rs1_val==-1431655765 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2a, -0x55555555, 0x2e, x2, 2024, x6)
90001f64:	aaaab537          	lui	a0,0xaaaab
90001f68:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa60a7>
90001f6c:	02e57593          	andi	a1,a0,46
90001f70:	7eb12423          	sw	a1,2024(sp)

90001f74 <inst_526>:

inst_526:
// rs1_val==6 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x3, x2, 2028, x6)
90001f74:	00600513          	li	a0,6
90001f78:	00357593          	andi	a1,a0,3
90001f7c:	7eb12623          	sw	a1,2028(sp)

90001f80 <inst_527>:

inst_527:
// rs1_val==6 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x555, x2, 2032, x6)
90001f80:	00600513          	li	a0,6
90001f84:	55557593          	andi	a1,a0,1365
90001f88:	7eb12823          	sw	a1,2032(sp)

90001f8c <inst_528>:

inst_528:
// rs1_val==6 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, -0x556, x2, 2036, x6)
90001f8c:	00600513          	li	a0,6
90001f90:	aaa57593          	andi	a1,a0,-1366
90001f94:	7eb12a23          	sw	a1,2036(sp)

90001f98 <inst_529>:

inst_529:
// rs1_val==6 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x5, x2, 2040, x6)
90001f98:	00600513          	li	a0,6
90001f9c:	00557593          	andi	a1,a0,5
90001fa0:	7eb12c23          	sw	a1,2040(sp)

90001fa4 <inst_530>:

inst_530:
// rs1_val==6 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x333, x2, 2044, x6)
90001fa4:	00600513          	li	a0,6
90001fa8:	33357593          	andi	a1,a0,819
90001fac:	7eb12e23          	sw	a1,2044(sp)
RVTEST_SIGBASE( x2,signature_x2_1)
90001fb0:	00003117          	auipc	sp,0x3
90001fb4:	8ac10113          	addi	sp,sp,-1876 # 9000485c <signature_x2_1>

90001fb8 <inst_531>:

inst_531:
// rs1_val==6 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x666, x2, 0, x6)
90001fb8:	00600513          	li	a0,6
90001fbc:	66657593          	andi	a1,a0,1638
90001fc0:	00b12023          	sw	a1,0(sp)

90001fc4 <inst_532>:

inst_532:
// rs1_val==6 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, -0x2d, x2, 4, x6)
90001fc4:	00600513          	li	a0,6
90001fc8:	fd357593          	andi	a1,a0,-45
90001fcc:	00b12223          	sw	a1,4(sp)

90001fd0 <inst_533>:

inst_533:
// rs1_val==6 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x2d, x2, 8, x6)
90001fd0:	00600513          	li	a0,6
90001fd4:	02d57593          	andi	a1,a0,45
90001fd8:	00b12423          	sw	a1,8(sp)

90001fdc <inst_534>:

inst_534:
// rs1_val==6 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x2, x2, 12, x6)
90001fdc:	00600513          	li	a0,6
90001fe0:	00257593          	andi	a1,a0,2
90001fe4:	00b12623          	sw	a1,12(sp)

90001fe8 <inst_535>:

inst_535:
// rs1_val==6 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x554, x2, 16, x6)
90001fe8:	00600513          	li	a0,6
90001fec:	55457593          	andi	a1,a0,1364
90001ff0:	00b12823          	sw	a1,16(sp)

90001ff4 <inst_536>:

inst_536:
// rs1_val==6 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x6, 0x0, x2, 20, x6)
90001ff4:	00600513          	li	a0,6
90001ff8:	00057593          	andi	a1,a0,0
90001ffc:	00b12a23          	sw	a1,20(sp)

90002000 <inst_537>:

inst_537:
// rs1_val==6 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x4, x2, 24, x6)
90002000:	00600513          	li	a0,6
90002004:	00457593          	andi	a1,a0,4
90002008:	00b12c23          	sw	a1,24(sp)

9000200c <inst_538>:

inst_538:
// rs1_val==6 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x332, x2, 28, x6)
9000200c:	00600513          	li	a0,6
90002010:	33257593          	andi	a1,a0,818
90002014:	00b12e23          	sw	a1,28(sp)

90002018 <inst_539>:

inst_539:
// rs1_val==6 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x665, x2, 32, x6)
90002018:	00600513          	li	a0,6
9000201c:	66557593          	andi	a1,a0,1637
90002020:	02b12023          	sw	a1,32(sp)

90002024 <inst_540>:

inst_540:
// rs1_val==6 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x2c, x2, 36, x6)
90002024:	00600513          	li	a0,6
90002028:	02c57593          	andi	a1,a0,44
9000202c:	02b12223          	sw	a1,36(sp)

90002030 <inst_541>:

inst_541:
// rs1_val==6 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x556, x2, 40, x6)
90002030:	00600513          	li	a0,6
90002034:	55657593          	andi	a1,a0,1366
90002038:	02b12423          	sw	a1,40(sp)

9000203c <inst_542>:

inst_542:
// rs1_val==6 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, -0x555, x2, 44, x6)
9000203c:	00600513          	li	a0,6
90002040:	aab57593          	andi	a1,a0,-1365
90002044:	02b12623          	sw	a1,44(sp)

90002048 <inst_543>:

inst_543:
// rs1_val==6 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x6, x2, 48, x6)
90002048:	00600513          	li	a0,6
9000204c:	00657593          	andi	a1,a0,6
90002050:	02b12823          	sw	a1,48(sp)

90002054 <inst_544>:

inst_544:
// rs1_val==6 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x334, x2, 52, x6)
90002054:	00600513          	li	a0,6
90002058:	33457593          	andi	a1,a0,820
9000205c:	02b12a23          	sw	a1,52(sp)

90002060 <inst_545>:

inst_545:
// rs1_val==6 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x667, x2, 56, x6)
90002060:	00600513          	li	a0,6
90002064:	66757593          	andi	a1,a0,1639
90002068:	02b12c23          	sw	a1,56(sp)

9000206c <inst_546>:

inst_546:
// rs1_val==6 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, -0x2c, x2, 60, x6)
9000206c:	00600513          	li	a0,6
90002070:	fd457593          	andi	a1,a0,-44
90002074:	02b12e23          	sw	a1,60(sp)

90002078 <inst_547>:

inst_547:
// rs1_val==6 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x2e, x2, 64, x6)
90002078:	00600513          	li	a0,6
9000207c:	02e57593          	andi	a1,a0,46
90002080:	04b12023          	sw	a1,64(sp)

90002084 <inst_548>:

inst_548:
// rs1_val==858993460 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333334, 0x3, x2, 68, x6)
90002084:	33333537          	lui	a0,0x33333
90002088:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
9000208c:	00357593          	andi	a1,a0,3
90002090:	04b12223          	sw	a1,68(sp)

90002094 <inst_549>:

inst_549:
// rs1_val==858993460 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x114, 0x33333334, 0x555, x2, 72, x6)
90002094:	33333537          	lui	a0,0x33333
90002098:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
9000209c:	55557593          	andi	a1,a0,1365
900020a0:	04b12423          	sw	a1,72(sp)

900020a4 <inst_550>:

inst_550:
// rs1_val==858993460 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x33333220, 0x33333334, -0x556, x2, 76, x6)
900020a4:	33333537          	lui	a0,0x33333
900020a8:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
900020ac:	aaa57593          	andi	a1,a0,-1366
900020b0:	04b12623          	sw	a1,76(sp)

900020b4 <inst_551>:

inst_551:
// rs1_val==858993460 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x33333334, 0x5, x2, 80, x6)
900020b4:	33333537          	lui	a0,0x33333
900020b8:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
900020bc:	00557593          	andi	a1,a0,5
900020c0:	04b12823          	sw	a1,80(sp)

900020c4 <inst_552>:

inst_552:
// rs1_val==858993460 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x330, 0x33333334, 0x333, x2, 84, x6)
900020c4:	33333537          	lui	a0,0x33333
900020c8:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
900020cc:	33357593          	andi	a1,a0,819
900020d0:	04b12a23          	sw	a1,84(sp)

900020d4 <inst_553>:

inst_553:
// rs1_val==858993460 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x224, 0x33333334, 0x666, x2, 88, x6)
900020d4:	33333537          	lui	a0,0x33333
900020d8:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
900020dc:	66657593          	andi	a1,a0,1638
900020e0:	04b12c23          	sw	a1,88(sp)

900020e4 <inst_554>:

inst_554:
// rs1_val==858993460 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x33333310, 0x33333334, -0x2d, x2, 92, x6)
900020e4:	33333537          	lui	a0,0x33333
900020e8:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
900020ec:	fd357593          	andi	a1,a0,-45
900020f0:	04b12e23          	sw	a1,92(sp)

900020f4 <inst_555>:

inst_555:
// rs1_val==858993460 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x24, 0x33333334, 0x2d, x2, 96, x6)
900020f4:	33333537          	lui	a0,0x33333
900020f8:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
900020fc:	02d57593          	andi	a1,a0,45
90002100:	06b12023          	sw	a1,96(sp)

90002104 <inst_556>:

inst_556:
// rs1_val==858993460 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333334, 0x2, x2, 100, x6)
90002104:	33333537          	lui	a0,0x33333
90002108:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
9000210c:	00257593          	andi	a1,a0,2
90002110:	06b12223          	sw	a1,100(sp)

90002114 <inst_557>:

inst_557:
// rs1_val==858993460 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x114, 0x33333334, 0x554, x2, 104, x6)
90002114:	33333537          	lui	a0,0x33333
90002118:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
9000211c:	55457593          	andi	a1,a0,1364
90002120:	06b12423          	sw	a1,104(sp)

90002124 <inst_558>:

inst_558:
// rs1_val==858993460 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333334, 0x0, x2, 108, x6)
90002124:	33333537          	lui	a0,0x33333
90002128:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
9000212c:	00057593          	andi	a1,a0,0
90002130:	06b12623          	sw	a1,108(sp)

90002134 <inst_559>:

inst_559:
// rs1_val==858993460 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x33333334, 0x4, x2, 112, x6)
90002134:	33333537          	lui	a0,0x33333
90002138:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x333332b8>
9000213c:	00457593          	andi	a1,a0,4
90002140:	06b12823          	sw	a1,112(sp)

90002144 <inst_560>:

inst_560:
// imm_val == 2, rs1_val == 16777216
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000000;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x1000000, 0x2, x2, 116, x6)
90002144:	01000537          	lui	a0,0x1000
90002148:	00257593          	andi	a1,a0,2
9000214c:	06b12a23          	sw	a1,116(sp)

90002150 <inst_561>:

inst_561:
// imm_val == -257, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x101
TEST_IMM_OP( andi, x11, x10, 0xffff4afc, -0xb504, -0x101, x2, 120, x6)
90002150:	ffff5537          	lui	a0,0xffff5
90002154:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff00f8>
90002158:	eff57593          	andi	a1,a0,-257
9000215c:	06b12c23          	sw	a1,120(sp)

90002160 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
90002160:	00408093          	addi	ra,ra,4
90002164:	00100093          	li	ra,1

90002168 <write_tohost>:
90002168:	00001f17          	auipc	t5,0x1
9000216c:	e81f2c23          	sw	ra,-360(t5) # 90003000 <tohost>

90002170 <self_loop>:
90002170:	0000006f          	j	90002170 <self_loop>
90002174:	0000                	unimp
	...
