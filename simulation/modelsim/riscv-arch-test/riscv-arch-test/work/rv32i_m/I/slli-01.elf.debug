
/home/taka/RISCV/mmRISC/simulation/modelsim/riscv-arch-test/riscv-arch-test/work/rv32i_m/I/slli-01.elf:     file format elf32-littleriscv


Disassembly of section .text.init:

90000000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
90000000:	feedc0b7          	lui	ra,0xfeedc
90000004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0x6eed9ba9>
90000008:	ff76e137          	lui	sp,0xff76e
9000000c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0x6f76bc52>
90000010:	7fbb71b7          	lui	gp,0x7fbb7
90000014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <offset+0x7fbb6ea7>
90000018:	bfddb237          	lui	tp,0xbfddb
9000001c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0x2fdd94d1>
90000020:	00000297          	auipc	t0,0x0
90000024:	0d828293          	addi	t0,t0,216 # 900000f8 <rvtest_code_begin>
90000028:	00002317          	auipc	t1,0x2
9000002c:	fd830313          	addi	t1,t1,-40 # 90002000 <rvtest_data_begin>
90000030:	b7fbb3b7          	lui	t2,0xb7fbb
90000034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0x27fb93f6>
90000038:	5bfde437          	lui	s0,0x5bfde
9000003c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <offset+0x5bfdda79>
90000040:	adfef4b7          	lui	s1,0xadfef
90000044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0x1dfecaba>
90000048:	56ff7537          	lui	a0,0x56ff7
9000004c:	6df50513          	addi	a0,a0,1759 # 56ff76df <offset+0x56ff75db>
90000050:	ab7fc5b7          	lui	a1,0xab7fc
90000054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0x1b7f986b>
90000058:	d5bfe637          	lui	a2,0xd5bfe
9000005c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0x45bfbab3>
90000060:	eadff6b7          	lui	a3,0xeadff
90000064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0x5adfcbd7>
90000068:	f56ff737          	lui	a4,0xf56ff
9000006c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0x656fd469>
90000070:	fab807b7          	lui	a5,0xfab80
90000074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0x6ab7d8b2>
90000078:	7d5c0837          	lui	a6,0x7d5c0
9000007c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <offset+0x7d5bfcd7>
90000080:	beae08b7          	lui	a7,0xbeae0
90000084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0x2eaddbe9>
90000088:	df570937          	lui	s2,0xdf570
9000008c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0x4f56dc72>
90000090:	6fab89b7          	lui	s3,0x6fab8
90000094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <offset+0x6fab7eb7>
90000098:	b7d5ca37          	lui	s4,0xb7d5c
9000009c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0x27d59cd9>
900000a0:	dbeaeab7          	lui	s5,0xdbeae
900000a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0x4beabcea>
900000a8:	6df57b37          	lui	s6,0x6df57
900000ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <offset+0x6df56ef3>
900000b0:	b6fabbb7          	lui	s7,0xb6fab
900000b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0x26fa94f7>
900000b8:	db7d6c37          	lui	s8,0xdb7d6
900000bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0x4b7d38f9>
900000c0:	edbebcb7          	lui	s9,0xedbeb
900000c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0x5dbe8afa>
900000c8:	76df5d37          	lui	s10,0x76df5
900000cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <offset+0x76df55fb>
900000d0:	bb6fbdb7          	lui	s11,0xbb6fb
900000d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0x2b6f887b>
900000d8:	ddb7de37          	lui	t3,0xddb7d
900000dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0x4db7b2bb>
900000e0:	eedbfeb7          	lui	t4,0xeedbf
900000e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0x5edbc7db>
900000e8:	f76dff37          	lui	t5,0xf76df
900000ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0x676dd26b>
900000f0:	fbb70fb7          	lui	t6,0xfbb70
900000f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0x6bb6d7b3>

900000f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",slli)

RVTEST_SIGBASE( x3,signature_x3_1)
900000f8:	00002197          	auipc	gp,0x2
900000fc:	f1818193          	addi	gp,gp,-232 # 90002010 <begin_signature>

90000100 <inst_0>:

inst_0:
// rs1 != rd, rs1==x17, rd==x27, rs1_val < 0 and imm_val > 0 and imm_val < xlen, rs1_val == -1073741825, imm_val == 29
// opcode: slli ; op1:x17; dest:x27; op1val:-0x40000001;  immval:0x1d
TEST_IMM_OP( slli, x27, x17, 0xe0000000, -0x40000001, 0x1d, x3, 0, x7)
90000100:	c00008b7          	lui	a7,0xc0000
90000104:	fff88893          	addi	a7,a7,-1 # bfffffff <_end+0x2fffdcfb>
90000108:	01d89d93          	slli	s11,a7,0x1d
9000010c:	01b1a023          	sw	s11,0(gp)

90000110 <inst_1>:

inst_1:
// rs1 == rd, rs1==x26, rd==x26, rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val==1717986918, imm_val == 15
// opcode: slli ; op1:x26; dest:x26; op1val:0x66666666;  immval:0xf
TEST_IMM_OP( slli, x26, x26, 0x33330000, 0x66666666, 0xf, x3, 4, x7)
90000110:	66666d37          	lui	s10,0x66666
90000114:	666d0d13          	addi	s10,s10,1638 # 66666666 <offset+0x66666562>
90000118:	00fd1d13          	slli	s10,s10,0xf
9000011c:	01a1a223          	sw	s10,4(gp)

90000120 <inst_2>:

inst_2:
// rs1==x22, rd==x11, rs1_val < 0 and imm_val == 0, rs1_val == -65537
// opcode: slli ; op1:x22; dest:x11; op1val:-0x10001;  immval:0x0
TEST_IMM_OP( slli, x11, x22, 0xfffeffff, -0x10001, 0x0, x3, 8, x7)
90000120:	ffff0b37          	lui	s6,0xffff0
90000124:	fffb0b13          	addi	s6,s6,-1 # fffeffff <_end+0x6ffedcfb>
90000128:	000b1593          	slli	a1,s6,0x0
9000012c:	00b1a423          	sw	a1,8(gp)

90000130 <inst_3>:

inst_3:
// rs1==x15, rd==x6, rs1_val > 0 and imm_val == 0, rs1_val==4, rs1_val == 4
// opcode: slli ; op1:x15; dest:x6; op1val:0x4;  immval:0x0
TEST_IMM_OP( slli, x6, x15, 0x4, 0x4, 0x0, x3, 12, x7)
90000130:	00400793          	li	a5,4
90000134:	00079313          	slli	t1,a5,0x0
90000138:	0061a623          	sw	t1,12(gp)

9000013c <inst_4>:

inst_4:
// rs1==x9, rd==x16, rs1_val < 0 and imm_val == (xlen-1), rs1_val == -4194305
// opcode: slli ; op1:x9; dest:x16; op1val:-0x400001;  immval:0x1f
TEST_IMM_OP( slli, x16, x9, 0x80000000, -0x400001, 0x1f, x3, 16, x7)
9000013c:	ffc004b7          	lui	s1,0xffc00
90000140:	fff48493          	addi	s1,s1,-1 # ffbfffff <_end+0x6fbfdcfb>
90000144:	01f49813          	slli	a6,s1,0x1f
90000148:	0101a823          	sw	a6,16(gp)

9000014c <inst_5>:

inst_5:
// rs1==x11, rd==x20, rs1_val > 0 and imm_val == (xlen-1), 
// opcode: slli ; op1:x11; dest:x20; op1val:0x4;  immval:0x1f
TEST_IMM_OP( slli, x20, x11, 0x0, 0x4, 0x1f, x3, 20, x7)
9000014c:	00400593          	li	a1,4
90000150:	01f59a13          	slli	s4,a1,0x1f
90000154:	0141aa23          	sw	s4,20(gp)

90000158 <inst_6>:

inst_6:
// rs1==x1, rd==x19, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, imm_val == 8, rs1_val == 8
// opcode: slli ; op1:x1; dest:x19; op1val:0x8;  immval:0x8
TEST_IMM_OP( slli, x19, x1, 0x800, 0x8, 0x8, x3, 24, x7)
90000158:	00800093          	li	ra,8
9000015c:	00809993          	slli	s3,ra,0x8
90000160:	0131ac23          	sw	s3,24(gp)

90000164 <inst_7>:

inst_7:
// rs1==x19, rd==x25, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -2147483648, imm_val == 16
// opcode: slli ; op1:x19; dest:x25; op1val:-0x80000000;  immval:0x10
TEST_IMM_OP( slli, x25, x19, 0x0, -0x80000000, 0x10, x3, 28, x7)
90000164:	800009b7          	lui	s3,0x80000
90000168:	01099c93          	slli	s9,s3,0x10
9000016c:	0191ae23          	sw	s9,28(gp)

90000170 <inst_8>:

inst_8:
// rs1==x8, rd==x12, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, rs1_val==0
// opcode: slli ; op1:x8; dest:x12; op1val:0x0;  immval:0xc
TEST_IMM_OP( slli, x12, x8, 0x0, 0x0, 0xc, x3, 32, x7)
90000170:	00000413          	li	s0,0
90000174:	00c41613          	slli	a2,s0,0xc
90000178:	02c1a023          	sw	a2,32(gp)

9000017c <inst_9>:

inst_9:
// rs1==x27, rd==x30, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, rs1_val == 2147483647
// opcode: slli ; op1:x27; dest:x30; op1val:0x7fffffff;  immval:0x8
TEST_IMM_OP( slli, x30, x27, 0xffffff00, 0x7fffffff, 0x8, x3, 36, x7)
9000017c:	80000db7          	lui	s11,0x80000
90000180:	fffd8d93          	addi	s11,s11,-1 # 7fffffff <_end+0xefffdcfb>
90000184:	008d9f13          	slli	t5,s11,0x8
90000188:	03e1a223          	sw	t5,36(gp)

9000018c <inst_10>:

inst_10:
// rs1==x2, rd==x4, rs1_val == 1 and imm_val >= 0 and imm_val < xlen, imm_val == 1, rs1_val == 1
// opcode: slli ; op1:x2; dest:x4; op1val:0x1;  immval:0x1
TEST_IMM_OP( slli, x4, x2, 0x2, 0x1, 0x1, x3, 40, x7)
9000018c:	00100113          	li	sp,1
90000190:	00111213          	slli	tp,sp,0x1
90000194:	0241a423          	sw	tp,40(gp)

90000198 <inst_11>:

inst_11:
// rs1==x31, rd==x14, rs1_val == 2, rs1_val==2
// opcode: slli ; op1:x31; dest:x14; op1val:0x2;  immval:0x6
TEST_IMM_OP( slli, x14, x31, 0x80, 0x2, 0x6, x3, 44, x7)
90000198:	00200f93          	li	t6,2
9000019c:	006f9713          	slli	a4,t6,0x6
900001a0:	02e1a623          	sw	a4,44(gp)

900001a4 <inst_12>:

inst_12:
// rs1==x24, rd==x17, rs1_val == 16, 
// opcode: slli ; op1:x24; dest:x17; op1val:0x10;  immval:0xe
TEST_IMM_OP( slli, x17, x24, 0x40000, 0x10, 0xe, x3, 48, x7)
900001a4:	01000c13          	li	s8,16
900001a8:	00ec1893          	slli	a7,s8,0xe
900001ac:	0311a823          	sw	a7,48(gp)

900001b0 <inst_13>:

inst_13:
// rs1==x4, rd==x10, rs1_val == 32, 
// opcode: slli ; op1:x4; dest:x10; op1val:0x20;  immval:0x3
TEST_IMM_OP( slli, x10, x4, 0x100, 0x20, 0x3, x3, 52, x7)
900001b0:	02000213          	li	tp,32
900001b4:	00321513          	slli	a0,tp,0x3
900001b8:	02a1aa23          	sw	a0,52(gp)

900001bc <inst_14>:

inst_14:
// rs1==x18, rd==x2, rs1_val == 64, imm_val == 21
// opcode: slli ; op1:x18; dest:x2; op1val:0x40;  immval:0x15
TEST_IMM_OP( slli, x2, x18, 0x8000000, 0x40, 0x15, x3, 56, x7)
900001bc:	04000913          	li	s2,64
900001c0:	01591113          	slli	sp,s2,0x15
900001c4:	0221ac23          	sw	sp,56(gp)

900001c8 <inst_15>:

inst_15:
// rs1==x5, rd==x23, rs1_val == 128, 
// opcode: slli ; op1:x5; dest:x23; op1val:0x80;  immval:0x15
TEST_IMM_OP( slli, x23, x5, 0x10000000, 0x80, 0x15, x3, 60, x7)
900001c8:	08000293          	li	t0,128
900001cc:	01529b93          	slli	s7,t0,0x15
900001d0:	0371ae23          	sw	s7,60(gp)

900001d4 <inst_16>:

inst_16:
// rs1==x13, rd==x8, rs1_val == 256, 
// opcode: slli ; op1:x13; dest:x8; op1val:0x100;  immval:0x1
TEST_IMM_OP( slli, x8, x13, 0x200, 0x100, 0x1, x3, 64, x7)
900001d4:	10000693          	li	a3,256
900001d8:	00169413          	slli	s0,a3,0x1
900001dc:	0481a023          	sw	s0,64(gp)

900001e0 <inst_17>:

inst_17:
// rs1==x20, rd==x0, rs1_val == 512, 
// opcode: slli ; op1:x20; dest:x0; op1val:0x200;  immval:0x0
TEST_IMM_OP( slli, x0, x20, 0, 0x200, 0x0, x3, 68, x7)
900001e0:	20000a13          	li	s4,512
900001e4:	000a1013          	slli	zero,s4,0x0
900001e8:	0401a223          	sw	zero,68(gp)

900001ec <inst_18>:

inst_18:
// rs1==x16, rd==x9, rs1_val == 1024, imm_val == 2
// opcode: slli ; op1:x16; dest:x9; op1val:0x400;  immval:0x2
TEST_IMM_OP( slli, x9, x16, 0x1000, 0x400, 0x2, x3, 72, x7)
900001ec:	40000813          	li	a6,1024
900001f0:	00281493          	slli	s1,a6,0x2
900001f4:	0491a423          	sw	s1,72(gp)

900001f8 <inst_19>:

inst_19:
// rs1==x21, rd==x5, rs1_val == 2048, 
// opcode: slli ; op1:x21; dest:x5; op1val:0x800;  immval:0x13
TEST_IMM_OP( slli, x5, x21, 0x40000000, 0x800, 0x13, x3, 76, x7)
900001f8:	00001ab7          	lui	s5,0x1
900001fc:	800a8a93          	addi	s5,s5,-2048 # 800 <offset+0x6fc>
90000200:	013a9293          	slli	t0,s5,0x13
90000204:	0451a623          	sw	t0,76(gp)

90000208 <inst_20>:

inst_20:
// rs1==x23, rd==x1, rs1_val == 4096, 
// opcode: slli ; op1:x23; dest:x1; op1val:0x1000;  immval:0x7
TEST_IMM_OP( slli, x1, x23, 0x80000, 0x1000, 0x7, x3, 80, x2)
90000208:	00001bb7          	lui	s7,0x1
9000020c:	007b9093          	slli	ra,s7,0x7
90000210:	0411a823          	sw	ra,80(gp)

90000214 <inst_21>:

inst_21:
// rs1==x12, rd==x18, rs1_val == 8192, 
// opcode: slli ; op1:x12; dest:x18; op1val:0x2000;  immval:0x10
TEST_IMM_OP( slli, x18, x12, 0x20000000, 0x2000, 0x10, x3, 84, x2)
90000214:	00002637          	lui	a2,0x2
90000218:	01061913          	slli	s2,a2,0x10
9000021c:	0521aa23          	sw	s2,84(gp)

90000220 <inst_22>:

inst_22:
// rs1==x29, rd==x15, rs1_val == 16384, 
// opcode: slli ; op1:x29; dest:x15; op1val:0x4000;  immval:0xb
TEST_IMM_OP( slli, x15, x29, 0x2000000, 0x4000, 0xb, x3, 88, x2)
90000220:	00004eb7          	lui	t4,0x4
90000224:	00be9793          	slli	a5,t4,0xb
90000228:	04f1ac23          	sw	a5,88(gp)
RVTEST_SIGBASE( x1,signature_x1_0)
9000022c:	00002097          	auipc	ra,0x2
90000230:	e4008093          	addi	ra,ra,-448 # 9000206c <signature_x1_0>

90000234 <inst_23>:

inst_23:
// rs1==x3, rd==x21, rs1_val == 32768, imm_val == 23
// opcode: slli ; op1:x3; dest:x21; op1val:0x8000;  immval:0x17
TEST_IMM_OP( slli, x21, x3, 0x0, 0x8000, 0x17, x1, 0, x2)
90000234:	000081b7          	lui	gp,0x8
90000238:	01719a93          	slli	s5,gp,0x17
9000023c:	0150a023          	sw	s5,0(ra)

90000240 <inst_24>:

inst_24:
// rs1==x0, rd==x31, rs1_val == 65536, 
// opcode: slli ; op1:x0; dest:x31; op1val:0x0;  immval:0x1
TEST_IMM_OP( slli, x31, x0, 0x0, 0x0, 0x1, x1, 4, x2)
90000240:	00000013          	nop
90000244:	00101f93          	slli	t6,zero,0x1
90000248:	01f0a223          	sw	t6,4(ra)

9000024c <inst_25>:

inst_25:
// rs1==x14, rd==x3, rs1_val == 131072, imm_val == 27
// opcode: slli ; op1:x14; dest:x3; op1val:0x20000;  immval:0x1b
TEST_IMM_OP( slli, x3, x14, 0x0, 0x20000, 0x1b, x1, 8, x2)
9000024c:	00020737          	lui	a4,0x20
90000250:	01b71193          	slli	gp,a4,0x1b
90000254:	0030a423          	sw	gp,8(ra)

90000258 <inst_26>:

inst_26:
// rs1==x25, rd==x24, rs1_val == 262144, 
// opcode: slli ; op1:x25; dest:x24; op1val:0x40000;  immval:0x1f
TEST_IMM_OP( slli, x24, x25, 0x0, 0x40000, 0x1f, x1, 12, x2)
90000258:	00040cb7          	lui	s9,0x40
9000025c:	01fc9c13          	slli	s8,s9,0x1f
90000260:	0180a623          	sw	s8,12(ra)

90000264 <inst_27>:

inst_27:
// rs1==x30, rd==x29, rs1_val == 524288, 
// opcode: slli ; op1:x30; dest:x29; op1val:0x80000;  immval:0xf
TEST_IMM_OP( slli, x29, x30, 0x0, 0x80000, 0xf, x1, 16, x2)
90000264:	00080f37          	lui	t5,0x80
90000268:	00ff1e93          	slli	t4,t5,0xf
9000026c:	01d0a823          	sw	t4,16(ra)

90000270 <inst_28>:

inst_28:
// rs1==x28, rd==x13, rs1_val == 1048576, 
// opcode: slli ; op1:x28; dest:x13; op1val:0x100000;  immval:0x17
TEST_IMM_OP( slli, x13, x28, 0x0, 0x100000, 0x17, x1, 20, x2)
90000270:	00100e37          	lui	t3,0x100
90000274:	017e1693          	slli	a3,t3,0x17
90000278:	00d0aa23          	sw	a3,20(ra)

9000027c <inst_29>:

inst_29:
// rs1==x10, rd==x7, rs1_val == 2097152, 
// opcode: slli ; op1:x10; dest:x7; op1val:0x200000;  immval:0x7
TEST_IMM_OP( slli, x7, x10, 0x10000000, 0x200000, 0x7, x1, 24, x2)
9000027c:	00200537          	lui	a0,0x200
90000280:	00751393          	slli	t2,a0,0x7
90000284:	0070ac23          	sw	t2,24(ra)

90000288 <inst_30>:

inst_30:
// rs1==x7, rd==x22, rs1_val == 4194304, 
// opcode: slli ; op1:x7; dest:x22; op1val:0x400000;  immval:0x1d
TEST_IMM_OP( slli, x22, x7, 0x0, 0x400000, 0x1d, x1, 28, x2)
90000288:	004003b7          	lui	t2,0x400
9000028c:	01d39b13          	slli	s6,t2,0x1d
90000290:	0160ae23          	sw	s6,28(ra)

90000294 <inst_31>:

inst_31:
// rs1==x6, rd==x28, rs1_val == 8388608, 
// opcode: slli ; op1:x6; dest:x28; op1val:0x800000;  immval:0x2
TEST_IMM_OP( slli, x28, x6, 0x2000000, 0x800000, 0x2, x1, 32, x2)
90000294:	00800337          	lui	t1,0x800
90000298:	00231e13          	slli	t3,t1,0x2
9000029c:	03c0a023          	sw	t3,32(ra)

900002a0 <inst_32>:

inst_32:
// rs1_val == 16777216, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x1000000;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0x40000000, 0x1000000, 0x6, x1, 36, x2)
900002a0:	01000537          	lui	a0,0x1000
900002a4:	00651593          	slli	a1,a0,0x6
900002a8:	02b0a223          	sw	a1,36(ra)

900002ac <inst_33>:

inst_33:
// rs1_val == 33554432, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x2000000;  immval:0x5
TEST_IMM_OP( slli, x11, x10, 0x40000000, 0x2000000, 0x5, x1, 40, x2)
900002ac:	02000537          	lui	a0,0x2000
900002b0:	00551593          	slli	a1,a0,0x5
900002b4:	02b0a423          	sw	a1,40(ra)

900002b8 <inst_34>:

inst_34:
// rs1_val == 67108864, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x4000000;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0x0, 0x4000000, 0x11, x1, 44, x2)
900002b8:	04000537          	lui	a0,0x4000
900002bc:	01151593          	slli	a1,a0,0x11
900002c0:	02b0a623          	sw	a1,44(ra)

900002c4 <inst_35>:

inst_35:
// rs1_val == 134217728, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x0
TEST_IMM_OP( slli, x11, x10, 0x8000000, 0x8000000, 0x0, x1, 48, x2)
900002c4:	08000537          	lui	a0,0x8000
900002c8:	00051593          	slli	a1,a0,0x0
900002cc:	02b0a823          	sw	a1,48(ra)

900002d0 <inst_36>:

inst_36:
// rs1_val == 268435456, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0x80000000, 0x10000000, 0x3, x1, 52, x2)
900002d0:	10000537          	lui	a0,0x10000
900002d4:	00351593          	slli	a1,a0,0x3
900002d8:	02b0aa23          	sw	a1,52(ra)

900002dc <inst_37>:

inst_37:
// rs1_val == 536870912, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x20000000;  immval:0xc
TEST_IMM_OP( slli, x11, x10, 0x0, 0x20000000, 0xc, x1, 56, x2)
900002dc:	20000537          	lui	a0,0x20000
900002e0:	00c51593          	slli	a1,a0,0xc
900002e4:	02b0ac23          	sw	a1,56(ra)

900002e8 <inst_38>:

inst_38:
// rs1_val == 1073741824, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x40000000;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0x0, 0x40000000, 0xb, x1, 60, x2)
900002e8:	40000537          	lui	a0,0x40000
900002ec:	00b51593          	slli	a1,a0,0xb
900002f0:	02b0ae23          	sw	a1,60(ra)

900002f4 <inst_39>:

inst_39:
// rs1_val == -2, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0xffff8000, -0x2, 0xe, x1, 64, x2)
900002f4:	ffe00513          	li	a0,-2
900002f8:	00e51593          	slli	a1,a0,0xe
900002fc:	04b0a023          	sw	a1,64(ra)

90000300 <inst_40>:

inst_40:
// rs1_val == -3, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x3;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0xfffffffa, -0x3, 0x1, x1, 68, x2)
90000300:	ffd00513          	li	a0,-3
90000304:	00151593          	slli	a1,a0,0x1
90000308:	04b0a223          	sw	a1,68(ra)

9000030c <inst_41>:

inst_41:
// rs1_val == -5, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x5;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xfffffd80, -0x5, 0x7, x1, 72, x2)
9000030c:	ffb00513          	li	a0,-5
90000310:	00751593          	slli	a1,a0,0x7
90000314:	04b0a423          	sw	a1,72(ra)

90000318 <inst_42>:

inst_42:
// rs1_val == -9, imm_val == 10
// opcode: slli ; op1:x10; dest:x11; op1val:-0x9;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0xffffdc00, -0x9, 0xa, x1, 76, x2)
90000318:	ff700513          	li	a0,-9
9000031c:	00a51593          	slli	a1,a0,0xa
90000320:	04b0a623          	sw	a1,76(ra)

90000324 <inst_43>:

inst_43:
// rs1_val == -17, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x11;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xffde0000, -0x11, 0x11, x1, 80, x2)
90000324:	fef00513          	li	a0,-17
90000328:	01151593          	slli	a1,a0,0x11
9000032c:	04b0a823          	sw	a1,80(ra)

90000330 <inst_44>:

inst_44:
// rs1_val == -33, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x21;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0xfff7c000, -0x21, 0xe, x1, 84, x2)
90000330:	fdf00513          	li	a0,-33
90000334:	00e51593          	slli	a1,a0,0xe
90000338:	04b0aa23          	sw	a1,84(ra)

9000033c <inst_45>:

inst_45:
// rs1_val == -65, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x41;  immval:0x13
TEST_IMM_OP( slli, x11, x10, 0xfdf80000, -0x41, 0x13, x1, 88, x2)
9000033c:	fbf00513          	li	a0,-65
90000340:	01351593          	slli	a1,a0,0x13
90000344:	04b0ac23          	sw	a1,88(ra)

90000348 <inst_46>:

inst_46:
// rs1_val == -129, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x81;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0xff7f0000, -0x81, 0x10, x1, 92, x2)
90000348:	f7f00513          	li	a0,-129
9000034c:	01051593          	slli	a1,a0,0x10
90000350:	04b0ae23          	sw	a1,92(ra)

90000354 <inst_47>:

inst_47:
// rs1_val == -257, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x101;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xfff7f800, -0x101, 0xb, x1, 96, x2)
90000354:	eff00513          	li	a0,-257
90000358:	00b51593          	slli	a1,a0,0xb
9000035c:	06b0a023          	sw	a1,96(ra)

90000360 <inst_48>:

inst_48:
// rs1_val == -513, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x201;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xfbfe0000, -0x201, 0x11, x1, 100, x2)
90000360:	dff00513          	li	a0,-513
90000364:	01151593          	slli	a1,a0,0x11
90000368:	06b0a223          	sw	a1,100(ra)

9000036c <inst_49>:

inst_49:
// rs1_val == -1025, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x401;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xfffdff80, -0x401, 0x7, x1, 104, x2)
9000036c:	bff00513          	li	a0,-1025
90000370:	00751593          	slli	a1,a0,0x7
90000374:	06b0a423          	sw	a1,104(ra)

90000378 <inst_50>:

inst_50:
// rs1_val == -2049, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x801;  immval:0xf
TEST_IMM_OP( slli, x11, x10, 0xfbff8000, -0x801, 0xf, x1, 108, x2)
90000378:	fffff537          	lui	a0,0xfffff
9000037c:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0x6fffd4fb>
90000380:	00f51593          	slli	a1,a0,0xf
90000384:	06b0a623          	sw	a1,108(ra)

90000388 <inst_51>:

inst_51:
// rs1_val == -4097, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x1001;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0xffbffc00, -0x1001, 0xa, x1, 112, x2)
90000388:	fffff537          	lui	a0,0xfffff
9000038c:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0x6fffccfb>
90000390:	00a51593          	slli	a1,a0,0xa
90000394:	06b0a823          	sw	a1,112(ra)

90000398 <inst_52>:

inst_52:
// rs1_val == -8193, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2001;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xfff7ffc0, -0x2001, 0x6, x1, 116, x2)
90000398:	ffffe537          	lui	a0,0xffffe
9000039c:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0x6fffbcfb>
900003a0:	00651593          	slli	a1,a0,0x6
900003a4:	06b0aa23          	sw	a1,116(ra)

900003a8 <inst_53>:

inst_53:
// rs1_val == -16385, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x4001;  immval:0x2
TEST_IMM_OP( slli, x11, x10, 0xfffefffc, -0x4001, 0x2, x1, 120, x2)
900003a8:	ffffc537          	lui	a0,0xffffc
900003ac:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0x6fff9cfb>
900003b0:	00251593          	slli	a1,a0,0x2
900003b4:	06b0ac23          	sw	a1,120(ra)

900003b8 <inst_54>:

inst_54:
// rs1_val == -32769, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0xfffbfff8, -0x8001, 0x3, x1, 124, x2)
900003b8:	ffff8537          	lui	a0,0xffff8
900003bc:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0x6fff5cfb>
900003c0:	00351593          	slli	a1,a0,0x3
900003c4:	06b0ae23          	sw	a1,124(ra)

900003c8 <inst_55>:

inst_55:
// rs1_val == -131073, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x20001;  immval:0x1d
TEST_IMM_OP( slli, x11, x10, 0xe0000000, -0x20001, 0x1d, x1, 128, x2)
900003c8:	fffe0537          	lui	a0,0xfffe0
900003cc:	fff50513          	addi	a0,a0,-1 # fffdffff <_end+0x6ffddcfb>
900003d0:	01d51593          	slli	a1,a0,0x1d
900003d4:	08b0a023          	sw	a1,128(ra)

900003d8 <inst_56>:

inst_56:
// rs1_val == -262145, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x40001;  immval:0x1d
TEST_IMM_OP( slli, x11, x10, 0xe0000000, -0x40001, 0x1d, x1, 132, x2)
900003d8:	fffc0537          	lui	a0,0xfffc0
900003dc:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0x6ffbdcfb>
900003e0:	01d51593          	slli	a1,a0,0x1d
900003e4:	08b0a223          	sw	a1,132(ra)

900003e8 <inst_57>:

inst_57:
// rs1_val == -524289, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x80001;  immval:0xc
TEST_IMM_OP( slli, x11, x10, 0x7ffff000, -0x80001, 0xc, x1, 136, x2)
900003e8:	fff80537          	lui	a0,0xfff80
900003ec:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0x6ff7dcfb>
900003f0:	00c51593          	slli	a1,a0,0xc
900003f4:	08b0a423          	sw	a1,136(ra)

900003f8 <inst_58>:

inst_58:
// rs1_val == -2097153, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x200001;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xf7ffffc0, -0x200001, 0x6, x1, 140, x2)
900003f8:	ffe00537          	lui	a0,0xffe00
900003fc:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0x6fdfdcfb>
90000400:	00651593          	slli	a1,a0,0x6
90000404:	08b0a623          	sw	a1,140(ra)

90000408 <inst_59>:

inst_59:
// rs1_val == -8388609, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x800001;  immval:0x13
TEST_IMM_OP( slli, x11, x10, 0xfff80000, -0x800001, 0x13, x1, 144, x2)
90000408:	ff800537          	lui	a0,0xff800
9000040c:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0x6f7fdcfb>
90000410:	01351593          	slli	a1,a0,0x13
90000414:	08b0a823          	sw	a1,144(ra)

90000418 <inst_60>:

inst_60:
// rs1_val == -16777217, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x1000001;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xfffe0000, -0x1000001, 0x11, x1, 148, x2)
90000418:	ff000537          	lui	a0,0xff000
9000041c:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0x6effdcfb>
90000420:	01151593          	slli	a1,a0,0x11
90000424:	08b0aa23          	sw	a1,148(ra)

90000428 <inst_61>:

inst_61:
// rs1_val == -33554433, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2000001;  immval:0xf
TEST_IMM_OP( slli, x11, x10, 0xffff8000, -0x2000001, 0xf, x1, 152, x2)
90000428:	fe000537          	lui	a0,0xfe000
9000042c:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0x6dffdcfb>
90000430:	00f51593          	slli	a1,a0,0xf
90000434:	08b0ac23          	sw	a1,152(ra)

90000438 <inst_62>:

inst_62:
// rs1_val == -67108865, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x4000001;  immval:0xd
TEST_IMM_OP( slli, x11, x10, 0xffffe000, -0x4000001, 0xd, x1, 156, x2)
90000438:	fc000537          	lui	a0,0xfc000
9000043c:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0x6bffdcfb>
90000440:	00d51593          	slli	a1,a0,0xd
90000444:	08b0ae23          	sw	a1,156(ra)

90000448 <inst_63>:

inst_63:
// rs1_val == -134217729, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x8000001;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0xffffc000, -0x8000001, 0xe, x1, 160, x2)
90000448:	f8000537          	lui	a0,0xf8000
9000044c:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0x67ffdcfb>
90000450:	00e51593          	slli	a1,a0,0xe
90000454:	0ab0a023          	sw	a1,160(ra)

90000458 <inst_64>:

inst_64:
// rs1_val == -268435457, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x10000001;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xffffff80, -0x10000001, 0x7, x1, 164, x2)
90000458:	f0000537          	lui	a0,0xf0000
9000045c:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0x5fffdcfb>
90000460:	00751593          	slli	a1,a0,0x7
90000464:	0ab0a223          	sw	a1,164(ra)

90000468 <inst_65>:

inst_65:
// rs1_val == -536870913, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x20000001;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xfffff800, -0x20000001, 0xb, x1, 168, x2)
90000468:	e0000537          	lui	a0,0xe0000
9000046c:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0x4fffdcfb>
90000470:	00b51593          	slli	a1,a0,0xb
90000474:	0ab0a423          	sw	a1,168(ra)

90000478 <inst_66>:

inst_66:
// rs1_val == 1431655765, rs1_val==1431655765
// opcode: slli ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xaaaa0000, 0x55555555, 0x11, x1, 172, x2)
90000478:	55555537          	lui	a0,0x55555
9000047c:	55550513          	addi	a0,a0,1365 # 55555555 <offset+0x55555451>
90000480:	01151593          	slli	a1,a0,0x11
90000484:	0ab0a623          	sw	a1,172(ra)

90000488 <inst_67>:

inst_67:
// rs1_val == -1431655766, rs1_val==-1431655766
// opcode: slli ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x17
TEST_IMM_OP( slli, x11, x10, 0x55000000, -0x55555556, 0x17, x1, 176, x2)
90000488:	aaaab537          	lui	a0,0xaaaab
9000048c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0x1aaa87a6>
90000490:	01751593          	slli	a1,a0,0x17
90000494:	0ab0a823          	sw	a1,176(ra)

90000498 <inst_68>:

inst_68:
// rs1_val==3, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x3;  immval:0x13
TEST_IMM_OP( slli, x11, x10, 0x180000, 0x3, 0x13, x1, 180, x2)
90000498:	00300513          	li	a0,3
9000049c:	01351593          	slli	a1,a0,0x13
900004a0:	0ab0aa23          	sw	a1,180(ra)

900004a4 <inst_69>:

inst_69:
// rs1_val==5, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x5;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0xa, 0x5, 0x1, x1, 184, x2)
900004a4:	00500513          	li	a0,5
900004a8:	00151593          	slli	a1,a0,0x1
900004ac:	0ab0ac23          	sw	a1,184(ra)

900004b0 <inst_70>:

inst_70:
// rs1_val==858993459, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0x99999998, 0x33333333, 0x3, x1, 188, x2)
900004b0:	33333537          	lui	a0,0x33333
900004b4:	33350513          	addi	a0,a0,819 # 33333333 <offset+0x3333322f>
900004b8:	00351593          	slli	a1,a0,0x3
900004bc:	0ab0ae23          	sw	a1,188(ra)

900004c0 <inst_71>:

inst_71:
// rs1_val==-46340, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xffd2bf00, -0xb504, 0x6, x1, 192, x2)
900004c0:	ffff5537          	lui	a0,0xffff5
900004c4:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0x6fff27f8>
900004c8:	00651593          	slli	a1,a0,0x6
900004cc:	0cb0a023          	sw	a1,192(ra)

900004d0 <inst_72>:

inst_72:
// rs1_val==1717986919, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x17
TEST_IMM_OP( slli, x11, x10, 0x33800000, 0x66666667, 0x17, x1, 196, x2)
900004d0:	66666537          	lui	a0,0x66666
900004d4:	66750513          	addi	a0,a0,1639 # 66666667 <offset+0x66666563>
900004d8:	01751593          	slli	a1,a0,0x17
900004dc:	0cb0a223          	sw	a1,196(ra)

900004e0 <inst_73>:

inst_73:
// rs1_val==-46339, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xffd2bf40, -0xb503, 0x6, x1, 200, x2)
900004e0:	ffff5537          	lui	a0,0xffff5
900004e4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0x6fff27f9>
900004e8:	00651593          	slli	a1,a0,0x6
900004ec:	0cb0a423          	sw	a1,200(ra)

900004f0 <inst_74>:

inst_74:
// rs1_val==46341, 
// opcode: slli ; op1:x10; dest:x11; op1val:0xb505;  immval:0x1f
TEST_IMM_OP( slli, x11, x10, 0x80000000, 0xb505, 0x1f, x1, 204, x2)
900004f0:	0000b537          	lui	a0,0xb
900004f4:	50550513          	addi	a0,a0,1285 # b505 <offset+0xb401>
900004f8:	01f51593          	slli	a1,a0,0x1f
900004fc:	0cb0a623          	sw	a1,204(ra)

90000500 <inst_75>:

inst_75:
// imm_val == 4, rs1_val==858993458
// opcode: slli ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x4
TEST_IMM_OP( slli, x11, x10, 0x33333320, 0x33333332, 0x4, x1, 208, x2)
90000500:	33333537          	lui	a0,0x33333
90000504:	33250513          	addi	a0,a0,818 # 33333332 <offset+0x3333322e>
90000508:	00451593          	slli	a1,a0,0x4
9000050c:	0cb0a823          	sw	a1,208(ra)

90000510 <inst_76>:

inst_76:
// imm_val == 30, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x6;  immval:0x1e
TEST_IMM_OP( slli, x11, x10, 0x80000000, -0x6, 0x1e, x1, 212, x2)
90000510:	ffa00513          	li	a0,-6
90000514:	01e51593          	slli	a1,a0,0x1e
90000518:	0cb0aa23          	sw	a1,212(ra)

9000051c <inst_77>:

inst_77:
// rs1_val==46340, 
// opcode: slli ; op1:x10; dest:x11; op1val:0xb504;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0x5a8200, 0xb504, 0x7, x1, 216, x2)
9000051c:	0000b537          	lui	a0,0xb
90000520:	50450513          	addi	a0,a0,1284 # b504 <offset+0xb400>
90000524:	00751593          	slli	a1,a0,0x7
90000528:	0cb0ac23          	sw	a1,216(ra)

9000052c <inst_78>:

inst_78:
// rs1_val == -1048577, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x100001;  immval:0x8
TEST_IMM_OP( slli, x11, x10, 0xefffff00, -0x100001, 0x8, x1, 220, x2)
9000052c:	fff00537          	lui	a0,0xfff00
90000530:	fff50513          	addi	a0,a0,-1 # ffefffff <_end+0x6fefdcfb>
90000534:	00851593          	slli	a1,a0,0x8
90000538:	0cb0ae23          	sw	a1,220(ra)

9000053c <inst_79>:

inst_79:
// rs1_val==1431655764, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0xaaaaaaa0, 0x55555554, 0x3, x1, 224, x2)
9000053c:	55555537          	lui	a0,0x55555
90000540:	55450513          	addi	a0,a0,1364 # 55555554 <offset+0x55555450>
90000544:	00351593          	slli	a1,a0,0x3
90000548:	0eb0a023          	sw	a1,224(ra)

9000054c <inst_80>:

inst_80:
// rs1_val==1717986917, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0x66650000, 0x66666665, 0x10, x1, 228, x2)
9000054c:	66666537          	lui	a0,0x66666
90000550:	66550513          	addi	a0,a0,1637 # 66666665 <offset+0x66666561>
90000554:	01051593          	slli	a1,a0,0x10
90000558:	0eb0a223          	sw	a1,228(ra)

9000055c <inst_81>:

inst_81:
// rs1_val==46339, 
// opcode: slli ; op1:x10; dest:x11; op1val:0xb503;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0xb5030000, 0xb503, 0x10, x1, 232, x2)
9000055c:	0000b537          	lui	a0,0xb
90000560:	50350513          	addi	a0,a0,1283 # b503 <offset+0xb3ff>
90000564:	01051593          	slli	a1,a0,0x10
90000568:	0eb0a423          	sw	a1,232(ra)

9000056c <inst_82>:

inst_82:
// rs1_val==1431655766, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x17
TEST_IMM_OP( slli, x11, x10, 0xab000000, 0x55555556, 0x17, x1, 236, x2)
9000056c:	55555537          	lui	a0,0x55555
90000570:	55650513          	addi	a0,a0,1366 # 55555556 <offset+0x55555452>
90000574:	01751593          	slli	a1,a0,0x17
90000578:	0eb0a623          	sw	a1,236(ra)

9000057c <inst_83>:

inst_83:
// rs1_val==-1431655765, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0xaaaac000, -0x55555555, 0xe, x1, 240, x2)
9000057c:	aaaab537          	lui	a0,0xaaaab
90000580:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0x1aaa87a7>
90000584:	00e51593          	slli	a1,a0,0xe
90000588:	0eb0a823          	sw	a1,240(ra)

9000058c <inst_84>:

inst_84:
// rs1_val==6, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x6;  immval:0x1e
TEST_IMM_OP( slli, x11, x10, 0x80000000, 0x6, 0x1e, x1, 244, x2)
9000058c:	00600513          	li	a0,6
90000590:	01e51593          	slli	a1,a0,0x1e
90000594:	0eb0aa23          	sw	a1,244(ra)

90000598 <inst_85>:

inst_85:
// rs1_val==858993460, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x1d
TEST_IMM_OP( slli, x11, x10, 0x80000000, 0x33333334, 0x1d, x1, 248, x2)
90000598:	33333537          	lui	a0,0x33333
9000059c:	33450513          	addi	a0,a0,820 # 33333334 <offset+0x33333230>
900005a0:	01d51593          	slli	a1,a0,0x1d
900005a4:	0eb0ac23          	sw	a1,248(ra)

900005a8 <inst_86>:

inst_86:
// rs1_val == 512, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x200;  immval:0x0
TEST_IMM_OP( slli, x11, x10, 0x200, 0x200, 0x0, x1, 252, x2)
900005a8:	20000513          	li	a0,512
900005ac:	00051593          	slli	a1,a0,0x0
900005b0:	0eb0ae23          	sw	a1,252(ra)

900005b4 <inst_87>:

inst_87:
// rs1_val == 65536, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x10000;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0x20000, 0x10000, 0x1, x1, 256, x2)
900005b4:	00010537          	lui	a0,0x10
900005b8:	00151593          	slli	a1,a0,0x1
900005bc:	10b0a023          	sw	a1,256(ra)

900005c0 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
900005c0:	00408093          	addi	ra,ra,4
900005c4:	00100093          	li	ra,1

900005c8 <write_tohost>:
900005c8:	00001f17          	auipc	t5,0x1
900005cc:	a21f2c23          	sw	ra,-1480(t5) # 90001000 <tohost>

900005d0 <self_loop>:
900005d0:	0000006f          	j	900005d0 <self_loop>
900005d4:	0000                	unimp
	...
