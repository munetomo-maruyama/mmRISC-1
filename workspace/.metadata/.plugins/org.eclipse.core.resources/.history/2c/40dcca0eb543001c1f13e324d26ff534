//===========================================================
// mmRISC Project
//-----------------------------------------------------------
// File Name   : main.c
// Description : Main Routine
//-----------------------------------------------------------
// History :
// Rev.01 2020.09.03 M.Maruyama First Release
//-----------------------------------------------------------
// Copyright (C) 2020-2021 M.Maruyama
//===========================================================

#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include "common.h"
#include "csr.h"
#include "gpio.h"
#include "interrupt.h"
#include "uart.h"
#include "xprintf.h"

//-----------------
// Main Routine
//-----------------
void main(void)
{
    int    i;
    double fth, fsin;
    int    ith, isin;
    char   buf[256];
    char   *pbuf;
    long   num;
    //
    // Initialize Hardware
    GPIO_Init();
    UART_Init();
    INT_Init();
    //
    // Message
  //printf("======== mmRISC ========\n");
    //
    // Calculate Sine
    for (i = 0; i < 360; i = i + 10)
    {
        fth = (M_PI/180) * (double)i;
        fsin = sin(fth);

        ith  = (int)floor(fth  * 1000);
        isin = (int)floor(fsin * 1000);

        printf("sin(%6d)= %5d : sin(%6.4f)=%7.4f\n", ith, isin, fth, fsin);
    }
    // Test malloc
    int *intptr1;
    int *intptr2;
    int *intptr3;
    intptr1 = (int*) malloc(sizeof(int)*64);
    printf("intptr1 = %08x\n", (int)intptr1);
    intptr2 = (int*) malloc(sizeof(int)*64);
    printf("intptr2 = %08x\n", (int)intptr2);
    free(intptr2);
    intptr3 = (int*) malloc(sizeof(int)*64);
    printf("intptr3 = %08x\n", (int)intptr3);
    free(intptr3);
    free(intptr1);
    //
    //
    // Test xgets
    mem_wr8(UART_CSR, 0x00); // IERX=0
    printf("Input a Number:\n");
    xgets(buf, 256);
    pbuf = buf;
    xatoi(&pbuf, &num);
    printf("--->%d\n", (int)num);
    mem_wr8(UART_CSR, 0x40); // IERX=1
    //
    // Wait for Interrupt
    printf("Input any Character:\n");
    //
    volatile uint32_t itemp;
    volatile float    ftemp;
    volatile float    ftemp1;
    itemp  = 0;
    ftemp1 = 1.0;
    while(1)
    {
        ftemp = (float)itemp;
        ftemp = ftemp + ftemp1;
        itemp = (uint32_t)ftemp;
      //printf("%d\n", itemp);
    }
}

//===========================================================
// End of Program
//===========================================================
